{"ast":null,"code":"// import 'antd/dist/antd.css'\n// import './style.css'\n// import React, { Fragment } from 'react'\n// import { Keyframes, animated } from 'react-spring/renderprops'\n// import { Avatar, Form, Icon, Input, Button, Checkbox } from 'antd'\n// import delay from 'delay'\n//\n// // Creates a spring with predefined animation slots\n// const Sidebar = Keyframes.Spring({\n//     // Slots can take arrays/chains,\n//     peek: [{ x: 0, from: { x: -100 }, delay: 500 }, { x: -100, delay: 800 }],\n//     // single items,\n//     open: { delay: 0, x: 0 },\n//     // or async functions with side-effects\n//     close: async call => {\n//         await delay(400);\n//         await call({ delay: 0, x: -100 })\n//     },\n// });\n//\n// // Creates a keyframed trail\n// const Content = Keyframes.Trail({\n//     peek: [\n//         { x: 0, opacity: 1, from: { x: -100, opacity: 0 }, delay: 600 },\n//         { x: -100, opacity: 0, delay: 0 },\n//     ],\n//     open: { x: 0, opacity: 1, delay: 100 },\n//     close: { x: -100, opacity: 0, delay: 0 },\n// });\n//\n// const items = [\n//     <Avatar src=\"https://semantic-ui.com/images/avatar2/large/elyse.png\" />,\n//     <Input\n//         size=\"small\"\n//         prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n//         placeholder=\"Username\"\n//     />,\n//     <Input\n//         size=\"small\"\n//         prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n//         type=\"password\"\n//         placeholder=\"Password\"\n//     />,\n//     <Fragment>\n//         <Checkbox size=\"small\">Remember me</Checkbox>\n//         <a className=\"login-form-forgot\" href=\"#\" children=\"Forgot password\" />\n//         <Button\n//             size=\"small\"\n//             type=\"primary\"\n//             htmlType=\"submit\"\n//             className=\"login-form-button\"\n//             children=\"Log in\"\n//         />\n//     </Fragment>,\n// ]\n//\n// export default class SlideBar_my extends React.Component {\n//     state = { open: undefined }\n//     toggle = () => this.setState(state => ({ open: !state.open }))\n//     render() {\n//         const state =\n//             this.state.open === undefined\n//                 ? 'peek'\n//                 : this.state.open\n//                 ? 'open'\n//                 : 'close'\n//         const icon = this.state.open ? 'fold' : 'unfold'\n//         return (\n//             <div style={{ background: 'lightblue', width: '100%', height: '100%' }}>\n//                 <Icon\n//                     type={`menu-${icon}`}\n//                     className=\"sidebar-toggle\"\n//                     onClick={this.toggle}\n//                 />\n//                 <Sidebar native state={state}>\n//                     {({ x }) => (\n//                         <animated.div\n//                             className=\"sidebar\"\n//                             style={{\n//                                 transform: x.interpolate(x => `translate3d(${x}%,0,0)`),\n//                             }}>\n//                             <Content\n//                                 native\n//                                 items={items}\n//                                 keys={items.map((_, i) => i)}\n//                                 reverse={!this.state.open}\n//                                 state={state}>\n//                                 {(item, i) => ({ x, ...props }) => (\n//                                     <animated.div\n//                                         style={{\n//                                             transform: x.interpolate(x => `translate3d(${x}%,0,0)`),\n//                                             ...props,\n//                                         }}>\n//                                         <Form.Item className={i === 0 ? 'middle' : ''}>\n//                                             {item}\n//                                         </Form.Item>\n//                                     </animated.div>\n//                                 )}\n//                             </Content>\n//                         </animated.div>\n//                     )}\n//                 </Sidebar>\n//             </div>\n//         )\n//     }\n// }","map":{"version":3,"sources":["/home/kraven/Documents/oksana/src/components/SideBar/SlideBar.js"],"names":[],"mappingssourcesContent":["// import 'antd/dist/antd.css'\n// import './style.css'\n// import React, { Fragment } from 'react'\n// import { Keyframes, animated } from 'react-spring/renderprops'\n// import { Avatar, Form, Icon, Input, Button, Checkbox } from 'antd'\n// import delay from 'delay'\n//\n// // Creates a spring with predefined animation slots\n// const Sidebar = Keyframes.Spring({\n//     // Slots can take arrays/chains,\n//     peek: [{ x: 0, from: { x: -100 }, delay: 500 }, { x: -100, delay: 800 }],\n//     // single items,\n//     open: { delay: 0, x: 0 },\n//     // or async functions with side-effects\n//     close: async call => {\n//         await delay(400);\n//         await call({ delay: 0, x: -100 })\n//     },\n// });\n//\n// // Creates a keyframed trail\n// const Content = Keyframes.Trail({\n//     peek: [\n//         { x: 0, opacity: 1, from: { x: -100, opacity: 0 }, delay: 600 },\n//         { x: -100, opacity: 0, delay: 0 },\n//     ],\n//     open: { x: 0, opacity: 1, delay: 100 },\n//     close: { x: -100, opacity: 0, delay: 0 },\n// });\n//\n// const items = [\n//     <Avatar src=\"https://semantic-ui.com/images/avatar2/large/elyse.png\" />,\n//     <Input\n//         size=\"small\"\n//         prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n//         placeholder=\"Username\"\n//     />,\n//     <Input\n//         size=\"small\"\n//         prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n//         type=\"password\"\n//         placeholder=\"Password\"\n//     />,\n//     <Fragment>\n//         <Checkbox size=\"small\">Remember me</Checkbox>\n//         <a className=\"login-form-forgot\" href=\"#\" children=\"Forgot password\" />\n//         <Button\n//             size=\"small\"\n//             type=\"primary\"\n//             htmlType=\"submit\"\n//             className=\"login-form-button\"\n//             children=\"Log in\"\n//         />\n//     </Fragment>,\n// ]\n//\n// export default class SlideBar_my extends React.Component {\n//     state = { open: undefined }\n//     toggle = () => this.setState(state => ({ open: !state.open }))\n//     render() {\n//         const state =\n//             this.state.open === undefined\n//                 ? 'peek'\n//                 : this.state.open\n//                 ? 'open'\n//                 : 'close'\n//         const icon = this.state.open ? 'fold' : 'unfold'\n//         return (\n//             <div style={{ background: 'lightblue', width: '100%', height: '100%' }}>\n//                 <Icon\n//                     type={`menu-${icon}`}\n//                     className=\"sidebar-toggle\"\n//                     onClick={this.toggle}\n//                 />\n//                 <Sidebar native state={state}>\n//                     {({ x }) => (\n//                         <animated.div\n//                             className=\"sidebar\"\n//                             style={{\n//                                 transform: x.interpolate(x => `translate3d(${x}%,0,0)`),\n//                             }}>\n//                             <Content\n//                                 native\n//                                 items={items}\n//                                 keys={items.map((_, i) => i)}\n//                                 reverse={!this.state.open}\n//                                 state={state}>\n//                                 {(item, i) => ({ x, ...props }) => (\n//                                     <animated.div\n//                                         style={{\n//                                             transform: x.interpolate(x => `translate3d(${x}%,0,0)`),\n//                                             ...props,\n//                                         }}>\n//                                         <Form.Item className={i === 0 ? 'middle' : ''}>\n//                                             {item}\n//                                         </Form.Item>\n//                                     </animated.div>\n//                                 )}\n//                             </Content>\n//                         </animated.div>\n//                     )}\n//                 </Sidebar>\n//             </div>\n//         )\n//     }\n// }"]},"metadata":{},"sourceType":"module"}