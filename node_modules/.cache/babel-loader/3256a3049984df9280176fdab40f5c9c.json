{"ast":null,"code":"/*!\n * @pixi/text - v5.2.1\n * Compiled Tue, 28 Jan 2020 23:33:11 UTC\n *\n * @pixi/text is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Sprite } from '@pixi/sprite';\nimport { Texture } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { Rectangle } from '@pixi/math';\nimport { hex2string, hex2rgb, string2hex, trimCanvas, sign } from '@pixi/utils';\n/**\n * Constants that define the type of gradient on text.\n *\n * @static\n * @constant\n * @name TEXT_GRADIENT\n * @memberof PIXI\n * @type {object}\n * @property {number} LINEAR_VERTICAL Vertical gradient\n * @property {number} LINEAR_HORIZONTAL Linear gradient\n */\n\nvar TEXT_GRADIENT = {\n  LINEAR_VERTICAL: 0,\n  LINEAR_HORIZONTAL: 1\n}; // disabling eslint for now, going to rewrite this in v5\n\nvar defaultStyle = {\n  align: 'left',\n  breakWords: false,\n  dropShadow: false,\n  dropShadowAlpha: 1,\n  dropShadowAngle: Math.PI / 6,\n  dropShadowBlur: 0,\n  dropShadowColor: 'black',\n  dropShadowDistance: 5,\n  fill: 'black',\n  fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n  fillGradientStops: [],\n  fontFamily: 'Arial',\n  fontSize: 26,\n  fontStyle: 'normal',\n  fontVariant: 'normal',\n  fontWeight: 'normal',\n  letterSpacing: 0,\n  lineHeight: 0,\n  lineJoin: 'miter',\n  miterLimit: 10,\n  padding: 0,\n  stroke: 'black',\n  strokeThickness: 0,\n  textBaseline: 'alphabetic',\n  trim: false,\n  whiteSpace: 'pre',\n  wordWrap: false,\n  wordWrapWidth: 100,\n  leading: 0\n};\nvar genericFontFamilies = ['serif', 'sans-serif', 'monospace', 'cursive', 'fantasy', 'system-ui'];\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n *\n * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).\n *\n * @class\n * @memberof PIXI\n */\n\nvar TextStyle = function TextStyle(style) {\n  this.styleID = 0;\n  this.reset();\n  deepCopyProperties(this, style, style);\n};\n\nvar prototypeAccessors = {\n  align: {\n    configurable: true\n  },\n  breakWords: {\n    configurable: true\n  },\n  dropShadow: {\n    configurable: true\n  },\n  dropShadowAlpha: {\n    configurable: true\n  },\n  dropShadowAngle: {\n    configurable: true\n  },\n  dropShadowBlur: {\n    configurable: true\n  },\n  dropShadowColor: {\n    configurable: true\n  },\n  dropShadowDistance: {\n    configurable: true\n  },\n  fill: {\n    configurable: true\n  },\n  fillGradientType: {\n    configurable: true\n  },\n  fillGradientStops: {\n    configurable: true\n  },\n  fontFamily: {\n    configurable: true\n  },\n  fontSize: {\n    configurable: true\n  },\n  fontStyle: {\n    configurable: true\n  },\n  fontVariant: {\n    configurable: true\n  },\n  fontWeight: {\n    configurable: true\n  },\n  letterSpacing: {\n    configurable: true\n  },\n  lineHeight: {\n    configurable: true\n  },\n  leading: {\n    configurable: true\n  },\n  lineJoin: {\n    configurable: true\n  },\n  miterLimit: {\n    configurable: true\n  },\n  padding: {\n    configurable: true\n  },\n  stroke: {\n    configurable: true\n  },\n  strokeThickness: {\n    configurable: true\n  },\n  textBaseline: {\n    configurable: true\n  },\n  trim: {\n    configurable: true\n  },\n  whiteSpace: {\n    configurable: true\n  },\n  wordWrap: {\n    configurable: true\n  },\n  wordWrapWidth: {\n    configurable: true\n  }\n};\n/**\n * Creates a new TextStyle object with the same values as this one.\n * Note that the only the properties of the object are cloned.\n *\n * @return {PIXI.TextStyle} New cloned TextStyle object\n */\n\nTextStyle.prototype.clone = function clone() {\n  var clonedProperties = {};\n  deepCopyProperties(clonedProperties, this, defaultStyle);\n  return new TextStyle(clonedProperties);\n};\n/**\n * Resets all properties to the defaults specified in TextStyle.prototype._default\n */\n\n\nTextStyle.prototype.reset = function reset() {\n  deepCopyProperties(this, defaultStyle, defaultStyle);\n};\n/**\n * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n *\n * @member {string}\n */\n\n\nprototypeAccessors.align.get = function () {\n  return this._align;\n};\n\nprototypeAccessors.align.set = function (align) // eslint-disable-line require-jsdoc\n{\n  if (this._align !== align) {\n    this._align = align;\n    this.styleID++;\n  }\n};\n/**\n * Indicates if lines can be wrapped within words, it needs wordWrap to be set to true\n *\n * @member {boolean}\n */\n\n\nprototypeAccessors.breakWords.get = function () {\n  return this._breakWords;\n};\n\nprototypeAccessors.breakWords.set = function (breakWords) // eslint-disable-line require-jsdoc\n{\n  if (this._breakWords !== breakWords) {\n    this._breakWords = breakWords;\n    this.styleID++;\n  }\n};\n/**\n * Set a drop shadow for the text\n *\n * @member {boolean}\n */\n\n\nprototypeAccessors.dropShadow.get = function () {\n  return this._dropShadow;\n};\n\nprototypeAccessors.dropShadow.set = function (dropShadow) // eslint-disable-line require-jsdoc\n{\n  if (this._dropShadow !== dropShadow) {\n    this._dropShadow = dropShadow;\n    this.styleID++;\n  }\n};\n/**\n * Set alpha for the drop shadow\n *\n * @member {number}\n */\n\n\nprototypeAccessors.dropShadowAlpha.get = function () {\n  return this._dropShadowAlpha;\n};\n\nprototypeAccessors.dropShadowAlpha.set = function (dropShadowAlpha) // eslint-disable-line require-jsdoc\n{\n  if (this._dropShadowAlpha !== dropShadowAlpha) {\n    this._dropShadowAlpha = dropShadowAlpha;\n    this.styleID++;\n  }\n};\n/**\n * Set a angle of the drop shadow\n *\n * @member {number}\n */\n\n\nprototypeAccessors.dropShadowAngle.get = function () {\n  return this._dropShadowAngle;\n};\n\nprototypeAccessors.dropShadowAngle.set = function (dropShadowAngle) // eslint-disable-line require-jsdoc\n{\n  if (this._dropShadowAngle !== dropShadowAngle) {\n    this._dropShadowAngle = dropShadowAngle;\n    this.styleID++;\n  }\n};\n/**\n * Set a shadow blur radius\n *\n * @member {number}\n */\n\n\nprototypeAccessors.dropShadowBlur.get = function () {\n  return this._dropShadowBlur;\n};\n\nprototypeAccessors.dropShadowBlur.set = function (dropShadowBlur) // eslint-disable-line require-jsdoc\n{\n  if (this._dropShadowBlur !== dropShadowBlur) {\n    this._dropShadowBlur = dropShadowBlur;\n    this.styleID++;\n  }\n};\n/**\n * A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n *\n * @member {string|number}\n */\n\n\nprototypeAccessors.dropShadowColor.get = function () {\n  return this._dropShadowColor;\n};\n\nprototypeAccessors.dropShadowColor.set = function (dropShadowColor) // eslint-disable-line require-jsdoc\n{\n  var outputColor = getColor(dropShadowColor);\n\n  if (this._dropShadowColor !== outputColor) {\n    this._dropShadowColor = outputColor;\n    this.styleID++;\n  }\n};\n/**\n * Set a distance of the drop shadow\n *\n * @member {number}\n */\n\n\nprototypeAccessors.dropShadowDistance.get = function () {\n  return this._dropShadowDistance;\n};\n\nprototypeAccessors.dropShadowDistance.set = function (dropShadowDistance) // eslint-disable-line require-jsdoc\n{\n  if (this._dropShadowDistance !== dropShadowDistance) {\n    this._dropShadowDistance = dropShadowDistance;\n    this.styleID++;\n  }\n};\n/**\n * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n *\n * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n */\n\n\nprototypeAccessors.fill.get = function () {\n  return this._fill;\n};\n\nprototypeAccessors.fill.set = function (fill) // eslint-disable-line require-jsdoc\n{\n  var outputColor = getColor(fill);\n\n  if (this._fill !== outputColor) {\n    this._fill = outputColor;\n    this.styleID++;\n  }\n};\n/**\n * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n * See {@link PIXI.TEXT_GRADIENT}\n *\n * @member {number}\n */\n\n\nprototypeAccessors.fillGradientType.get = function () {\n  return this._fillGradientType;\n};\n\nprototypeAccessors.fillGradientType.set = function (fillGradientType) // eslint-disable-line require-jsdoc\n{\n  if (this._fillGradientType !== fillGradientType) {\n    this._fillGradientType = fillGradientType;\n    this.styleID++;\n  }\n};\n/**\n * If fill is an array of colours to create a gradient, this array can set the stop points\n * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n *\n * @member {number[]}\n */\n\n\nprototypeAccessors.fillGradientStops.get = function () {\n  return this._fillGradientStops;\n};\n\nprototypeAccessors.fillGradientStops.set = function (fillGradientStops) // eslint-disable-line require-jsdoc\n{\n  if (!areArraysEqual(this._fillGradientStops, fillGradientStops)) {\n    this._fillGradientStops = fillGradientStops;\n    this.styleID++;\n  }\n};\n/**\n * The font family\n *\n * @member {string|string[]}\n */\n\n\nprototypeAccessors.fontFamily.get = function () {\n  return this._fontFamily;\n};\n\nprototypeAccessors.fontFamily.set = function (fontFamily) // eslint-disable-line require-jsdoc\n{\n  if (this.fontFamily !== fontFamily) {\n    this._fontFamily = fontFamily;\n    this.styleID++;\n  }\n};\n/**\n * The font size\n * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n *\n * @member {number|string}\n */\n\n\nprototypeAccessors.fontSize.get = function () {\n  return this._fontSize;\n};\n\nprototypeAccessors.fontSize.set = function (fontSize) // eslint-disable-line require-jsdoc\n{\n  if (this._fontSize !== fontSize) {\n    this._fontSize = fontSize;\n    this.styleID++;\n  }\n};\n/**\n * The font style\n * ('normal', 'italic' or 'oblique')\n *\n * @member {string}\n */\n\n\nprototypeAccessors.fontStyle.get = function () {\n  return this._fontStyle;\n};\n\nprototypeAccessors.fontStyle.set = function (fontStyle) // eslint-disable-line require-jsdoc\n{\n  if (this._fontStyle !== fontStyle) {\n    this._fontStyle = fontStyle;\n    this.styleID++;\n  }\n};\n/**\n * The font variant\n * ('normal' or 'small-caps')\n *\n * @member {string}\n */\n\n\nprototypeAccessors.fontVariant.get = function () {\n  return this._fontVariant;\n};\n\nprototypeAccessors.fontVariant.set = function (fontVariant) // eslint-disable-line require-jsdoc\n{\n  if (this._fontVariant !== fontVariant) {\n    this._fontVariant = fontVariant;\n    this.styleID++;\n  }\n};\n/**\n * The font weight\n * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n *\n * @member {string}\n */\n\n\nprototypeAccessors.fontWeight.get = function () {\n  return this._fontWeight;\n};\n\nprototypeAccessors.fontWeight.set = function (fontWeight) // eslint-disable-line require-jsdoc\n{\n  if (this._fontWeight !== fontWeight) {\n    this._fontWeight = fontWeight;\n    this.styleID++;\n  }\n};\n/**\n * The amount of spacing between letters, default is 0\n *\n * @member {number}\n */\n\n\nprototypeAccessors.letterSpacing.get = function () {\n  return this._letterSpacing;\n};\n\nprototypeAccessors.letterSpacing.set = function (letterSpacing) // eslint-disable-line require-jsdoc\n{\n  if (this._letterSpacing !== letterSpacing) {\n    this._letterSpacing = letterSpacing;\n    this.styleID++;\n  }\n};\n/**\n * The line height, a number that represents the vertical space that a letter uses\n *\n * @member {number}\n */\n\n\nprototypeAccessors.lineHeight.get = function () {\n  return this._lineHeight;\n};\n\nprototypeAccessors.lineHeight.set = function (lineHeight) // eslint-disable-line require-jsdoc\n{\n  if (this._lineHeight !== lineHeight) {\n    this._lineHeight = lineHeight;\n    this.styleID++;\n  }\n};\n/**\n * The space between lines\n *\n * @member {number}\n */\n\n\nprototypeAccessors.leading.get = function () {\n  return this._leading;\n};\n\nprototypeAccessors.leading.set = function (leading) // eslint-disable-line require-jsdoc\n{\n  if (this._leading !== leading) {\n    this._leading = leading;\n    this.styleID++;\n  }\n};\n/**\n * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n * Default is 'miter' (creates a sharp corner).\n *\n * @member {string}\n */\n\n\nprototypeAccessors.lineJoin.get = function () {\n  return this._lineJoin;\n};\n\nprototypeAccessors.lineJoin.set = function (lineJoin) // eslint-disable-line require-jsdoc\n{\n  if (this._lineJoin !== lineJoin) {\n    this._lineJoin = lineJoin;\n    this.styleID++;\n  }\n};\n/**\n * The miter limit to use when using the 'miter' lineJoin mode\n * This can reduce or increase the spikiness of rendered text.\n *\n * @member {number}\n */\n\n\nprototypeAccessors.miterLimit.get = function () {\n  return this._miterLimit;\n};\n\nprototypeAccessors.miterLimit.set = function (miterLimit) // eslint-disable-line require-jsdoc\n{\n  if (this._miterLimit !== miterLimit) {\n    this._miterLimit = miterLimit;\n    this.styleID++;\n  }\n};\n/**\n * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n * by adding padding to all sides of the text.\n *\n * @member {number}\n */\n\n\nprototypeAccessors.padding.get = function () {\n  return this._padding;\n};\n\nprototypeAccessors.padding.set = function (padding) // eslint-disable-line require-jsdoc\n{\n  if (this._padding !== padding) {\n    this._padding = padding;\n    this.styleID++;\n  }\n};\n/**\n * A canvas fillstyle that will be used on the text stroke\n * e.g 'blue', '#FCFF00'\n *\n * @member {string|number}\n */\n\n\nprototypeAccessors.stroke.get = function () {\n  return this._stroke;\n};\n\nprototypeAccessors.stroke.set = function (stroke) // eslint-disable-line require-jsdoc\n{\n  var outputColor = getColor(stroke);\n\n  if (this._stroke !== outputColor) {\n    this._stroke = outputColor;\n    this.styleID++;\n  }\n};\n/**\n * A number that represents the thickness of the stroke.\n * Default is 0 (no stroke)\n *\n * @member {number}\n */\n\n\nprototypeAccessors.strokeThickness.get = function () {\n  return this._strokeThickness;\n};\n\nprototypeAccessors.strokeThickness.set = function (strokeThickness) // eslint-disable-line require-jsdoc\n{\n  if (this._strokeThickness !== strokeThickness) {\n    this._strokeThickness = strokeThickness;\n    this.styleID++;\n  }\n};\n/**\n * The baseline of the text that is rendered.\n *\n * @member {string}\n */\n\n\nprototypeAccessors.textBaseline.get = function () {\n  return this._textBaseline;\n};\n\nprototypeAccessors.textBaseline.set = function (textBaseline) // eslint-disable-line require-jsdoc\n{\n  if (this._textBaseline !== textBaseline) {\n    this._textBaseline = textBaseline;\n    this.styleID++;\n  }\n};\n/**\n * Trim transparent borders\n *\n * @member {boolean}\n */\n\n\nprototypeAccessors.trim.get = function () {\n  return this._trim;\n};\n\nprototypeAccessors.trim.set = function (trim) // eslint-disable-line require-jsdoc\n{\n  if (this._trim !== trim) {\n    this._trim = trim;\n    this.styleID++;\n  }\n};\n/**\n * How newlines and spaces should be handled.\n * Default is 'pre' (preserve, preserve).\n *\n *  value   | New lines |   Spaces\n *  ---     | ---       |   ---\n * 'normal' | Collapse  |   Collapse\n * 'pre'    | Preserve  |   Preserve\n * 'pre-line'   | Preserve  |   Collapse\n *\n * @member {string}\n */\n\n\nprototypeAccessors.whiteSpace.get = function () {\n  return this._whiteSpace;\n};\n\nprototypeAccessors.whiteSpace.set = function (whiteSpace) // eslint-disable-line require-jsdoc\n{\n  if (this._whiteSpace !== whiteSpace) {\n    this._whiteSpace = whiteSpace;\n    this.styleID++;\n  }\n};\n/**\n * Indicates if word wrap should be used\n *\n * @member {boolean}\n */\n\n\nprototypeAccessors.wordWrap.get = function () {\n  return this._wordWrap;\n};\n\nprototypeAccessors.wordWrap.set = function (wordWrap) // eslint-disable-line require-jsdoc\n{\n  if (this._wordWrap !== wordWrap) {\n    this._wordWrap = wordWrap;\n    this.styleID++;\n  }\n};\n/**\n * The width at which text will wrap, it needs wordWrap to be set to true\n *\n * @member {number}\n */\n\n\nprototypeAccessors.wordWrapWidth.get = function () {\n  return this._wordWrapWidth;\n};\n\nprototypeAccessors.wordWrapWidth.set = function (wordWrapWidth) // eslint-disable-line require-jsdoc\n{\n  if (this._wordWrapWidth !== wordWrapWidth) {\n    this._wordWrapWidth = wordWrapWidth;\n    this.styleID++;\n  }\n};\n/**\n * Generates a font style string to use for `TextMetrics.measureFont()`.\n *\n * @return {string} Font style string, for passing to `TextMetrics.measureFont()`\n */\n\n\nTextStyle.prototype.toFontString = function toFontString() {\n  // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n  var fontSizeString = typeof this.fontSize === 'number' ? this.fontSize + \"px\" : this.fontSize; // Clean-up fontFamily property by quoting each font name\n  // this will support font names with spaces\n\n  var fontFamilies = this.fontFamily;\n\n  if (!Array.isArray(this.fontFamily)) {\n    fontFamilies = this.fontFamily.split(',');\n  }\n\n  for (var i = fontFamilies.length - 1; i >= 0; i--) {\n    // Trim any extra white-space\n    var fontFamily = fontFamilies[i].trim(); // Check if font already contains strings\n\n    if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontFamily) && genericFontFamilies.indexOf(fontFamily) < 0) {\n      fontFamily = \"\\\"\" + fontFamily + \"\\\"\";\n    }\n\n    fontFamilies[i] = fontFamily;\n  }\n\n  return this.fontStyle + \" \" + this.fontVariant + \" \" + this.fontWeight + \" \" + fontSizeString + \" \" + fontFamilies.join(',');\n};\n\nObject.defineProperties(TextStyle.prototype, prototypeAccessors);\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * @private\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\n\nfunction getSingleColor(color) {\n  if (typeof color === 'number') {\n    return hex2string(color);\n  } else if (typeof color === 'string') {\n    if (color.indexOf('0x') === 0) {\n      color = color.replace('0x', '#');\n    }\n  }\n\n  return color;\n}\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\n\n\nfunction getColor(color) {\n  if (!Array.isArray(color)) {\n    return getSingleColor(color);\n  } else {\n    for (var i = 0; i < color.length; ++i) {\n      color[i] = getSingleColor(color[i]);\n    }\n\n    return color;\n  }\n}\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {Array} array1 First array to compare\n * @param {Array} array2 Second array to compare\n * @return {boolean} Do the arrays contain the same values in the same order\n */\n\n\nfunction areArraysEqual(array1, array2) {\n  if (!Array.isArray(array1) || !Array.isArray(array2)) {\n    return false;\n  }\n\n  if (array1.length !== array2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < array1.length; ++i) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param {Object} target Target object to copy properties into\n * @param {Object} source Source object for the properties to copy\n * @param {string} propertyObj Object containing properties names we want to loop over\n */\n\n\nfunction deepCopyProperties(target, source, propertyObj) {\n  for (var prop in propertyObj) {\n    if (Array.isArray(source[prop])) {\n      target[prop] = source[prop].slice();\n    } else {\n      target[prop] = source[prop];\n    }\n  }\n}\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n *\n * @class\n * @memberof PIXI\n */\n\n\nvar TextMetrics = function TextMetrics(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties) {\n  /**\n   * The text that was measured\n   *\n   * @member {string}\n   */\n  this.text = text;\n  /**\n   * The style that was measured\n   *\n   * @member {PIXI.TextStyle}\n   */\n\n  this.style = style;\n  /**\n   * The measured width of the text\n   *\n   * @member {number}\n   */\n\n  this.width = width;\n  /**\n   * The measured height of the text\n   *\n   * @member {number}\n   */\n\n  this.height = height;\n  /**\n   * An array of lines of the text broken by new lines and wrapping is specified in style\n   *\n   * @member {string[]}\n   */\n\n  this.lines = lines;\n  /**\n   * An array of the line widths for each line matched to `lines`\n   *\n   * @member {number[]}\n   */\n\n  this.lineWidths = lineWidths;\n  /**\n   * The measured line height for this style\n   *\n   * @member {number}\n   */\n\n  this.lineHeight = lineHeight;\n  /**\n   * The maximum line width for all measured lines\n   *\n   * @member {number}\n   */\n\n  this.maxLineWidth = maxLineWidth;\n  /**\n   * The font properties object from TextMetrics.measureFont\n   *\n   * @member {PIXI.IFontMetrics}\n   */\n\n  this.fontProperties = fontProperties;\n};\n/**\n * Measures the supplied string of text and returns a Rectangle.\n *\n * @param {string} text - the text to measure.\n * @param {PIXI.TextStyle} style - the text style to use for measuring\n * @param {boolean} [wordWrap] - optional override for if word-wrap should be applied to the text.\n * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n * @return {PIXI.TextMetrics} measured width and height of the text.\n */\n\n\nTextMetrics.measureText = function measureText(text, style, wordWrap, canvas) {\n  if (canvas === void 0) canvas = TextMetrics._canvas;\n  wordWrap = wordWrap === undefined || wordWrap === null ? style.wordWrap : wordWrap;\n  var font = style.toFontString();\n  var fontProperties = TextMetrics.measureFont(font); // fallback in case UA disallow canvas data extraction\n  // (toDataURI, getImageData functions)\n\n  if (fontProperties.fontSize === 0) {\n    fontProperties.fontSize = style.fontSize;\n    fontProperties.ascent = style.fontSize;\n  }\n\n  var context = canvas.getContext('2d');\n  context.font = font;\n  var outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n  var lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n  var lineWidths = new Array(lines.length);\n  var maxLineWidth = 0;\n\n  for (var i = 0; i < lines.length; i++) {\n    var lineWidth = context.measureText(lines[i]).width + (lines[i].length - 1) * style.letterSpacing;\n    lineWidths[i] = lineWidth;\n    maxLineWidth = Math.max(maxLineWidth, lineWidth);\n  }\n\n  var width = maxLineWidth + style.strokeThickness;\n\n  if (style.dropShadow) {\n    width += style.dropShadowDistance;\n  }\n\n  var lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n  var height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness) + (lines.length - 1) * (lineHeight + style.leading);\n\n  if (style.dropShadow) {\n    height += style.dropShadowDistance;\n  }\n\n  return new TextMetrics(text, style, width, height, lines, lineWidths, lineHeight + style.leading, maxLineWidth, fontProperties);\n};\n/**\n * Applies newlines to a string to have it optimally fit into the horizontal\n * bounds set by the Text object's wordWrapWidth property.\n *\n * @private\n * @param {string} text - String to apply word wrapping to\n * @param {PIXI.TextStyle} style - the style to use when wrapping\n * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n * @return {string} New string with new lines applied where required\n */\n\n\nTextMetrics.wordWrap = function wordWrap(text, style, canvas) {\n  if (canvas === void 0) canvas = TextMetrics._canvas;\n  var context = canvas.getContext('2d');\n  var width = 0;\n  var line = '';\n  var lines = '';\n  var cache = {};\n  var letterSpacing = style.letterSpacing;\n  var whiteSpace = style.whiteSpace; // How to handle whitespaces\n\n  var collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n  var collapseNewlines = TextMetrics.collapseNewlines(whiteSpace); // whether or not spaces may be added to the beginning of lines\n\n  var canPrependSpaces = !collapseSpaces; // There is letterSpacing after every char except the last one\n  // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n  // so for convenience the above needs to be compared to width + 1 extra letterSpace\n  // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n  // ________________________________________________\n  // And then the final space is simply no appended to each line\n\n  var wordWrapWidth = style.wordWrapWidth + letterSpacing; // break text into words, spaces and newline chars\n\n  var tokens = TextMetrics.tokenize(text);\n\n  for (var i = 0; i < tokens.length; i++) {\n    // get the word, space or newlineChar\n    var token = tokens[i]; // if word is a new line\n\n    if (TextMetrics.isNewline(token)) {\n      // keep the new line\n      if (!collapseNewlines) {\n        lines += TextMetrics.addLine(line);\n        canPrependSpaces = !collapseSpaces;\n        line = '';\n        width = 0;\n        continue;\n      } // if we should collapse new lines\n      // we simply convert it into a space\n\n\n      token = ' ';\n    } // if we should collapse repeated whitespaces\n\n\n    if (collapseSpaces) {\n      // check both this and the last tokens for spaces\n      var currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n      var lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n      if (currIsBreakingSpace && lastIsBreakingSpace) {\n        continue;\n      }\n    } // get word width from cache if possible\n\n\n    var tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context); // word is longer than desired bounds\n\n    if (tokenWidth > wordWrapWidth) {\n      // if we are not already at the beginning of a line\n      if (line !== '') {\n        // start newlines for overflow words\n        lines += TextMetrics.addLine(line);\n        line = '';\n        width = 0;\n      } // break large word over multiple lines\n\n\n      if (TextMetrics.canBreakWords(token, style.breakWords)) {\n        // break word into characters\n        var characters = TextMetrics.wordWrapSplit(token); // loop the characters\n\n        for (var j = 0; j < characters.length; j++) {\n          var char = characters[j];\n          var k = 1; // we are not at the end of the token\n\n          while (characters[j + k]) {\n            var nextChar = characters[j + k];\n            var lastChar = char[char.length - 1]; // should not split chars\n\n            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords)) {\n              // combine chars & move forward one\n              char += nextChar;\n            } else {\n              break;\n            }\n\n            k++;\n          }\n\n          j += char.length - 1;\n          var characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n          if (characterWidth + width > wordWrapWidth) {\n            lines += TextMetrics.addLine(line);\n            canPrependSpaces = false;\n            line = '';\n            width = 0;\n          }\n\n          line += char;\n          width += characterWidth;\n        }\n      } // run word out of the bounds\n      else {\n          // if there are words in this line already\n          // finish that line and start a new one\n          if (line.length > 0) {\n            lines += TextMetrics.addLine(line);\n            line = '';\n            width = 0;\n          }\n\n          var isLastToken = i === tokens.length - 1; // give it its own line if it's not the end\n\n          lines += TextMetrics.addLine(token, !isLastToken);\n          canPrependSpaces = false;\n          line = '';\n          width = 0;\n        }\n    } // word could fit\n    else {\n        // word won't fit because of existing words\n        // start a new line\n        if (tokenWidth + width > wordWrapWidth) {\n          // if its a space we don't want it\n          canPrependSpaces = false; // add a new line\n\n          lines += TextMetrics.addLine(line); // start a new line\n\n          line = '';\n          width = 0;\n        } // don't add spaces to the beginning of lines\n\n\n        if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces) {\n          // add the word to the current line\n          line += token; // update width counter\n\n          width += tokenWidth;\n        }\n      }\n  }\n\n  lines += TextMetrics.addLine(line, false);\n  return lines;\n};\n/**\n * Convienience function for logging each line added during the wordWrap\n * method\n *\n * @private\n * @param  {string}   line    - The line of text to add\n * @param  {boolean}  newLine - Add new line character to end\n * @return {string}   A formatted line\n */\n\n\nTextMetrics.addLine = function addLine(line, newLine) {\n  if (newLine === void 0) newLine = true;\n  line = TextMetrics.trimRight(line);\n  line = newLine ? line + \"\\n\" : line;\n  return line;\n};\n/**\n * Gets & sets the widths of calculated characters in a cache object\n *\n * @private\n * @param  {string}                key        The key\n * @param  {number}                letterSpacing  The letter spacing\n * @param  {object}                cache      The cache\n * @param  {CanvasRenderingContext2D}  context    The canvas context\n * @return {number}                The from cache.\n */\n\n\nTextMetrics.getFromCache = function getFromCache(key, letterSpacing, cache, context) {\n  var width = cache[key];\n\n  if (width === undefined) {\n    var spacing = key.length * letterSpacing;\n    width = context.measureText(key).width + spacing;\n    cache[key] = width;\n  }\n\n  return width;\n};\n/**\n * Determines whether we should collapse breaking spaces\n *\n * @private\n * @param  {string}   whiteSpace  The TextStyle property whiteSpace\n * @return {boolean}  should collapse\n */\n\n\nTextMetrics.collapseSpaces = function collapseSpaces(whiteSpace) {\n  return whiteSpace === 'normal' || whiteSpace === 'pre-line';\n};\n/**\n * Determines whether we should collapse newLine chars\n *\n * @private\n * @param  {string}   whiteSpace  The white space\n * @return {boolean}  should collapse\n */\n\n\nTextMetrics.collapseNewlines = function collapseNewlines(whiteSpace) {\n  return whiteSpace === 'normal';\n};\n/**\n * trims breaking whitespaces from string\n *\n * @private\n * @param  {string}  text  The text\n * @return {string}  trimmed string\n */\n\n\nTextMetrics.trimRight = function trimRight(text) {\n  if (typeof text !== 'string') {\n    return '';\n  }\n\n  for (var i = text.length - 1; i >= 0; i--) {\n    var char = text[i];\n\n    if (!TextMetrics.isBreakingSpace(char)) {\n      break;\n    }\n\n    text = text.slice(0, -1);\n  }\n\n  return text;\n};\n/**\n * Determines if char is a newline.\n *\n * @private\n * @param  {string}  char  The character\n * @return {boolean}  True if newline, False otherwise.\n */\n\n\nTextMetrics.isNewline = function isNewline(char) {\n  if (typeof char !== 'string') {\n    return false;\n  }\n\n  return TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0;\n};\n/**\n * Determines if char is a breaking whitespace.\n *\n * @private\n * @param  {string}  char  The character\n * @return {boolean}  True if whitespace, False otherwise.\n */\n\n\nTextMetrics.isBreakingSpace = function isBreakingSpace(char) {\n  if (typeof char !== 'string') {\n    return false;\n  }\n\n  return TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0;\n};\n/**\n * Splits a string into words, breaking-spaces and newLine characters\n *\n * @private\n * @param  {string}  text   The text\n * @return {string[]}  A tokenized array\n */\n\n\nTextMetrics.tokenize = function tokenize(text) {\n  var tokens = [];\n  var token = '';\n\n  if (typeof text !== 'string') {\n    return tokens;\n  }\n\n  for (var i = 0; i < text.length; i++) {\n    var char = text[i];\n\n    if (TextMetrics.isBreakingSpace(char) || TextMetrics.isNewline(char)) {\n      if (token !== '') {\n        tokens.push(token);\n        token = '';\n      }\n\n      tokens.push(char);\n      continue;\n    }\n\n    token += char;\n  }\n\n  if (token !== '') {\n    tokens.push(token);\n  }\n\n  return tokens;\n};\n/**\n * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n *\n * It allows one to customise which words should break\n * Examples are if the token is CJK or numbers.\n * It must return a boolean.\n *\n * @param  {string}  token   The token\n * @param  {boolean}  breakWords  The style attr break words\n * @return {boolean} whether to break word or not\n */\n\n\nTextMetrics.canBreakWords = function canBreakWords(token, breakWords) {\n  return breakWords;\n};\n/**\n * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n *\n * It allows one to determine whether a pair of characters\n * should be broken by newlines\n * For example certain characters in CJK langs or numbers.\n * It must return a boolean.\n *\n * @param  {string}  char  The character\n * @param  {string}  nextChar  The next character\n * @param  {string}  token The token/word the characters are from\n * @param  {number}  index The index in the token of the char\n * @param  {boolean}  breakWords  The style attr break words\n * @return {boolean} whether to break word or not\n */\n\n\nTextMetrics.canBreakChars = function canBreakChars(char, nextChar, token, index, breakWords) // eslint-disable-line no-unused-vars\n{\n  return true;\n};\n/**\n * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n *\n * It is called when a token (usually a word) has to be split into separate pieces\n * in order to determine the point to break a word.\n * It must return an array of characters.\n *\n * @example\n * // Correctly splits emojis, eg \"🤪🤪\" will result in two element array, each with one emoji.\n * TextMetrics.wordWrapSplit = (token) => [...token];\n *\n * @param  {string}  token The token to split\n * @return {string[]} The characters of the token\n */\n\n\nTextMetrics.wordWrapSplit = function wordWrapSplit(token) {\n  return token.split('');\n};\n/**\n * Calculates the ascent, descent and fontSize of a given font-style\n *\n * @static\n * @param {string} font - String representing the style of the font\n * @return {PIXI.IFontMetrics} Font properties object\n */\n\n\nTextMetrics.measureFont = function measureFont(font) {\n  // as this method is used for preparing assets, don't recalculate things if we don't need to\n  if (TextMetrics._fonts[font]) {\n    return TextMetrics._fonts[font];\n  }\n\n  var properties = {};\n  var canvas = TextMetrics._canvas;\n  var context = TextMetrics._context;\n  context.font = font;\n  var metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n  var width = Math.ceil(context.measureText(metricsString).width);\n  var baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n  var height = 2 * baseline;\n  baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n  canvas.width = width;\n  canvas.height = height;\n  context.fillStyle = '#f00';\n  context.fillRect(0, 0, width, height);\n  context.font = font;\n  context.textBaseline = 'alphabetic';\n  context.fillStyle = '#000';\n  context.fillText(metricsString, 0, baseline);\n  var imagedata = context.getImageData(0, 0, width, height).data;\n  var pixels = imagedata.length;\n  var line = width * 4;\n  var i = 0;\n  var idx = 0;\n  var stop = false; // ascent. scan from top to bottom until we find a non red pixel\n\n  for (i = 0; i < baseline; ++i) {\n    for (var j = 0; j < line; j += 4) {\n      if (imagedata[idx + j] !== 255) {\n        stop = true;\n        break;\n      }\n    }\n\n    if (!stop) {\n      idx += line;\n    } else {\n      break;\n    }\n  }\n\n  properties.ascent = baseline - i;\n  idx = pixels - line;\n  stop = false; // descent. scan from bottom to top until we find a non red pixel\n\n  for (i = height; i > baseline; --i) {\n    for (var j$1 = 0; j$1 < line; j$1 += 4) {\n      if (imagedata[idx + j$1] !== 255) {\n        stop = true;\n        break;\n      }\n    }\n\n    if (!stop) {\n      idx -= line;\n    } else {\n      break;\n    }\n  }\n\n  properties.descent = i - baseline;\n  properties.fontSize = properties.ascent + properties.descent;\n  TextMetrics._fonts[font] = properties;\n  return properties;\n};\n/**\n * Clear font metrics in metrics cache.\n *\n * @static\n * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n */\n\n\nTextMetrics.clearMetrics = function clearMetrics(font) {\n  if (font === void 0) font = '';\n\n  if (font) {\n    delete TextMetrics._fonts[font];\n  } else {\n    TextMetrics._fonts = {};\n  }\n};\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n *\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\n\n\nvar canvas = function () {\n  try {\n    // OffscreenCanvas2D measureText can be up to 40% faster.\n    var c = new OffscreenCanvas(0, 0);\n    var context = c.getContext('2d');\n\n    if (context && context.measureText) {\n      return c;\n    }\n\n    return document.createElement('canvas');\n  } catch (ex) {\n    return document.createElement('canvas');\n  }\n}();\n\ncanvas.width = canvas.height = 10;\n/**\n * Cached canvas element for measuring text\n *\n * @memberof PIXI.TextMetrics\n * @type {HTMLCanvasElement}\n * @private\n */\n\nTextMetrics._canvas = canvas;\n/**\n * Cache for context to use.\n *\n * @memberof PIXI.TextMetrics\n * @type {CanvasRenderingContext2D}\n * @private\n */\n\nTextMetrics._context = canvas.getContext('2d');\n/**\n * Cache of {@see PIXI.TextMetrics.FontMetrics} objects.\n *\n * @memberof PIXI.TextMetrics\n * @type {Object}\n * @private\n */\n\nTextMetrics._fonts = {};\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |ÉqÅ\n */\n\nTextMetrics.METRICS_STRING = '|ÉqÅ';\n/**\n * Baseline symbol for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\n\nTextMetrics.BASELINE_SYMBOL = 'M';\n/**\n * Baseline multiplier for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\n\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n/**\n * Cache of new line chars.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\n\nTextMetrics._newlines = [0x000A, // line feed\n0x000D];\n/**\n * Cache of breaking spaces.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\n\nTextMetrics._breakingSpaces = [0x0009, // character tabulation\n0x0020, // space\n0x2000, // en quad\n0x2001, // em quad\n0x2002, // en space\n0x2003, // em space\n0x2004, // three-per-em space\n0x2005, // four-per-em space\n0x2006, // six-per-em space\n0x2008, // punctuation space\n0x2009, // thin space\n0x200A, // hair space\n0x205F, // medium mathematical space\n0x3000];\n/**\n * A number, or a string containing a number.\n *\n * @memberof PIXI\n * @typedef IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\n\n/* eslint max-depth: [2, 8] */\n\nvar defaultDestroyOptions = {\n  texture: true,\n  children: false,\n  baseTexture: true\n};\n/**\n * A Text Object will create a line or multiple lines of text.\n *\n * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n *\n * The primary advantage of this class over BitmapText is that you have great control over the style of the next,\n * which you can change at runtime.\n *\n * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n *\n * ```js\n * let text = new PIXI.Text('This is a PixiJS text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\n\nvar Text =\n/*@__PURE__*/\nfunction (Sprite) {\n  function Text(text, style, canvas) {\n    canvas = canvas || document.createElement('canvas');\n    canvas.width = 3;\n    canvas.height = 3;\n    var texture = Texture.from(canvas);\n    texture.orig = new Rectangle();\n    texture.trim = new Rectangle();\n    Sprite.call(this, texture);\n    /**\n     * The canvas element that everything is drawn to\n     *\n     * @member {HTMLCanvasElement}\n     */\n\n    this.canvas = canvas;\n    /**\n     * The canvas 2d context that everything is drawn with\n     * @member {CanvasRenderingContext2D}\n     */\n\n    this.context = this.canvas.getContext('2d');\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @member {number}\n     * @default 1\n     */\n\n    this._resolution = settings.RESOLUTION;\n    this._autoResolution = true;\n    /**\n     * Private tracker for the current text.\n     *\n     * @member {string}\n     * @private\n     */\n\n    this._text = null;\n    /**\n     * Private tracker for the current style.\n     *\n     * @member {object}\n     * @private\n     */\n\n    this._style = null;\n    /**\n     * Private listener to track style changes.\n     *\n     * @member {Function}\n     * @private\n     */\n\n    this._styleListener = null;\n    /**\n     * Private tracker for the current font.\n     *\n     * @member {string}\n     * @private\n     */\n\n    this._font = '';\n    this.text = text;\n    this.style = style;\n    this.localStyleID = -1;\n  }\n\n  if (Sprite) Text.__proto__ = Sprite;\n  Text.prototype = Object.create(Sprite && Sprite.prototype);\n  Text.prototype.constructor = Text;\n  var prototypeAccessors = {\n    width: {\n      configurable: true\n    },\n    height: {\n      configurable: true\n    },\n    style: {\n      configurable: true\n    },\n    text: {\n      configurable: true\n    },\n    resolution: {\n      configurable: true\n    }\n  };\n  /**\n   * Renders text and updates it when needed.\n   *\n   * @private\n   * @param {boolean} respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n   */\n\n  Text.prototype.updateText = function updateText(respectDirty) {\n    var style = this._style; // check if style has changed..\n\n    if (this.localStyleID !== style.styleID) {\n      this.dirty = true;\n      this.localStyleID = style.styleID;\n    }\n\n    if (!this.dirty && respectDirty) {\n      return;\n    }\n\n    this._font = this._style.toFontString();\n    var context = this.context;\n    var measured = TextMetrics.measureText(this._text || ' ', this._style, this._style.wordWrap, this.canvas);\n    var width = measured.width;\n    var height = measured.height;\n    var lines = measured.lines;\n    var lineHeight = measured.lineHeight;\n    var lineWidths = measured.lineWidths;\n    var maxLineWidth = measured.maxLineWidth;\n    var fontProperties = measured.fontProperties;\n    this.canvas.width = Math.ceil((Math.max(1, width) + style.padding * 2) * this._resolution);\n    this.canvas.height = Math.ceil((Math.max(1, height) + style.padding * 2) * this._resolution);\n    context.scale(this._resolution, this._resolution);\n    context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    context.font = this._font;\n    context.lineWidth = style.strokeThickness;\n    context.textBaseline = style.textBaseline;\n    context.lineJoin = style.lineJoin;\n    context.miterLimit = style.miterLimit;\n    var linePositionX;\n    var linePositionY; // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n\n    var passesCount = style.dropShadow ? 2 : 1; // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n    // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n    //\n    // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n    // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n    // and the stroke; and fill drop shadows would appear over the top of the stroke.\n    //\n    // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n    // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n    // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n    // beneath the text, whilst also having the proper text shadow styling.\n\n    for (var i = 0; i < passesCount; ++i) {\n      var isShadowPass = style.dropShadow && i === 0;\n      var dsOffsetText = isShadowPass ? height * 2 : 0; // we only want the drop shadow, so put text way off-screen\n\n      var dsOffsetShadow = dsOffsetText * this.resolution;\n\n      if (isShadowPass) {\n        // On Safari, text with gradient and drop shadows together do not position correctly\n        // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n        // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n        context.fillStyle = 'black';\n        context.strokeStyle = 'black';\n        var dropShadowColor = style.dropShadowColor;\n        var rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n        context.shadowColor = \"rgba(\" + rgb[0] * 255 + \",\" + rgb[1] * 255 + \",\" + rgb[2] * 255 + \",\" + style.dropShadowAlpha + \")\";\n        context.shadowBlur = style.dropShadowBlur;\n        context.shadowOffsetX = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;\n        context.shadowOffsetY = Math.sin(style.dropShadowAngle) * style.dropShadowDistance + dsOffsetShadow;\n      } else {\n        // set canvas text styles\n        context.fillStyle = this._generateFillStyle(style, lines);\n        context.strokeStyle = style.stroke;\n        context.shadowColor = 0;\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n      } // draw lines line by line\n\n\n      for (var i$1 = 0; i$1 < lines.length; i$1++) {\n        linePositionX = style.strokeThickness / 2;\n        linePositionY = style.strokeThickness / 2 + i$1 * lineHeight + fontProperties.ascent;\n\n        if (style.align === 'right') {\n          linePositionX += maxLineWidth - lineWidths[i$1];\n        } else if (style.align === 'center') {\n          linePositionX += (maxLineWidth - lineWidths[i$1]) / 2;\n        }\n\n        if (style.stroke && style.strokeThickness) {\n          this.drawLetterSpacing(lines[i$1], linePositionX + style.padding, linePositionY + style.padding - dsOffsetText, true);\n        }\n\n        if (style.fill) {\n          this.drawLetterSpacing(lines[i$1], linePositionX + style.padding, linePositionY + style.padding - dsOffsetText);\n        }\n      }\n    }\n\n    this.updateTexture();\n  };\n  /**\n   * Render the text with letter-spacing.\n   * @param {string} text - The text to draw\n   * @param {number} x - Horizontal position to draw the text\n   * @param {number} y - Vertical position to draw the text\n   * @param {boolean} [isStroke=false] - Is this drawing for the outside stroke of the\n   *  text? If not, it's for the inside fill\n   * @private\n   */\n\n\n  Text.prototype.drawLetterSpacing = function drawLetterSpacing(text, x, y, isStroke) {\n    if (isStroke === void 0) isStroke = false;\n    var style = this._style; // letterSpacing of 0 means normal\n\n    var letterSpacing = style.letterSpacing;\n\n    if (letterSpacing === 0) {\n      if (isStroke) {\n        this.context.strokeText(text, x, y);\n      } else {\n        this.context.fillText(text, x, y);\n      }\n\n      return;\n    }\n\n    var currentPosition = x; // Using Array.from correctly splits characters whilst keeping emoji together.\n    // This is not supported on IE as it requires ES6, so regular text splitting occurs.\n    // This also doesn't account for emoji that are multiple emoji put together to make something else.\n    // Handling all of this would require a big library itself.\n    // https://medium.com/@giltayar/iterating-over-emoji-characters-the-es6-way-f06e4589516\n    // https://github.com/orling/grapheme-splitter\n\n    var stringArray = Array.from ? Array.from(text) : text.split('');\n    var previousWidth = this.context.measureText(text).width;\n    var currentWidth = 0;\n\n    for (var i = 0; i < stringArray.length; ++i) {\n      var currentChar = stringArray[i];\n\n      if (isStroke) {\n        this.context.strokeText(currentChar, currentPosition, y);\n      } else {\n        this.context.fillText(currentChar, currentPosition, y);\n      }\n\n      currentWidth = this.context.measureText(text.substring(i + 1)).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  };\n  /**\n   * Updates texture size based on canvas size\n   *\n   * @private\n   */\n\n\n  Text.prototype.updateTexture = function updateTexture() {\n    var canvas = this.canvas;\n\n    if (this._style.trim) {\n      var trimmed = trimCanvas(canvas);\n\n      if (trimmed.data) {\n        canvas.width = trimmed.width;\n        canvas.height = trimmed.height;\n        this.context.putImageData(trimmed.data, 0, 0);\n      }\n    }\n\n    var texture = this._texture;\n    var style = this._style;\n    var padding = style.trim ? 0 : style.padding;\n    var baseTexture = texture.baseTexture;\n    texture.trim.width = texture._frame.width = Math.ceil(canvas.width / this._resolution);\n    texture.trim.height = texture._frame.height = Math.ceil(canvas.height / this._resolution);\n    texture.trim.x = -padding;\n    texture.trim.y = -padding;\n    texture.orig.width = texture._frame.width - padding * 2;\n    texture.orig.height = texture._frame.height - padding * 2; // call sprite onTextureUpdate to update scale if _width or _height were set\n\n    this._onTextureUpdate();\n\n    baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n    this.dirty = false;\n  };\n  /**\n   * Renders the object using the WebGL renderer\n   *\n   * @private\n   * @param {PIXI.Renderer} renderer - The renderer\n   */\n\n\n  Text.prototype._render = function _render(renderer) {\n    if (this._autoResolution && this._resolution !== renderer.resolution) {\n      this._resolution = renderer.resolution;\n      this.dirty = true;\n    }\n\n    this.updateText(true);\n\n    Sprite.prototype._render.call(this, renderer);\n  };\n  /**\n   * Gets the local bounds of the text object.\n   *\n   * @param {PIXI.Rectangle} rect - The output rectangle.\n   * @return {PIXI.Rectangle} The bounds.\n   */\n\n\n  Text.prototype.getLocalBounds = function getLocalBounds(rect) {\n    this.updateText(true);\n    return Sprite.prototype.getLocalBounds.call(this, rect);\n  };\n  /**\n   * calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account.\n   * @protected\n   */\n\n\n  Text.prototype._calculateBounds = function _calculateBounds() {\n    this.updateText(true);\n    this.calculateVertices(); // if we have already done this on THIS frame.\n\n    this._bounds.addQuad(this.vertexData);\n  };\n  /**\n   * Method to be called upon a TextStyle change.\n   * @private\n   */\n\n\n  Text.prototype._onStyleChange = function _onStyleChange() {\n    this.dirty = true;\n  };\n  /**\n   * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n   *\n   * @private\n   * @param {object} style - The style.\n   * @param {string[]} lines - The lines of text.\n   * @return {string|number|CanvasGradient} The fill style\n   */\n\n\n  Text.prototype._generateFillStyle = function _generateFillStyle(style, lines) {\n    if (!Array.isArray(style.fill)) {\n      return style.fill;\n    } else if (style.fill.length === 1) {\n      return style.fill[0];\n    } // the gradient will be evenly spaced out according to how large the array is.\n    // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n\n\n    var gradient;\n    var totalIterations;\n    var currentIteration;\n    var stop; // a dropshadow will enlarge the canvas and result in the gradient being\n    // generated with the incorrect dimensions\n\n    var dropShadowCorrection = style.dropShadow ? style.dropShadowDistance : 0;\n    var width = Math.ceil(this.canvas.width / this._resolution) - dropShadowCorrection;\n    var height = Math.ceil(this.canvas.height / this._resolution) - dropShadowCorrection; // make a copy of the style settings, so we can manipulate them later\n\n    var fill = style.fill.slice();\n    var fillGradientStops = style.fillGradientStops.slice(); // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n\n    if (!fillGradientStops.length) {\n      var lengthPlus1 = fill.length + 1;\n\n      for (var i = 1; i < lengthPlus1; ++i) {\n        fillGradientStops.push(i / lengthPlus1);\n      }\n    } // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n    // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n\n\n    fill.unshift(style.fill[0]);\n    fillGradientStops.unshift(0);\n    fill.push(style.fill[style.fill.length - 1]);\n    fillGradientStops.push(1);\n\n    if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL) {\n      // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n      gradient = this.context.createLinearGradient(width / 2, 0, width / 2, height); // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n      // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n      totalIterations = (fill.length + 1) * lines.length;\n      currentIteration = 0;\n\n      for (var i$1 = 0; i$1 < lines.length; i$1++) {\n        currentIteration += 1;\n\n        for (var j = 0; j < fill.length; j++) {\n          if (typeof fillGradientStops[j] === 'number') {\n            stop = fillGradientStops[j] / lines.length + i$1 / lines.length;\n          } else {\n            stop = currentIteration / totalIterations;\n          }\n\n          gradient.addColorStop(stop, fill[j]);\n          currentIteration++;\n        }\n      }\n    } else {\n      // start the gradient at the center left of the canvas, and end at the center right of the canvas\n      gradient = this.context.createLinearGradient(0, height / 2, width, height / 2); // can just evenly space out the gradients in this case, as multiple lines makes no difference\n      // to an even left to right gradient\n\n      totalIterations = fill.length + 1;\n      currentIteration = 1;\n\n      for (var i$2 = 0; i$2 < fill.length; i$2++) {\n        if (typeof fillGradientStops[i$2] === 'number') {\n          stop = fillGradientStops[i$2];\n        } else {\n          stop = currentIteration / totalIterations;\n        }\n\n        gradient.addColorStop(stop, fill[i$2]);\n        currentIteration++;\n      }\n    }\n\n    return gradient;\n  };\n  /**\n   * Destroys this text object.\n   * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n   * the majority of the time the texture will not be shared with any other Sprites.\n   *\n   * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their\n   *  destroy method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n   * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n   */\n\n\n  Text.prototype.destroy = function destroy(options) {\n    if (typeof options === 'boolean') {\n      options = {\n        children: options\n      };\n    }\n\n    options = Object.assign({}, defaultDestroyOptions, options);\n    Sprite.prototype.destroy.call(this, options); // make sure to reset the the context and canvas.. dont want this hanging around in memory!\n\n    this.context = null;\n    this.canvas = null;\n    this._style = null;\n  };\n  /**\n   * The width of the Text, setting this will actually modify the scale to achieve the value set\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.width.get = function () {\n    this.updateText(true);\n    return Math.abs(this.scale.x) * this._texture.orig.width;\n  };\n\n  prototypeAccessors.width.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this.updateText(true);\n    var s = sign(this.scale.x) || 1;\n    this.scale.x = s * value / this._texture.orig.width;\n    this._width = value;\n  };\n  /**\n   * The height of the Text, setting this will actually modify the scale to achieve the value set\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.height.get = function () {\n    this.updateText(true);\n    return Math.abs(this.scale.y) * this._texture.orig.height;\n  };\n\n  prototypeAccessors.height.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this.updateText(true);\n    var s = sign(this.scale.y) || 1;\n    this.scale.y = s * value / this._texture.orig.height;\n    this._height = value;\n  };\n  /**\n   * Set the style of the text. Set up an event listener to listen for changes on the style\n   * object and mark the text as dirty.\n   *\n   * @member {object|PIXI.TextStyle}\n   */\n\n\n  prototypeAccessors.style.get = function () {\n    return this._style;\n  };\n\n  prototypeAccessors.style.set = function (style) // eslint-disable-line require-jsdoc\n  {\n    style = style || {};\n\n    if (style instanceof TextStyle) {\n      this._style = style;\n    } else {\n      this._style = new TextStyle(style);\n    }\n\n    this.localStyleID = -1;\n    this.dirty = true;\n  };\n  /**\n   * Set the copy for the text object. To split a line you can use '\\n'.\n   *\n   * @member {string}\n   */\n\n\n  prototypeAccessors.text.get = function () {\n    return this._text;\n  };\n\n  prototypeAccessors.text.set = function (text) // eslint-disable-line require-jsdoc\n  {\n    text = String(text === null || text === undefined ? '' : text);\n\n    if (this._text === text) {\n      return;\n    }\n\n    this._text = text;\n    this.dirty = true;\n  };\n  /**\n   * The resolution / device pixel ratio of the canvas.\n   * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n   * @member {number}\n   * @default 1\n   */\n\n\n  prototypeAccessors.resolution.get = function () {\n    return this._resolution;\n  };\n\n  prototypeAccessors.resolution.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this._autoResolution = false;\n\n    if (this._resolution === value) {\n      return;\n    }\n\n    this._resolution = value;\n    this.dirty = true;\n  };\n\n  Object.defineProperties(Text.prototype, prototypeAccessors);\n  return Text;\n}(Sprite);\n\nexport { TEXT_GRADIENT, Text, TextMetrics, TextStyle };","map":{"version":3,"sources":["../src/const.js","../src/TextStyle.js","../src/TextMetrics.js","../src/Text.js"],"names":["const","let","j","super","i"],"mappings":"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","sourcesContent":["/**\n * Constants that define the type of gradient on text.\n *\n * @static\n * @constant\n * @name TEXT_GRADIENT\n * @memberof PIXI\n * @type {object}\n * @property {number} LINEAR_VERTICAL Vertical gradient\n * @property {number} LINEAR_HORIZONTAL Linear gradient\n */\nexport const TEXT_GRADIENT = {\n    LINEAR_VERTICAL: 0,\n    LINEAR_HORIZONTAL: 1,\n};\n","// disabling eslint for now, going to rewrite this in v5\n/* eslint-disable */\n\nimport { TEXT_GRADIENT } from './const';\nimport { hex2string } from '@pixi/utils';\n\nconst defaultStyle = {\n    align: 'left',\n    breakWords: false,\n    dropShadow: false,\n    dropShadowAlpha: 1,\n    dropShadowAngle: Math.PI / 6,\n    dropShadowBlur: 0,\n    dropShadowColor: 'black',\n    dropShadowDistance: 5,\n    fill: 'black',\n    fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n    fillGradientStops: [],\n    fontFamily: 'Arial',\n    fontSize: 26,\n    fontStyle: 'normal',\n    fontVariant: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 0,\n    lineJoin: 'miter',\n    miterLimit: 10,\n    padding: 0,\n    stroke: 'black',\n    strokeThickness: 0,\n    textBaseline: 'alphabetic',\n    trim: false,\n    whiteSpace: 'pre',\n    wordWrap: false,\n    wordWrapWidth: 100,\n    leading: 0,\n};\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n]\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n *\n * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).\n *\n * @class\n * @memberof PIXI\n */\nexport class TextStyle\n{\n    /**\n     * @param {object} [style] - The style parameters\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n     *  does not affect single line text\n     * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it\n     *  needs wordWrap to be set to true\n     * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text\n     * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow\n     * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow\n     * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius\n     * @param {string|number} [style.dropShadowColor='black'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow\n     * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas\n     *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient\n     *  eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours\n     *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n     * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set\n     * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     * @param {string|string[]} [style.fontFamily='Arial'] - The font family\n     * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,\n     *  equivalents are '26px','20pt','160%' or '1.6em')\n     * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')\n     * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')\n     * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',\n     *  '200', '300', '400', '500', '600', '700', 800' or '900')\n     * @param {number} [style.leading=0] - The space between lines\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0\n     * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses\n     * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve\n     *      spiked text issues. Possible values \"miter\" (creates a sharp corner), \"round\" (creates a round corner) or \"bevel\"\n     *      (creates a squared corner).\n     * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n     *      or increase the spikiness of rendered text.\n     * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from\n     *     happening by adding padding to all sides of the text.\n     * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke\n     *  e.g 'blue', '#FCFF00'\n     * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.\n     *  Default is 0 (no stroke)\n     * @param {boolean} [style.trim=false] - Trim transparent borders\n     * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.\n     * @param {string} [style.whiteSpace='pre'] - Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     *      (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve, collapse). It needs wordWrap to be set to true\n     * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used\n     * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true\n     */\n    constructor(style)\n    {\n        this.styleID = 0;\n\n        this.reset();\n\n        deepCopyProperties(this, style, style);\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * Note that the only the properties of the object are cloned.\n     *\n     * @return {PIXI.TextStyle} New cloned TextStyle object\n     */\n    clone()\n    {\n        const clonedProperties = {};\n\n        deepCopyProperties(clonedProperties, this, defaultStyle);\n\n        return new TextStyle(clonedProperties);\n    }\n\n    /**\n     * Resets all properties to the defaults specified in TextStyle.prototype._default\n     */\n    reset()\n    {\n        deepCopyProperties(this, defaultStyle, defaultStyle);\n    }\n\n    /**\n     * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n     *\n     * @member {string}\n     */\n    get align()\n    {\n        return this._align;\n    }\n    set align(align) // eslint-disable-line require-jsdoc\n    {\n        if (this._align !== align)\n        {\n            this._align = align;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Indicates if lines can be wrapped within words, it needs wordWrap to be set to true\n     *\n     * @member {boolean}\n     */\n    get breakWords()\n    {\n        return this._breakWords;\n    }\n    set breakWords(breakWords) // eslint-disable-line require-jsdoc\n    {\n        if (this._breakWords !== breakWords)\n        {\n            this._breakWords = breakWords;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a drop shadow for the text\n     *\n     * @member {boolean}\n     */\n    get dropShadow()\n    {\n        return this._dropShadow;\n    }\n    set dropShadow(dropShadow) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadow !== dropShadow)\n        {\n            this._dropShadow = dropShadow;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set alpha for the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAlpha()\n    {\n        return this._dropShadowAlpha;\n    }\n    set dropShadowAlpha(dropShadowAlpha) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowAlpha !== dropShadowAlpha)\n        {\n            this._dropShadowAlpha = dropShadowAlpha;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a angle of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowAngle()\n    {\n        return this._dropShadowAngle;\n    }\n    set dropShadowAngle(dropShadowAngle) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowAngle !== dropShadowAngle)\n        {\n            this._dropShadowAngle = dropShadowAngle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a shadow blur radius\n     *\n     * @member {number}\n     */\n    get dropShadowBlur()\n    {\n        return this._dropShadowBlur;\n    }\n    set dropShadowBlur(dropShadowBlur) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowBlur !== dropShadowBlur)\n        {\n            this._dropShadowBlur = dropShadowBlur;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     *\n     * @member {string|number}\n     */\n    get dropShadowColor()\n    {\n        return this._dropShadowColor;\n    }\n    set dropShadowColor(dropShadowColor) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(dropShadowColor);\n        if (this._dropShadowColor !== outputColor)\n        {\n            this._dropShadowColor = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Set a distance of the drop shadow\n     *\n     * @member {number}\n     */\n    get dropShadowDistance()\n    {\n        return this._dropShadowDistance;\n    }\n    set dropShadowDistance(dropShadowDistance) // eslint-disable-line require-jsdoc\n    {\n        if (this._dropShadowDistance !== dropShadowDistance)\n        {\n            this._dropShadowDistance = dropShadowDistance;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n     * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    get fill()\n    {\n        return this._fill;\n    }\n    set fill(fill) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(fill);\n        if (this._fill !== outputColor)\n        {\n            this._fill = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n     * See {@link PIXI.TEXT_GRADIENT}\n     *\n     * @member {number}\n     */\n    get fillGradientType()\n    {\n        return this._fillGradientType;\n    }\n    set fillGradientType(fillGradientType) // eslint-disable-line require-jsdoc\n    {\n        if (this._fillGradientType !== fillGradientType)\n        {\n            this._fillGradientType = fillGradientType;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this array can set the stop points\n     * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     *\n     * @member {number[]}\n     */\n    get fillGradientStops()\n    {\n        return this._fillGradientStops;\n    }\n    set fillGradientStops(fillGradientStops) // eslint-disable-line require-jsdoc\n    {\n        if (!areArraysEqual(this._fillGradientStops,fillGradientStops))\n        {\n            this._fillGradientStops = fillGradientStops;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font family\n     *\n     * @member {string|string[]}\n     */\n    get fontFamily()\n    {\n        return this._fontFamily;\n    }\n    set fontFamily(fontFamily) // eslint-disable-line require-jsdoc\n    {\n        if (this.fontFamily !== fontFamily)\n        {\n            this._fontFamily = fontFamily;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font size\n     * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n     *\n     * @member {number|string}\n     */\n    get fontSize()\n    {\n        return this._fontSize;\n    }\n    set fontSize(fontSize) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontSize !== fontSize)\n        {\n            this._fontSize = fontSize;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font style\n     * ('normal', 'italic' or 'oblique')\n     *\n     * @member {string}\n     */\n    get fontStyle()\n    {\n        return this._fontStyle;\n    }\n    set fontStyle(fontStyle) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontStyle !== fontStyle)\n        {\n            this._fontStyle = fontStyle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font variant\n     * ('normal' or 'small-caps')\n     *\n     * @member {string}\n     */\n    get fontVariant()\n    {\n        return this._fontVariant;\n    }\n    set fontVariant(fontVariant) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontVariant !== fontVariant)\n        {\n            this._fontVariant = fontVariant;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font weight\n     * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n     *\n     * @member {string}\n     */\n    get fontWeight()\n    {\n        return this._fontWeight;\n    }\n    set fontWeight(fontWeight) // eslint-disable-line require-jsdoc\n    {\n        if (this._fontWeight !== fontWeight)\n        {\n            this._fontWeight = fontWeight;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The amount of spacing between letters, default is 0\n     *\n     * @member {number}\n     */\n    get letterSpacing()\n    {\n        return this._letterSpacing;\n    }\n    set letterSpacing(letterSpacing) // eslint-disable-line require-jsdoc\n    {\n        if (this._letterSpacing !== letterSpacing)\n        {\n            this._letterSpacing = letterSpacing;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The line height, a number that represents the vertical space that a letter uses\n     *\n     * @member {number}\n     */\n    get lineHeight()\n    {\n        return this._lineHeight;\n    }\n    set lineHeight(lineHeight) // eslint-disable-line require-jsdoc\n    {\n        if (this._lineHeight !== lineHeight)\n        {\n            this._lineHeight = lineHeight;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The space between lines\n     *\n     * @member {number}\n     */\n    get leading()\n    {\n        return this._leading;\n    }\n    set leading(leading) // eslint-disable-line require-jsdoc\n    {\n        if (this._leading !== leading)\n        {\n            this._leading = leading;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {string}\n     */\n    get lineJoin()\n    {\n        return this._lineJoin;\n    }\n    set lineJoin(lineJoin) // eslint-disable-line require-jsdoc\n    {\n        if (this._lineJoin !== lineJoin)\n        {\n            this._lineJoin = lineJoin;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode\n     * This can reduce or increase the spikiness of rendered text.\n     *\n     * @member {number}\n     */\n    get miterLimit()\n    {\n        return this._miterLimit;\n    }\n    set miterLimit(miterLimit) // eslint-disable-line require-jsdoc\n    {\n        if (this._miterLimit !== miterLimit)\n        {\n            this._miterLimit = miterLimit;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     *\n     * @member {number}\n     */\n    get padding()\n    {\n        return this._padding;\n    }\n    set padding(padding) // eslint-disable-line require-jsdoc\n    {\n        if (this._padding !== padding)\n        {\n            this._padding = padding;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text stroke\n     * e.g 'blue', '#FCFF00'\n     *\n     * @member {string|number}\n     */\n    get stroke()\n    {\n        return this._stroke;\n    }\n    set stroke(stroke) // eslint-disable-line require-jsdoc\n    {\n        const outputColor = getColor(stroke);\n        if (this._stroke !== outputColor)\n        {\n            this._stroke = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A number that represents the thickness of the stroke.\n     * Default is 0 (no stroke)\n     *\n     * @member {number}\n     */\n    get strokeThickness()\n    {\n        return this._strokeThickness;\n    }\n    set strokeThickness(strokeThickness) // eslint-disable-line require-jsdoc\n    {\n        if (this._strokeThickness !== strokeThickness)\n        {\n            this._strokeThickness = strokeThickness;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {string}\n     */\n    get textBaseline()\n    {\n        return this._textBaseline;\n    }\n    set textBaseline(textBaseline) // eslint-disable-line require-jsdoc\n    {\n        if (this._textBaseline !== textBaseline)\n        {\n            this._textBaseline = textBaseline;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Trim transparent borders\n     *\n     * @member {boolean}\n     */\n    get trim()\n    {\n        return this._trim;\n    }\n    set trim(trim) // eslint-disable-line require-jsdoc\n    {\n        if (this._trim !== trim)\n        {\n            this._trim = trim;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     *\n     * @member {string}\n     */\n    get whiteSpace()\n    {\n        return this._whiteSpace;\n    }\n    set whiteSpace(whiteSpace) // eslint-disable-line require-jsdoc\n    {\n        if (this._whiteSpace !== whiteSpace)\n        {\n            this._whiteSpace = whiteSpace;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Indicates if word wrap should be used\n     *\n     * @member {boolean}\n     */\n    get wordWrap()\n    {\n        return this._wordWrap;\n    }\n    set wordWrap(wordWrap) // eslint-disable-line require-jsdoc\n    {\n        if (this._wordWrap !== wordWrap)\n        {\n            this._wordWrap = wordWrap;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The width at which text will wrap, it needs wordWrap to be set to true\n     *\n     * @member {number}\n     */\n    get wordWrapWidth()\n    {\n        return this._wordWrapWidth;\n    }\n    set wordWrapWidth(wordWrapWidth) // eslint-disable-line require-jsdoc\n    {\n        if (this._wordWrapWidth !== wordWrapWidth)\n        {\n            this._wordWrapWidth = wordWrapWidth;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Generates a font style string to use for `TextMetrics.measureFont()`.\n     *\n     * @return {string} Font style string, for passing to `TextMetrics.measureFont()`\n     */\n    toFontString()\n    {\n        // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n        const fontSizeString = (typeof this.fontSize === 'number') ? `${this.fontSize}px` : this.fontSize;\n\n        // Clean-up fontFamily property by quoting each font name\n        // this will support font names with spaces\n        let fontFamilies = this.fontFamily;\n\n        if (!Array.isArray(this.fontFamily))\n        {\n            fontFamilies = this.fontFamily.split(',');\n        }\n\n        for (let i = fontFamilies.length - 1; i >= 0; i--)\n        {\n            // Trim any extra white-space\n            let fontFamily = fontFamilies[i].trim();\n\n            // Check if font already contains strings\n            if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && genericFontFamilies.indexOf(fontFamily) < 0)\n            {\n                fontFamily = `\"${fontFamily}\"`;\n            }\n            fontFamilies[i] = fontFamily;\n        }\n\n        return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${fontFamilies.join(',')}`;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * @private\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\nfunction getSingleColor(color)\n{\n    if (typeof color === 'number')\n    {\n        return hex2string(color);\n    }\n    else if ( typeof color === 'string' )\n    {\n        if ( color.indexOf('0x') === 0 )\n        {\n            color = color.replace('0x', '#');\n        }\n    }\n\n    return color;\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {number|number[]} color\n * @return {string} The color as a string.\n */\nfunction getColor(color)\n{\n    if (!Array.isArray(color))\n    {\n        return getSingleColor(color);\n    }\n    else\n    {\n        for (let i = 0; i < color.length; ++i)\n        {\n            color[i] = getSingleColor(color[i]);\n        }\n\n        return color;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param {Array} array1 First array to compare\n * @param {Array} array2 Second array to compare\n * @return {boolean} Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual(array1, array2)\n{\n    if (!Array.isArray(array1) || !Array.isArray(array2))\n    {\n        return false;\n    }\n\n    if (array1.length !== array2.length)\n    {\n        return false;\n    }\n\n    for (let i = 0; i < array1.length; ++i)\n    {\n        if (array1[i] !== array2[i])\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param {Object} target Target object to copy properties into\n * @param {Object} source Source object for the properties to copy\n * @param {string} propertyObj Object containing properties names we want to loop over\n */\nfunction deepCopyProperties(target, source, propertyObj) {\n    for (const prop in propertyObj) {\n        if (Array.isArray(source[prop])) {\n            target[prop] = source[prop].slice();\n        } else {\n            target[prop] = source[prop];\n        }\n    }\n}\n","/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n *\n * @class\n * @memberof PIXI\n */\nexport class TextMetrics\n{\n    /**\n     * @param {string} text - the text that was measured\n     * @param {PIXI.TextStyle} style - the style that was measured\n     * @param {number} width - the measured width of the text\n     * @param {number} height - the measured height of the text\n     * @param {string[]} lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param {number[]} lineWidths - an array of the line widths for each line matched to `lines`\n     * @param {number} lineHeight - the measured line height for this style\n     * @param {number} maxLineWidth - the maximum line width for all measured lines\n     * @param {Object} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties)\n    {\n        /**\n         * The text that was measured\n         *\n         * @member {string}\n         */\n        this.text = text;\n\n        /**\n         * The style that was measured\n         *\n         * @member {PIXI.TextStyle}\n         */\n        this.style = style;\n\n        /**\n         * The measured width of the text\n         *\n         * @member {number}\n         */\n        this.width = width;\n\n        /**\n         * The measured height of the text\n         *\n         * @member {number}\n         */\n        this.height = height;\n\n        /**\n         * An array of lines of the text broken by new lines and wrapping is specified in style\n         *\n         * @member {string[]}\n         */\n        this.lines = lines;\n\n        /**\n         * An array of the line widths for each line matched to `lines`\n         *\n         * @member {number[]}\n         */\n        this.lineWidths = lineWidths;\n\n        /**\n         * The measured line height for this style\n         *\n         * @member {number}\n         */\n        this.lineHeight = lineHeight;\n\n        /**\n         * The maximum line width for all measured lines\n         *\n         * @member {number}\n         */\n        this.maxLineWidth = maxLineWidth;\n\n        /**\n         * The font properties object from TextMetrics.measureFont\n         *\n         * @member {PIXI.IFontMetrics}\n         */\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     *\n     * @param {string} text - the text to measure.\n     * @param {PIXI.TextStyle} style - the text style to use for measuring\n     * @param {boolean} [wordWrap] - optional override for if word-wrap should be applied to the text.\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {PIXI.TextMetrics} measured width and height of the text.\n     */\n    static measureText(text, style, wordWrap, canvas = TextMetrics._canvas)\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        // (toDataURI, getImageData functions)\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize;\n            fontProperties.ascent = style.fontSize;\n        }\n\n        const context = canvas.getContext('2d');\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = context.measureText(lines[i]).width + ((lines[i].length - 1) * style.letterSpacing);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness)\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     *\n     * @private\n     * @param {string} text - String to apply word wrapping to\n     * @param {PIXI.TextStyle} style - the style to use when wrapping\n     * @param {HTMLCanvasElement} [canvas] - optional specification of the canvas to use for measuring.\n     * @return {string} New string with new lines applied where required\n     */\n    static wordWrap(text, style, canvas = TextMetrics._canvas)\n    {\n        const context = canvas.getContext('2d');\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache = {};\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = TextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n\n                        let k = 1;\n                        // we are not at the end of the token\n\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n                            const lastChar = char[char.length - 1];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            k++;\n                        }\n\n                        j += char.length - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap\n     * method\n     *\n     * @private\n     * @param  {string}   line        - The line of text to add\n     * @param  {boolean}  newLine     - Add new line character to end\n     * @return {string}   A formatted line\n     */\n    static addLine(line, newLine = true)\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     *\n     * @private\n     * @param  {string}                    key            The key\n     * @param  {number}                    letterSpacing  The letter spacing\n     * @param  {object}                    cache          The cache\n     * @param  {CanvasRenderingContext2D}  context        The canvas context\n     * @return {number}                    The from cache.\n     */\n    static getFromCache(key, letterSpacing, cache, context)\n    {\n        let width = cache[key];\n\n        if (width === undefined)\n        {\n            const spacing = ((key.length) * letterSpacing);\n\n            width = context.measureText(key).width + spacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces\n     *\n     * @private\n     * @param  {string}   whiteSpace  The TextStyle property whiteSpace\n     * @return {boolean}  should collapse\n     */\n    static collapseSpaces(whiteSpace)\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars\n     *\n     * @private\n     * @param  {string}   whiteSpace  The white space\n     * @return {boolean}  should collapse\n     */\n    static collapseNewlines(whiteSpace)\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * trims breaking whitespaces from string\n     *\n     * @private\n     * @param  {string}  text  The text\n     * @return {string}  trimmed string\n     */\n    static trimRight(text)\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     *\n     * @private\n     * @param  {string}  char  The character\n     * @return {boolean}  True if newline, False otherwise.\n     */\n    static isNewline(char)\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * @private\n     * @param  {string}  char  The character\n     * @return {boolean}  True if whitespace, False otherwise.\n     */\n    static isBreakingSpace(char)\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     *\n     * @private\n     * @param  {string}  text       The text\n     * @return {string[]}  A tokenized array\n     */\n    static tokenize(text)\n    {\n        const tokens = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n\n            if (TextMetrics.isBreakingSpace(char) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     *\n     * @param  {string}  token       The token\n     * @param  {boolean}  breakWords  The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakWords(token, breakWords)\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     *\n     * @param  {string}  char      The character\n     * @param  {string}  nextChar  The next character\n     * @param  {string}  token     The token/word the characters are from\n     * @param  {number}  index     The index in the token of the char\n     * @param  {boolean}  breakWords  The style attr break words\n     * @return {boolean} whether to break word or not\n     */\n    static canBreakChars(char, nextChar, token, index, breakWords) // eslint-disable-line no-unused-vars\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     *\n     * @example\n     * // Correctly splits emojis, eg \"🤪🤪\" will result in two element array, each with one emoji.\n     * TextMetrics.wordWrapSplit = (token) => [...token];\n     *\n     * @param  {string}  token The token to split\n     * @return {string[]} The characters of the token\n     */\n    static wordWrapSplit(token)\n    {\n        return token.split('');\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     *\n     * @static\n     * @param {string} font - String representing the style of the font\n     * @return {PIXI.IFontMetrics} Font properties object\n     */\n    static measureFont(font)\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties = {};\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = 2 * baseline;\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     *\n     * @static\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    static clearMetrics(font = '')\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n *\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\n\nconst canvas = (() =>\n{\n    try\n    {\n        // OffscreenCanvas2D measureText can be up to 40% faster.\n        const c = new OffscreenCanvas(0, 0);\n        const context = c.getContext('2d');\n\n        if (context && context.measureText)\n        {\n            return c;\n        }\n\n        return document.createElement('canvas');\n    }\n    catch (ex)\n    {\n        return document.createElement('canvas');\n    }\n})();\n\ncanvas.width = canvas.height = 10;\n\n/**\n * Cached canvas element for measuring text\n *\n * @memberof PIXI.TextMetrics\n * @type {HTMLCanvasElement}\n * @private\n */\nTextMetrics._canvas = canvas;\n\n/**\n * Cache for context to use.\n *\n * @memberof PIXI.TextMetrics\n * @type {CanvasRenderingContext2D}\n * @private\n */\nTextMetrics._context = canvas.getContext('2d');\n\n/**\n * Cache of {@see PIXI.TextMetrics.FontMetrics} objects.\n *\n * @memberof PIXI.TextMetrics\n * @type {Object}\n * @private\n */\nTextMetrics._fonts = {};\n\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |ÉqÅ\n */\nTextMetrics.METRICS_STRING = '|ÉqÅ';\n\n/**\n * Baseline symbol for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\nTextMetrics.BASELINE_SYMBOL = 'M';\n\n/**\n * Baseline multiplier for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n\n/**\n * Cache of new line chars.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._newlines = [\n    0x000A, // line feed\n    0x000D, // carriage return\n];\n\n/**\n * Cache of breaking spaces.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._breakingSpaces = [\n    0x0009, // character tabulation\n    0x0020, // space\n    0x2000, // en quad\n    0x2001, // em quad\n    0x2002, // en space\n    0x2003, // em space\n    0x2004, // three-per-em space\n    0x2005, // four-per-em space\n    0x2006, // six-per-em space\n    0x2008, // punctuation space\n    0x2009, // thin space\n    0x200A, // hair space\n    0x205F, // medium mathematical space\n    0x3000, // ideographic space\n];\n\n/**\n * A number, or a string containing a number.\n *\n * @memberof PIXI\n * @typedef IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\n\n","/* eslint max-depth: [2, 8] */\nimport { Sprite } from '@pixi/sprite';\nimport { Texture } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { Rectangle } from '@pixi/math';\nimport { sign, trimCanvas, hex2rgb, string2hex } from '@pixi/utils';\nimport { TEXT_GRADIENT } from './const';\nimport { TextStyle } from './TextStyle';\nimport { TextMetrics } from './TextMetrics';\n\nconst defaultDestroyOptions = {\n    texture: true,\n    children: false,\n    baseTexture: true,\n};\n\n/**\n * A Text Object will create a line or multiple lines of text.\n *\n * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n *\n * The primary advantage of this class over BitmapText is that you have great control over the style of the next,\n * which you can change at runtime.\n *\n * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n *\n * ```js\n * let text = new PIXI.Text('This is a PixiJS text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});\n * ```\n *\n * @class\n * @extends PIXI.Sprite\n * @memberof PIXI\n */\nexport class Text extends Sprite\n{\n    /**\n     * @param {string} text - The string that you would like the text to display\n     * @param {object|PIXI.TextStyle} [style] - The style parameters\n     * @param {HTMLCanvasElement} [canvas] - The canvas element for drawing text\n     */\n    constructor(text, style, canvas)\n    {\n        canvas = canvas || document.createElement('canvas');\n\n        canvas.width = 3;\n        canvas.height = 3;\n\n        const texture = Texture.from(canvas);\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        /**\n         * The canvas element that everything is drawn to\n         *\n         * @member {HTMLCanvasElement}\n         */\n        this.canvas = canvas;\n\n        /**\n         * The canvas 2d context that everything is drawn with\n         * @member {CanvasRenderingContext2D}\n         */\n        this.context = this.canvas.getContext('2d');\n\n        /**\n         * The resolution / device pixel ratio of the canvas.\n         * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n         * @member {number}\n         * @default 1\n         */\n        this._resolution = settings.RESOLUTION;\n        this._autoResolution = true;\n\n        /**\n         * Private tracker for the current text.\n         *\n         * @member {string}\n         * @private\n         */\n        this._text = null;\n\n        /**\n         * Private tracker for the current style.\n         *\n         * @member {object}\n         * @private\n         */\n        this._style = null;\n        /**\n         * Private listener to track style changes.\n         *\n         * @member {Function}\n         * @private\n         */\n        this._styleListener = null;\n\n        /**\n         * Private tracker for the current font.\n         *\n         * @member {string}\n         * @private\n         */\n        this._font = '';\n\n        this.text = text;\n        this.style = style;\n\n        this.localStyleID = -1;\n    }\n\n    /**\n     * Renders text and updates it when needed.\n     *\n     * @private\n     * @param {boolean} respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n     */\n    updateText(respectDirty)\n    {\n        const style = this._style;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        this._font = this._style.toFontString();\n\n        const context = this.context;\n        const measured = TextMetrics.measureText(this._text || ' ', this._style, this._style.wordWrap, this.canvas);\n        const width = measured.width;\n        const height = measured.height;\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        this.canvas.width = Math.ceil((Math.max(1, width) + (style.padding * 2)) * this._resolution);\n        this.canvas.height = Math.ceil((Math.max(1, height) + (style.padding * 2)) * this._resolution);\n\n        context.scale(this._resolution, this._resolution);\n\n        context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        context.font = this._font;\n        context.lineWidth = style.strokeThickness;\n        context.textBaseline = style.textBaseline;\n        context.lineJoin = style.lineJoin;\n        context.miterLimit = style.miterLimit;\n\n        let linePositionX;\n        let linePositionY;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            const dsOffsetText = isShadowPass ? height * 2 : 0; // we only want the drop shadow, so put text way off-screen\n            const dsOffsetShadow = dsOffsetText * this.resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const dropShadowColor = style.dropShadowColor;\n                const rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n\n                context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n                context.shadowBlur = style.dropShadowBlur;\n                context.shadowOffsetX = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(style.dropShadowAngle) * style.dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                // set canvas text styles\n                context.fillStyle = this._generateFillStyle(style, lines);\n                context.strokeStyle = style.stroke;\n\n                context.shadowColor = 0;\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = style.strokeThickness / 2;\n                linePositionY = ((style.strokeThickness / 2) + (i * lineHeight)) + fontProperties.ascent;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style.stroke && style.strokeThickness)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style.fill)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n\n        this.updateTexture();\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param {string} text - The text to draw\n     * @param {number} x - Horizontal position to draw the text\n     * @param {number} y - Vertical position to draw the text\n     * @param {boolean} [isStroke=false] - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     * @private\n     */\n    drawLetterSpacing(text, x, y, isStroke = false)\n    {\n        const style = this._style;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        if (letterSpacing === 0)\n        {\n            if (isStroke)\n            {\n                this.context.strokeText(text, x, y);\n            }\n            else\n            {\n                this.context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        // Using Array.from correctly splits characters whilst keeping emoji together.\n        // This is not supported on IE as it requires ES6, so regular text splitting occurs.\n        // This also doesn't account for emoji that are multiple emoji put together to make something else.\n        // Handling all of this would require a big library itself.\n        // https://medium.com/@giltayar/iterating-over-emoji-characters-the-es6-way-f06e4589516\n        // https://github.com/orling/grapheme-splitter\n        const stringArray = Array.from ? Array.from(text) : text.split('');\n        let previousWidth = this.context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                this.context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                this.context.fillText(currentChar, currentPosition, y);\n            }\n            currentWidth = this.context.measureText(text.substring(i + 1)).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    /**\n     * Updates texture size based on canvas size\n     *\n     * @private\n     */\n    updateTexture()\n    {\n        const canvas = this.canvas;\n\n        if (this._style.trim)\n        {\n            const trimmed = trimCanvas(canvas);\n\n            if (trimmed.data)\n            {\n                canvas.width = trimmed.width;\n                canvas.height = trimmed.height;\n                this.context.putImageData(trimmed.data, 0, 0);\n            }\n        }\n\n        const texture = this._texture;\n        const style = this._style;\n        const padding = style.trim ? 0 : style.padding;\n        const baseTexture = texture.baseTexture;\n\n        texture.trim.width = texture._frame.width = Math.ceil(canvas.width / this._resolution);\n        texture.trim.height = texture._frame.height = Math.ceil(canvas.height / this._resolution);\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @private\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    _render(renderer)\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /**\n     * Gets the local bounds of the text object.\n     *\n     * @param {PIXI.Rectangle} rect - The output rectangle.\n     * @return {PIXI.Rectangle} The bounds.\n     */\n    getLocalBounds(rect)\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account.\n     * @protected\n     */\n    _calculateBounds()\n    {\n        this.updateText(true);\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        this._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Method to be called upon a TextStyle change.\n     * @private\n     */\n    _onStyleChange()\n    {\n        this.dirty = true;\n    }\n\n    /**\n     * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n     *\n     * @private\n     * @param {object} style - The style.\n     * @param {string[]} lines - The lines of text.\n     * @return {string|number|CanvasGradient} The fill style\n     */\n    _generateFillStyle(style, lines)\n    {\n        if (!Array.isArray(style.fill))\n        {\n            return style.fill;\n        }\n        else if (style.fill.length === 1)\n        {\n            return style.fill[0];\n        }\n\n        // the gradient will be evenly spaced out according to how large the array is.\n        // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n        let gradient;\n        let totalIterations;\n        let currentIteration;\n        let stop;\n\n        // a dropshadow will enlarge the canvas and result in the gradient being\n        // generated with the incorrect dimensions\n        const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n        const width = Math.ceil(this.canvas.width / this._resolution) - dropShadowCorrection;\n        const height = Math.ceil(this.canvas.height / this._resolution) - dropShadowCorrection;\n\n        // make a copy of the style settings, so we can manipulate them later\n        const fill = style.fill.slice();\n        const fillGradientStops = style.fillGradientStops.slice();\n\n        // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n        if (!fillGradientStops.length)\n        {\n            const lengthPlus1 = fill.length + 1;\n\n            for (let i = 1; i < lengthPlus1; ++i)\n            {\n                fillGradientStops.push(i / lengthPlus1);\n            }\n        }\n\n        // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n        // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n        fill.unshift(style.fill[0]);\n        fillGradientStops.unshift(0);\n\n        fill.push(style.fill[style.fill.length - 1]);\n        fillGradientStops.push(1);\n\n        if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n        {\n            // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n            gradient = this.context.createLinearGradient(width / 2, 0, width / 2, height);\n\n            // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n            // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n            totalIterations = (fill.length + 1) * lines.length;\n            currentIteration = 0;\n            for (let i = 0; i < lines.length; i++)\n            {\n                currentIteration += 1;\n                for (let j = 0; j < fill.length; j++)\n                {\n                    if (typeof fillGradientStops[j] === 'number')\n                    {\n                        stop = (fillGradientStops[j] / lines.length) + (i / lines.length);\n                    }\n                    else\n                    {\n                        stop = currentIteration / totalIterations;\n                    }\n                    gradient.addColorStop(stop, fill[j]);\n                    currentIteration++;\n                }\n            }\n        }\n        else\n        {\n            // start the gradient at the center left of the canvas, and end at the center right of the canvas\n            gradient = this.context.createLinearGradient(0, height / 2, width, height / 2);\n\n            // can just evenly space out the gradients in this case, as multiple lines makes no difference\n            // to an even left to right gradient\n            totalIterations = fill.length + 1;\n            currentIteration = 1;\n\n            for (let i = 0; i < fill.length; i++)\n            {\n                if (typeof fillGradientStops[i] === 'number')\n                {\n                    stop = fillGradientStops[i];\n                }\n                else\n                {\n                    stop = currentIteration / totalIterations;\n                }\n                gradient.addColorStop(stop, fill[i]);\n                currentIteration++;\n            }\n        }\n\n        return gradient;\n    }\n\n    /**\n     * Destroys this text object.\n     * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n     * the majority of the time the texture will not be shared with any other Sprites.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n     */\n    destroy(options)\n    {\n        if (typeof options === 'boolean')\n        {\n            options = { children: options };\n        }\n\n        options = Object.assign({}, defaultDestroyOptions, options);\n\n        super.destroy(options);\n\n        // make sure to reset the the context and canvas.. dont want this hanging around in memory!\n        this.context = null;\n        this.canvas = null;\n\n        this._style = null;\n    }\n\n    /**\n     * The width of the Text, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /**\n     * The height of the Text, setting this will actually modify the scale to achieve the value set\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * Set the style of the text. Set up an event listener to listen for changes on the style\n     * object and mark the text as dirty.\n     *\n     * @member {object|PIXI.TextStyle}\n     */\n    get style()\n    {\n        return this._style;\n    }\n\n    set style(style) // eslint-disable-line require-jsdoc\n    {\n        style = style || {};\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /**\n     * Set the copy for the text object. To split a line you can use '\\n'.\n     *\n     * @member {string}\n     */\n    get text()\n    {\n        return this._text;\n    }\n\n    set text(text) // eslint-disable-line require-jsdoc\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @member {number}\n     * @default 1\n     */\n    get resolution()\n    {\n        return this._resolution;\n    }\n\n    set resolution(value) // eslint-disable-line require-jsdoc\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}