{"ast":null,"code":"/*!\n * @pixi/extract - v5.2.1\n * Compiled Tue, 28 Jan 2020 23:33:11 UTC\n *\n * @pixi/extract is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { RenderTexture } from '@pixi/core';\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nvar TEMP_RECT = new Rectangle();\nvar BYTES_PER_PIXEL = 4;\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new app (will auto-add extract plugin to renderer)\n * const app = new PIXI.Application();\n *\n * // Draw a red circle\n * const graphics = new PIXI.Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = app.renderer.plugins.extract.image(graphics);\n * document.body.appendChild(image);\n * @class\n * @memberof PIXI\n */\n\nvar Extract = function Extract(renderer) {\n  this.renderer = renderer;\n  /**\n   * Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture\n   *\n   * @member {PIXI.Extract} extract\n   * @memberof PIXI.Renderer#\n   * @see PIXI.Extract\n   */\n\n  renderer.extract = this;\n};\n/**\n * Will return a HTML Image of the target\n *\n * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n *  to convert. If left empty will use the main renderer\n * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n * @return {HTMLImageElement} HTML Image of the target\n */\n\n\nExtract.prototype.image = function image(target, format, quality) {\n  var image = new Image();\n  image.src = this.base64(target, format, quality);\n  return image;\n};\n/**\n * Will return a a base64 encoded string of this target. It works by calling\n *  `Extract.getCanvas` and then running toDataURL on that.\n *\n * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n *  to convert. If left empty will use the main renderer\n * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n * @return {string} A base64 encoded string of the texture.\n */\n\n\nExtract.prototype.base64 = function base64(target, format, quality) {\n  return this.canvas(target).toDataURL(format, quality);\n};\n/**\n * Creates a Canvas element, renders this target to it and then returns it.\n *\n * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n *  to convert. If left empty will use the main renderer\n * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n */\n\n\nExtract.prototype.canvas = function canvas(target) {\n  var renderer = this.renderer;\n  var resolution;\n  var frame;\n  var flipY = false;\n  var renderTexture;\n  var generated = false;\n\n  if (target) {\n    if (target instanceof RenderTexture) {\n      renderTexture = target;\n    } else {\n      renderTexture = this.renderer.generateTexture(target);\n      generated = true;\n    }\n  }\n\n  if (renderTexture) {\n    resolution = renderTexture.baseTexture.resolution;\n    frame = renderTexture.frame;\n    flipY = false;\n    renderer.renderTexture.bind(renderTexture);\n  } else {\n    resolution = this.renderer.resolution;\n    flipY = true;\n    frame = TEMP_RECT;\n    frame.width = this.renderer.width;\n    frame.height = this.renderer.height;\n    renderer.renderTexture.bind(null);\n  }\n\n  var width = Math.floor(frame.width * resolution + 1e-4);\n  var height = Math.floor(frame.height * resolution + 1e-4);\n  var canvasBuffer = new CanvasRenderTarget(width, height, 1);\n  var webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height); // read pixels to the array\n\n  var gl = renderer.gl;\n  gl.readPixels(frame.x * resolution, frame.y * resolution, width, height, gl.RGBA, gl.UNSIGNED_BYTE, webglPixels); // add the pixels to the canvas\n\n  var canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n  Extract.arrayPostDivide(webglPixels, canvasData.data);\n  canvasBuffer.context.putImageData(canvasData, 0, 0); // pulling pixels\n\n  if (flipY) {\n    canvasBuffer.context.scale(1, -1);\n    canvasBuffer.context.drawImage(canvasBuffer.canvas, 0, -height);\n  }\n\n  if (generated) {\n    renderTexture.destroy(true);\n  } // send the canvas back..\n\n\n  return canvasBuffer.canvas;\n};\n/**\n * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n * order, with integer values between 0 and 255 (included).\n *\n * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n *  to convert. If left empty will use the main renderer\n * @return {Uint8Array} One-dimensional array containing the pixel data of the entire texture\n */\n\n\nExtract.prototype.pixels = function pixels(target) {\n  var renderer = this.renderer;\n  var resolution;\n  var frame;\n  var renderTexture;\n  var generated = false;\n\n  if (target) {\n    if (target instanceof RenderTexture) {\n      renderTexture = target;\n    } else {\n      renderTexture = this.renderer.generateTexture(target);\n      generated = true;\n    }\n  }\n\n  if (renderTexture) {\n    resolution = renderTexture.baseTexture.resolution;\n    frame = renderTexture.frame; // bind the buffer\n\n    renderer.renderTexture.bind(renderTexture);\n  } else {\n    resolution = renderer.resolution;\n    frame = TEMP_RECT;\n    frame.width = renderer.width;\n    frame.height = renderer.height;\n    renderer.renderTexture.bind(null);\n  }\n\n  var width = frame.width * resolution;\n  var height = frame.height * resolution;\n  var webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height); // read pixels to the array\n\n  var gl = renderer.gl;\n  gl.readPixels(frame.x * resolution, frame.y * resolution, width, height, gl.RGBA, gl.UNSIGNED_BYTE, webglPixels);\n\n  if (generated) {\n    renderTexture.destroy(true);\n  }\n\n  Extract.arrayPostDivide(webglPixels, webglPixels);\n  return webglPixels;\n};\n/**\n * Destroys the extract\n *\n */\n\n\nExtract.prototype.destroy = function destroy() {\n  this.renderer.extract = null;\n  this.renderer = null;\n};\n/**\n * Takes premultiplied pixel data and produces regular pixel data\n *\n * @private\n * @param pixels {number[] | Uint8Array | Uint8ClampedArray} array of pixel data\n * @param out {number[] | Uint8Array | Uint8ClampedArray} output array\n */\n\n\nExtract.arrayPostDivide = function arrayPostDivide(pixels, out) {\n  for (var i = 0; i < pixels.length; i += 4) {\n    var alpha = out[i + 3] = pixels[i + 3];\n\n    if (alpha !== 0) {\n      out[i] = Math.round(Math.min(pixels[i] * 255.0 / alpha, 255.0));\n      out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255.0 / alpha, 255.0));\n      out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255.0 / alpha, 255.0));\n    } else {\n      out[i] = pixels[i];\n      out[i + 1] = pixels[i + 1];\n      out[i + 2] = pixels[i + 2];\n    }\n  }\n};\n\nexport { Extract };","map":{"version":3,"sources":["../src/Extract.js"],"names":["const","let"],"mappings":"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","sourcesContent":["import { RenderTexture } from '@pixi/core';\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\n\nconst TEMP_RECT = new Rectangle();\nconst BYTES_PER_PIXEL = 4;\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new app (will auto-add extract plugin to renderer)\n * const app = new PIXI.Application();\n *\n * // Draw a red circle\n * const graphics = new PIXI.Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = app.renderer.plugins.extract.image(graphics);\n * document.body.appendChild(image);\n * @class\n * @memberof PIXI\n */\nexport class Extract\n{\n    /**\n     * @param {PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n        /**\n         * Collection of methods for extracting data (image, pixels, etc.) from a display object or render texture\n         *\n         * @member {PIXI.Extract} extract\n         * @memberof PIXI.Renderer#\n         * @see PIXI.Extract\n         */\n        renderer.extract = this;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {HTMLImageElement} HTML Image of the target\n     */\n    image(target, format, quality)\n    {\n        const image = new Image();\n\n        image.src = this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a a base64 encoded string of this target. It works by calling\n     *  `Extract.getCanvas` and then running toDataURL on that.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param {string} [format] - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param {number} [quality] - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return {string} A base64 encoded string of the texture.\n     */\n    base64(target, format, quality)\n    {\n        return this.canvas(target).toDataURL(format, quality);\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {HTMLCanvasElement} A Canvas element with the texture rendered on.\n     */\n    canvas(target)\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let frame;\n        let flipY = false;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = renderTexture.frame;\n            flipY = false;\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = this.renderer.resolution;\n\n            flipY = true;\n\n            frame = TEMP_RECT;\n            frame.width = this.renderer.width;\n            frame.height = this.renderer.height;\n\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = Math.floor((frame.width * resolution) + 1e-4);\n        const height = Math.floor((frame.height * resolution) + 1e-4);\n\n        const canvasBuffer = new CanvasRenderTarget(width, height, 1);\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            frame.x * resolution,\n            frame.y * resolution,\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        // add the pixels to the canvas\n        const canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n\n        Extract.arrayPostDivide(webglPixels, canvasData.data);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // pulling pixels\n        if (flipY)\n        {\n            canvasBuffer.context.scale(1, -1);\n            canvasBuffer.context.drawImage(canvasBuffer.canvas, 0, -height);\n        }\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     *\n     * @param {PIXI.DisplayObject|PIXI.RenderTexture} target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return {Uint8Array} One-dimensional array containing the pixel data of the entire texture\n     */\n    pixels(target)\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let frame;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = renderTexture.frame;\n\n            // bind the buffer\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            frame = TEMP_RECT;\n            frame.width = renderer.width;\n            frame.height = renderer.height;\n\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = frame.width * resolution;\n        const height = frame.height * resolution;\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            frame.x * resolution,\n            frame.y * resolution,\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        Extract.arrayPostDivide(webglPixels, webglPixels);\n\n        return webglPixels;\n    }\n\n    /**\n     * Destroys the extract\n     *\n     */\n    destroy()\n    {\n        this.renderer.extract = null;\n        this.renderer = null;\n    }\n\n    /**\n     * Takes premultiplied pixel data and produces regular pixel data\n     *\n     * @private\n     * @param pixels {number[] | Uint8Array | Uint8ClampedArray} array of pixel data\n     * @param out {number[] | Uint8Array | Uint8ClampedArray} output array\n     */\n    static arrayPostDivide(pixels, out)\n    {\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            const alpha = out[i + 3] = pixels[i + 3];\n\n            if (alpha !== 0)\n            {\n                out[i] = Math.round(Math.min(pixels[i] * 255.0 / alpha, 255.0));\n                out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255.0 / alpha, 255.0));\n                out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255.0 / alpha, 255.0));\n            }\n            else\n            {\n                out[i] = pixels[i];\n                out[i + 1] = pixels[i + 1];\n                out[i + 2] = pixels[i + 2];\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}