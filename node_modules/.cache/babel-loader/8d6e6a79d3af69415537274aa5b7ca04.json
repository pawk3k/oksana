{"ast":null,"code":"/*!\n * @pixi/text-bitmap - v5.2.1\n * Compiled Tue, 28 Jan 2020 23:33:11 UTC\n *\n * @pixi/text-bitmap is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { Point, Rectangle, ObservablePoint } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { Sprite } from '@pixi/sprite';\nimport { removeItems, getResolutionOfUrl } from '@pixi/utils';\nimport { LoaderResource } from '@pixi/loaders';\n/**\n * A BitmapText object will create a line or multiple lines of text using bitmap font.\n *\n * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\n * meaning that rendering is fast, and changing text has no performance implications.\n *\n * The primary disadvantage is that you need to preload the bitmap font assets, and thus the styling is set in stone.\n * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.\n *\n * To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.\n *\n * You can generate the fnt files using\n * http://www.angelcode.com/products/bmfont/ for Windows or\n * http://www.bmglyph.com/ for Mac.\n *\n * A BitmapText can only be created when the font is loaded.\n *\n * ```js\n * // in this case the font is in a file called 'desyrel.fnt'\n * let bitmapText = new PIXI.BitmapText(\"text using a fancy font!\", {font: \"35px Desyrel\", align: \"right\"});\n * ```\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\n\nvar BitmapText =\n/*@__PURE__*/\nfunction (Container) {\n  function BitmapText(text, style) {\n    var this$1 = this;\n    if (style === void 0) style = {};\n    Container.call(this);\n    /**\n     * Private tracker for the width of the overall text\n     *\n     * @member {number}\n     * @private\n     */\n\n    this._textWidth = 0;\n    /**\n     * Private tracker for the height of the overall text\n     *\n     * @member {number}\n     * @private\n     */\n\n    this._textHeight = 0;\n    /**\n     * Private tracker for the letter sprite pool.\n     *\n     * @member {PIXI.Sprite[]}\n     * @private\n     */\n\n    this._glyphs = [];\n    /**\n     * Private tracker for the current style.\n     *\n     * @member {object}\n     * @private\n     */\n\n    this._font = {\n      tint: style.tint !== undefined ? style.tint : 0xFFFFFF,\n      align: style.align || 'left',\n      name: null,\n      size: 0\n    };\n    /**\n     * Private tracker for the current font.\n     *\n     * @member {object}\n     * @private\n     */\n\n    this.font = style.font; // run font setter\n\n    /**\n     * Private tracker for the current text.\n     *\n     * @member {string}\n     * @private\n     */\n\n    this._text = text;\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting value to 0\n     *\n     * @member {number}\n     * @private\n     */\n\n    this._maxWidth = 0;\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * ie: when trying to vertically align.\n     *\n     * @member {number}\n     * @private\n     */\n\n    this._maxLineHeight = 0;\n    /**\n     * Letter spacing. This is useful for setting the space between characters.\n     * @member {number}\n     * @private\n     */\n\n    this._letterSpacing = 0;\n    /**\n     * Text anchor. read-only\n     *\n     * @member {PIXI.ObservablePoint}\n     * @private\n     */\n\n    this._anchor = new ObservablePoint(function () {\n      this$1.dirty = true;\n    }, this, 0, 0);\n    /**\n     * The dirty state of this object.\n     *\n     * @member {boolean}\n     */\n\n    this.dirty = false;\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @member {boolean}\n     * @default false\n     */\n\n    this.roundPixels = settings.ROUND_PIXELS;\n    this.updateText();\n  }\n\n  if (Container) BitmapText.__proto__ = Container;\n  BitmapText.prototype = Object.create(Container && Container.prototype);\n  BitmapText.prototype.constructor = BitmapText;\n  var prototypeAccessors = {\n    tint: {\n      configurable: true\n    },\n    align: {\n      configurable: true\n    },\n    anchor: {\n      configurable: true\n    },\n    font: {\n      configurable: true\n    },\n    text: {\n      configurable: true\n    },\n    maxWidth: {\n      configurable: true\n    },\n    maxLineHeight: {\n      configurable: true\n    },\n    textWidth: {\n      configurable: true\n    },\n    letterSpacing: {\n      configurable: true\n    },\n    textHeight: {\n      configurable: true\n    }\n  };\n  /**\n   * Renders text and updates it when needed\n   *\n   * @private\n   */\n\n  BitmapText.prototype.updateText = function updateText() {\n    var data = BitmapText.fonts[this._font.name];\n    var scale = this._font.size / data.size;\n    var pos = new Point();\n    var chars = [];\n    var lineWidths = [];\n    var text = this._text.replace(/(?:\\r\\n|\\r)/g, '\\n') || ' ';\n    var textLength = text.length;\n    var maxWidth = this._maxWidth * data.size / this._font.size;\n    var prevCharCode = null;\n    var lastLineWidth = 0;\n    var maxLineWidth = 0;\n    var line = 0;\n    var lastBreakPos = -1;\n    var lastBreakWidth = 0;\n    var spacesRemoved = 0;\n    var maxLineHeight = 0;\n\n    for (var i = 0; i < textLength; i++) {\n      var charCode = text.charCodeAt(i);\n      var char = text.charAt(i);\n\n      if (/(?:\\s)/.test(char)) {\n        lastBreakPos = i;\n        lastBreakWidth = lastLineWidth;\n      }\n\n      if (char === '\\r' || char === '\\n') {\n        lineWidths.push(lastLineWidth);\n        maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n        ++line;\n        ++spacesRemoved;\n        pos.x = 0;\n        pos.y += data.lineHeight;\n        prevCharCode = null;\n        continue;\n      }\n\n      var charData = data.chars[charCode];\n\n      if (!charData) {\n        continue;\n      }\n\n      if (prevCharCode && charData.kerning[prevCharCode]) {\n        pos.x += charData.kerning[prevCharCode];\n      }\n\n      chars.push({\n        texture: charData.texture,\n        line: line,\n        charCode: charCode,\n        position: new Point(pos.x + charData.xOffset + this._letterSpacing / 2, pos.y + charData.yOffset)\n      });\n      pos.x += charData.xAdvance + this._letterSpacing;\n      lastLineWidth = pos.x;\n      maxLineHeight = Math.max(maxLineHeight, charData.yOffset + charData.texture.height);\n      prevCharCode = charCode;\n\n      if (lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth) {\n        ++spacesRemoved;\n        removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos);\n        i = lastBreakPos;\n        lastBreakPos = -1;\n        lineWidths.push(lastBreakWidth);\n        maxLineWidth = Math.max(maxLineWidth, lastBreakWidth);\n        line++;\n        pos.x = 0;\n        pos.y += data.lineHeight;\n        prevCharCode = null;\n      }\n    }\n\n    var lastChar = text.charAt(text.length - 1);\n\n    if (lastChar !== '\\r' && lastChar !== '\\n') {\n      if (/(?:\\s)/.test(lastChar)) {\n        lastLineWidth = lastBreakWidth;\n      }\n\n      lineWidths.push(lastLineWidth);\n      maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n    }\n\n    var lineAlignOffsets = [];\n\n    for (var i$1 = 0; i$1 <= line; i$1++) {\n      var alignOffset = 0;\n\n      if (this._font.align === 'right') {\n        alignOffset = maxLineWidth - lineWidths[i$1];\n      } else if (this._font.align === 'center') {\n        alignOffset = (maxLineWidth - lineWidths[i$1]) / 2;\n      }\n\n      lineAlignOffsets.push(alignOffset);\n    }\n\n    var lenChars = chars.length;\n    var tint = this.tint;\n\n    for (var i$2 = 0; i$2 < lenChars; i$2++) {\n      var c = this._glyphs[i$2]; // get the next glyph sprite\n\n      if (c) {\n        c.texture = chars[i$2].texture;\n      } else {\n        c = new Sprite(chars[i$2].texture);\n        c.roundPixels = this.roundPixels;\n\n        this._glyphs.push(c);\n      }\n\n      c.position.x = (chars[i$2].position.x + lineAlignOffsets[chars[i$2].line]) * scale;\n      c.position.y = chars[i$2].position.y * scale;\n      c.scale.x = c.scale.y = scale;\n      c.tint = tint;\n\n      if (!c.parent) {\n        this.addChild(c);\n      }\n    } // remove unnecessary children.\n\n\n    for (var i$3 = lenChars; i$3 < this._glyphs.length; ++i$3) {\n      this.removeChild(this._glyphs[i$3]);\n    }\n\n    this._textWidth = maxLineWidth * scale;\n    this._textHeight = (pos.y + data.lineHeight) * scale; // apply anchor\n\n    if (this.anchor.x !== 0 || this.anchor.y !== 0) {\n      for (var i$4 = 0; i$4 < lenChars; i$4++) {\n        this._glyphs[i$4].x -= this._textWidth * this.anchor.x;\n        this._glyphs[i$4].y -= this._textHeight * this.anchor.y;\n      }\n    }\n\n    this._maxLineHeight = maxLineHeight * scale;\n  };\n  /**\n   * Updates the transform of this object\n   *\n   * @private\n   */\n\n\n  BitmapText.prototype.updateTransform = function updateTransform() {\n    this.validate();\n    this.containerUpdateTransform();\n  };\n  /**\n   * Validates text before calling parent's getLocalBounds\n   *\n   * @return {PIXI.Rectangle} The rectangular bounding area\n   */\n\n\n  BitmapText.prototype.getLocalBounds = function getLocalBounds() {\n    this.validate();\n    return Container.prototype.getLocalBounds.call(this);\n  };\n  /**\n   * Updates text when needed\n   *\n   * @private\n   */\n\n\n  BitmapText.prototype.validate = function validate() {\n    if (this.dirty) {\n      this.updateText();\n      this.dirty = false;\n    }\n  };\n  /**\n   * The tint of the BitmapText object.\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.tint.get = function () {\n    return this._font.tint;\n  };\n\n  prototypeAccessors.tint.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this._font.tint = typeof value === 'number' && value >= 0 ? value : 0xFFFFFF;\n    this.dirty = true;\n  };\n  /**\n   * The alignment of the BitmapText object.\n   *\n   * @member {string}\n   * @default 'left'\n   */\n\n\n  prototypeAccessors.align.get = function () {\n    return this._font.align;\n  };\n\n  prototypeAccessors.align.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this._font.align = value || 'left';\n    this.dirty = true;\n  };\n  /**\n   * The anchor sets the origin point of the text.\n   *\n   * The default is `(0,0)`, this means the text's origin is the top left.\n   *\n   * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n   *\n   * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n   *\n   * @member {PIXI.Point | number}\n   */\n\n\n  prototypeAccessors.anchor.get = function () {\n    return this._anchor;\n  };\n\n  prototypeAccessors.anchor.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    if (typeof value === 'number') {\n      this._anchor.set(value);\n    } else {\n      this._anchor.copyFrom(value);\n    }\n  };\n  /**\n   * The font descriptor of the BitmapText object.\n   *\n   * @member {object}\n   */\n\n\n  prototypeAccessors.font.get = function () {\n    return this._font;\n  };\n\n  prototypeAccessors.font.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    if (!value) {\n      return;\n    }\n\n    if (typeof value === 'string') {\n      value = value.split(' ');\n      this._font.name = value.length === 1 ? value[0] : value.slice(1).join(' ');\n      this._font.size = value.length >= 2 ? parseInt(value[0], 10) : BitmapText.fonts[this._font.name].size;\n    } else {\n      this._font.name = value.name;\n      this._font.size = typeof value.size === 'number' ? value.size : parseInt(value.size, 10);\n    }\n\n    this.dirty = true;\n  };\n  /**\n   * The text of the BitmapText object.\n   *\n   * @member {string}\n   */\n\n\n  prototypeAccessors.text.get = function () {\n    return this._text;\n  };\n\n  prototypeAccessors.text.set = function (text) // eslint-disable-line require-jsdoc\n  {\n    text = String(text === null || text === undefined ? '' : text);\n\n    if (this._text === text) {\n      return;\n    }\n\n    this._text = text;\n    this.dirty = true;\n  };\n  /**\n   * The max width of this bitmap text in pixels. If the text provided is longer than the\n   * value provided, line breaks will be automatically inserted in the last whitespace.\n   * Disable by setting the value to 0.\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.maxWidth.get = function () {\n    return this._maxWidth;\n  };\n\n  prototypeAccessors.maxWidth.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    if (this._maxWidth === value) {\n      return;\n    }\n\n    this._maxWidth = value;\n    this.dirty = true;\n  };\n  /**\n   * The max line height. This is useful when trying to use the total height of the Text,\n   * i.e. when trying to vertically align.\n   *\n   * @member {number}\n   * @readonly\n   */\n\n\n  prototypeAccessors.maxLineHeight.get = function () {\n    this.validate();\n    return this._maxLineHeight;\n  };\n  /**\n   * The width of the overall text, different from fontSize,\n   * which is defined in the style object.\n   *\n   * @member {number}\n   * @readonly\n   */\n\n\n  prototypeAccessors.textWidth.get = function () {\n    this.validate();\n    return this._textWidth;\n  };\n  /**\n   * Additional space between characters.\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.letterSpacing.get = function () {\n    return this._letterSpacing;\n  };\n\n  prototypeAccessors.letterSpacing.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    if (this._letterSpacing !== value) {\n      this._letterSpacing = value;\n      this.dirty = true;\n    }\n  };\n  /**\n   * The height of the overall text, different from fontSize,\n   * which is defined in the style object.\n   *\n   * @member {number}\n   * @readonly\n   */\n\n\n  prototypeAccessors.textHeight.get = function () {\n    this.validate();\n    return this._textHeight;\n  };\n  /**\n   * Register a bitmap font with data and a texture.\n   *\n   * @static\n   * @param {XMLDocument} xml - The XML document data.\n   * @param {Object.<string, PIXI.Texture>|PIXI.Texture|PIXI.Texture[]} textures - List of textures for each page.\n   *  If providing an object, the key is the `<page>` element's `file` attribute in the FNT file.\n   * @return {Object} Result font object with font, size, lineHeight and char fields.\n   */\n\n\n  BitmapText.registerFont = function registerFont(xml, textures) {\n    var data = {};\n    var info = xml.getElementsByTagName('info')[0];\n    var common = xml.getElementsByTagName('common')[0];\n    var pages = xml.getElementsByTagName('page');\n    var res = getResolutionOfUrl(pages[0].getAttribute('file'), settings.RESOLUTION);\n    var pagesTextures = {};\n    data.font = info.getAttribute('face');\n    data.size = parseInt(info.getAttribute('size'), 10);\n    data.lineHeight = parseInt(common.getAttribute('lineHeight'), 10) / res;\n    data.chars = {}; // Single texture, convert to list\n\n    if (textures instanceof Texture) {\n      textures = [textures];\n    } // Convert the input Texture, Textures or object\n    // into a page Texture lookup by \"id\"\n\n\n    for (var i = 0; i < pages.length; i++) {\n      var id = pages[i].getAttribute('id');\n      var file = pages[i].getAttribute('file');\n      pagesTextures[id] = textures instanceof Array ? textures[i] : textures[file];\n    } // parse letters\n\n\n    var letters = xml.getElementsByTagName('char');\n\n    for (var i$1 = 0; i$1 < letters.length; i$1++) {\n      var letter = letters[i$1];\n      var charCode = parseInt(letter.getAttribute('id'), 10);\n      var page = letter.getAttribute('page') || 0;\n      var textureRect = new Rectangle(parseInt(letter.getAttribute('x'), 10) / res + pagesTextures[page].frame.x / res, parseInt(letter.getAttribute('y'), 10) / res + pagesTextures[page].frame.y / res, parseInt(letter.getAttribute('width'), 10) / res, parseInt(letter.getAttribute('height'), 10) / res);\n      data.chars[charCode] = {\n        xOffset: parseInt(letter.getAttribute('xoffset'), 10) / res,\n        yOffset: parseInt(letter.getAttribute('yoffset'), 10) / res,\n        xAdvance: parseInt(letter.getAttribute('xadvance'), 10) / res,\n        kerning: {},\n        texture: new Texture(pagesTextures[page].baseTexture, textureRect),\n        page: page\n      };\n    } // parse kernings\n\n\n    var kernings = xml.getElementsByTagName('kerning');\n\n    for (var i$2 = 0; i$2 < kernings.length; i$2++) {\n      var kerning = kernings[i$2];\n      var first = parseInt(kerning.getAttribute('first'), 10) / res;\n      var second = parseInt(kerning.getAttribute('second'), 10) / res;\n      var amount = parseInt(kerning.getAttribute('amount'), 10) / res;\n\n      if (data.chars[second]) {\n        data.chars[second].kerning[first] = amount;\n      }\n    } // I'm leaving this as a temporary fix so we can test the bitmap fonts in v3\n    // but it's very likely to change\n\n\n    BitmapText.fonts[data.font] = data;\n    return data;\n  };\n\n  Object.defineProperties(BitmapText.prototype, prototypeAccessors);\n  return BitmapText;\n}(Container);\n\nBitmapText.fonts = {};\n/**\n * {@link PIXI.Loader Loader} middleware for loading\n * bitmap-based fonts suitable for using with {@link PIXI.BitmapText}.\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\n\nvar BitmapFontLoader = function BitmapFontLoader() {};\n\nBitmapFontLoader.parse = function parse(resource, texture) {\n  resource.bitmapFont = BitmapText.registerFont(resource.data, texture);\n};\n/**\n * Called when the plugin is installed.\n *\n * @see PIXI.Loader.registerPlugin\n */\n\n\nBitmapFontLoader.add = function add() {\n  LoaderResource.setExtensionXhrType('fnt', LoaderResource.XHR_RESPONSE_TYPE.DOCUMENT);\n};\n/**\n * Replacement for NodeJS's path.dirname\n * @private\n * @param {string} url Path to get directory for\n */\n\n\nBitmapFontLoader.dirname = function dirname(url) {\n  var dir = url.replace(/\\\\/g, '/') // convert windows notation to UNIX notation, URL-safe because it's a forbidden character\n  .replace(/\\/$/, '') // replace trailing slash\n  .replace(/\\/[^\\/]*$/, ''); // remove everything after the last\n  // File request is relative, use current directory\n\n  if (dir === url) {\n    return '.';\n  } // Started with a slash\n  else if (dir === '') {\n      return '/';\n    }\n\n  return dir;\n};\n/**\n * Called after a resource is loaded.\n * @see PIXI.Loader.loaderMiddleware\n * @param {PIXI.LoaderResource} resource\n * @param {function} next\n */\n\n\nBitmapFontLoader.use = function use(resource, next) {\n  // skip if no data or not xml data\n  if (!resource.data || resource.type !== LoaderResource.TYPE.XML) {\n    next();\n    return;\n  } // skip if not bitmap font data, using some silly duck-typing\n\n\n  if (resource.data.getElementsByTagName('page').length === 0 || resource.data.getElementsByTagName('info').length === 0 || resource.data.getElementsByTagName('info')[0].getAttribute('face') === null) {\n    next();\n    return;\n  }\n\n  var xmlUrl = !resource.isDataUrl ? BitmapFontLoader.dirname(resource.url) : '';\n\n  if (resource.isDataUrl) {\n    if (xmlUrl === '.') {\n      xmlUrl = '';\n    }\n\n    if (this.baseUrl && xmlUrl) {\n      // if baseurl has a trailing slash then add one to xmlUrl so the replace works below\n      if (this.baseUrl.charAt(this.baseUrl.length - 1) === '/') {\n        xmlUrl += '/';\n      }\n    }\n  } // remove baseUrl from xmlUrl\n\n\n  xmlUrl = xmlUrl.replace(this.baseUrl, ''); // if there is an xmlUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n\n  if (xmlUrl && xmlUrl.charAt(xmlUrl.length - 1) !== '/') {\n    xmlUrl += '/';\n  }\n\n  var pages = resource.data.getElementsByTagName('page');\n  var textures = {}; // Handle completed, when the number of textures\n  // load is the same number as references in the fnt file\n\n  var completed = function (page) {\n    textures[page.metadata.pageFile] = page.texture;\n\n    if (Object.keys(textures).length === pages.length) {\n      BitmapFontLoader.parse(resource, textures);\n      next();\n    }\n  };\n\n  for (var i = 0; i < pages.length; ++i) {\n    var pageFile = pages[i].getAttribute('file');\n    var url = xmlUrl + pageFile;\n    var exists = false; // incase the image is loaded outside\n    // using the same loader, resource will be available\n\n    for (var name in this.resources) {\n      var bitmapResource = this.resources[name];\n\n      if (bitmapResource.url === url) {\n        bitmapResource.metadata.pageFile = pageFile;\n\n        if (bitmapResource.texture) {\n          completed(bitmapResource);\n        } else {\n          bitmapResource.onAfterMiddleware.add(completed);\n        }\n\n        exists = true;\n        break;\n      }\n    } // texture is not loaded, we'll attempt to add\n    // it to the load and add the texture to the list\n\n\n    if (!exists) {\n      // Standard loading options for images\n      var options = {\n        crossOrigin: resource.crossOrigin,\n        loadType: LoaderResource.LOAD_TYPE.IMAGE,\n        metadata: Object.assign({\n          pageFile: pageFile\n        }, resource.metadata.imageMetadata),\n        parentResource: resource\n      };\n      this.add(url, options, completed);\n    }\n  }\n};\n\nexport { BitmapFontLoader, BitmapText };","map":{"version":3,"sources":["../src/BitmapText.js","../src/BitmapFontLoader.js"],"names":["super","this","const","let","i"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,IAAa,UAAU;AAAA;AAAA,UAAA,SAAA,EAAA;AAanB,WAAA,UAAA,CAAY,IAAZ,EAAkB,KAAlB,EACA;;+BADuB,GAAG,E;AAEtBA,IAAAA,SAAAA,CAAAA,IAAAA,CAAK,IAALA;;;;;;;;AAQA,SAAK,UAAL,GAAkB,CAAlB;;;;;;;;AAQA,SAAK,WAAL,GAAmB,CAAnB;;;;;;;;AAQA,SAAK,OAAL,GAAe,EAAf;;;;;;;;AAQA,SAAK,KAAL,GAAa;AACT,MAAA,IAAI,EAAE,KAAK,CAAC,IAAN,KAAe,SAAf,GAA2B,KAAK,CAAC,IAAjC,GAAwC,QADrC;AAET,MAAA,KAAK,EAAE,KAAK,CAAC,KAAN,IAAe,MAFb;AAGT,MAAA,IAAI,EAAE,IAHG;AAIT,MAAA,IAAI,EAAE;AAJG,KAAb;;;;;;;;AAaA,SAAK,IAAL,GAAY,KAAK,CAAC,IAAlB,CA9CJ,CA8C2B;;;;;;;;;AAQvB,SAAK,KAAL,GAAa,IAAb;;;;;;;;;;AAUA,SAAK,SAAL,GAAiB,CAAjB;;;;;;;;;AASA,SAAK,cAAL,GAAsB,CAAtB;;;;;;;AAOA,SAAK,cAAL,GAAsB,CAAtB;;;;;;;;AAQA,SAAK,OAAL,GAAe,IAAI,eAAJ,CAAmB,YAAI;AAAKC,MAAAA,MAAI,CAAC,KAALA,GAAa,IAAbA;AAAoB,KAAhD,EAAkD,IAAlD,EAAwD,CAAxD,EAA2D,CAA3D,CAAf;;;;;;;AAOA,SAAK,KAAL,GAAa,KAAb;;;;;;;;;;;AAWA,SAAK,WAAL,GAAmB,QAAQ,CAAC,YAA5B;AAEA,SAAK,UAAL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBACH;;;;;;;;;uBAOD,U,GAAA,SAAA,UAAA,GACA;AACIC,QAAM,IAAI,GAAG,UAAU,CAAC,KAAX,CAAiB,KAAK,KAAL,CAAW,IAA5B,CAAbA;AACAA,QAAM,KAAK,GAAG,KAAK,KAAL,CAAW,IAAX,GAAkB,IAAI,CAAC,IAArCA;AACAA,QAAM,GAAG,GAAG,IAAI,KAAJ,EAAZA;AACAA,QAAM,KAAK,GAAG,EAAdA;AACAA,QAAM,UAAU,GAAG,EAAnBA;AACAA,QAAM,IAAI,GAAG,KAAK,KAAL,CAAW,OAAX,CAAmB,cAAnB,EAAmC,IAAnC,KAA4C,GAAzDA;AACAA,QAAM,UAAU,GAAG,IAAI,CAAC,MAAxBA;AACAA,QAAM,QAAQ,GAAG,KAAK,SAAL,GAAiB,IAAI,CAAC,IAAtB,GAA6B,KAAK,KAAL,CAAW,IAAzDA;AAEAC,QAAI,YAAY,GAAG,IAAnBA;AACAA,QAAI,aAAa,GAAG,CAApBA;AACAA,QAAI,YAAY,GAAG,CAAnBA;AACAA,QAAI,IAAI,GAAG,CAAXA;AACAA,QAAI,YAAY,GAAG,CAAC,CAApBA;AACAA,QAAI,cAAc,GAAG,CAArBA;AACAA,QAAI,aAAa,GAAG,CAApBA;AACAA,QAAI,aAAa,GAAG,CAApBA;;AAEA,SAAKA,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAApB,EAAgC,CAAC,EAAjC,EACA;AACID,UAAM,QAAQ,GAAG,IAAI,CAAC,UAAL,CAAgB,CAAhB,CAAjBA;AACAA,UAAM,IAAI,GAAG,IAAI,CAAC,MAAL,CAAY,CAAZ,CAAbA;;AAEA,UAAK,QAAD,CAAW,IAAX,CAAgB,IAAhB,CAAJ,EACA;AACI,QAAA,YAAY,GAAG,CAAf;AACA,QAAA,cAAc,GAAG,aAAjB;AACH;;AAED,UAAI,IAAI,KAAK,IAAT,IAAiB,IAAI,KAAK,IAA9B,EACA;AACI,QAAA,UAAU,CAAC,IAAX,CAAgB,aAAhB;AACA,QAAA,YAAY,GAAG,IAAI,CAAC,GAAL,CAAS,YAAT,EAAuB,aAAvB,CAAf;AACA,UAAE,IAAF;AACA,UAAE,aAAF;AAEA,QAAA,GAAG,CAAC,CAAJ,GAAQ,CAAR;AACA,QAAA,GAAG,CAAC,CAAJ,IAAS,IAAI,CAAC,UAAd;AACA,QAAA,YAAY,GAAG,IAAf;AACA;AACH;;AAEDA,UAAM,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,QAAX,CAAjBA;;AAEA,UAAI,CAAC,QAAL,EACA;AACI;AACH;;AAED,UAAI,YAAY,IAAI,QAAQ,CAAC,OAAT,CAAiB,YAAjB,CAApB,EACA;AACI,QAAA,GAAG,CAAC,CAAJ,IAAS,QAAQ,CAAC,OAAT,CAAiB,YAAjB,CAAT;AACH;;AAED,MAAA,KAAK,CAAC,IAAN,CAAW;AACP,QAAA,OAAO,EAAE,QAAQ,CAAC,OADX;cAEP,IAFO;kBAGP,QAHO;AAIP,QAAA,QAAQ,EAAE,IAAI,KAAJ,CAAU,GAAG,CAAC,CAAJ,GAAQ,QAAQ,CAAC,OAAjB,GAA4B,KAAK,cAAL,GAAsB,CAA5D,EAAgE,GAAG,CAAC,CAAJ,GAAQ,QAAQ,CAAC,OAAjF;AAJH,OAAX;AAMA,MAAA,GAAG,CAAC,CAAJ,IAAS,QAAQ,CAAC,QAAT,GAAoB,KAAK,cAAlC;AACA,MAAA,aAAa,GAAG,GAAG,CAAC,CAApB;AACA,MAAA,aAAa,GAAG,IAAI,CAAC,GAAL,CAAS,aAAT,EAAyB,QAAQ,CAAC,OAAT,GAAmB,QAAQ,CAAC,OAAT,CAAiB,MAA7D,CAAhB;AACA,MAAA,YAAY,GAAG,QAAf;;AAEA,UAAI,YAAY,KAAK,CAAC,CAAlB,IAAuB,QAAQ,GAAG,CAAlC,IAAuC,GAAG,CAAC,CAAJ,GAAQ,QAAnD,EACA;AACI,UAAE,aAAF;AACA,QAAA,WAAW,CAAC,KAAD,EAAQ,IAAI,YAAJ,GAAmB,aAA3B,EAA0C,IAAI,CAAJ,GAAQ,YAAlD,CAAX;AACA,QAAA,CAAC,GAAG,YAAJ;AACA,QAAA,YAAY,GAAG,CAAC,CAAhB;AAEA,QAAA,UAAU,CAAC,IAAX,CAAgB,cAAhB;AACA,QAAA,YAAY,GAAG,IAAI,CAAC,GAAL,CAAS,YAAT,EAAuB,cAAvB,CAAf;AACA,QAAA,IAAI;AAEJ,QAAA,GAAG,CAAC,CAAJ,GAAQ,CAAR;AACA,QAAA,GAAG,CAAC,CAAJ,IAAS,IAAI,CAAC,UAAd;AACA,QAAA,YAAY,GAAG,IAAf;AACH;AACJ;;AAEDA,QAAM,QAAQ,GAAG,IAAI,CAAC,MAAL,CAAY,IAAI,CAAC,MAAL,GAAc,CAA1B,CAAjBA;;AAEA,QAAI,QAAQ,KAAK,IAAb,IAAqB,QAAQ,KAAK,IAAtC,EACA;AACI,UAAK,QAAD,CAAW,IAAX,CAAgB,QAAhB,CAAJ,EACA;AACI,QAAA,aAAa,GAAG,cAAhB;AACH;;AAED,MAAA,UAAU,CAAC,IAAX,CAAgB,aAAhB;AACA,MAAA,YAAY,GAAG,IAAI,CAAC,GAAL,CAAS,YAAT,EAAuB,aAAvB,CAAf;AACH;;AAEDA,QAAM,gBAAgB,GAAG,EAAzBA;;AAEA,SAAKC,IAAIC,GAAC,GAAG,CAAb,EAAgBA,GAAC,IAAI,IAArB,EAA2BA,GAAC,EAA5B,EACA;AACID,UAAI,WAAW,GAAG,CAAlBA;;AAEA,UAAI,KAAK,KAAL,CAAW,KAAX,KAAqB,OAAzB,EACA;AACI,QAAA,WAAW,GAAG,YAAY,GAAG,UAAU,CAACC,GAAD,CAAvC;AACH,OAHD,MAIK,IAAI,KAAK,KAAL,CAAW,KAAX,KAAqB,QAAzB,EACL;AACI,QAAA,WAAW,GAAG,CAAC,YAAY,GAAG,UAAU,CAACA,GAAD,CAA1B,IAAiC,CAA/C;AACH;;AAED,MAAA,gBAAgB,CAAC,IAAjB,CAAsB,WAAtB;AACH;;AAEDF,QAAM,QAAQ,GAAG,KAAK,CAAC,MAAvBA;AACAA,QAAM,IAAI,GAAG,KAAK,IAAlBA;;AAEA,SAAKC,IAAIC,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG,QAApB,EAA8BA,GAAC,EAA/B,EACA;AACID,UAAI,CAAC,GAAG,KAAK,OAAL,CAAaC,GAAb,CAARD,CADJ,CAC4B;;AAExB,UAAI,CAAJ,EACA;AACI,QAAA,CAAC,CAAC,OAAF,GAAY,KAAK,CAACC,GAAD,CAAL,CAAS,OAArB;AACH,OAHD,MAKA;AACI,QAAA,CAAC,GAAG,IAAI,MAAJ,CAAW,KAAK,CAACA,GAAD,CAAL,CAAS,OAApB,CAAJ;AACA,QAAA,CAAC,CAAC,WAAF,GAAgB,KAAK,WAArB;;AACA,aAAK,OAAL,CAAa,IAAb,CAAkB,CAAlB;AACH;;AAED,MAAA,CAAC,CAAC,QAAF,CAAW,CAAX,GAAe,CAAC,KAAK,CAACA,GAAD,CAAL,CAAS,QAAT,CAAkB,CAAlB,GAAsB,gBAAgB,CAAC,KAAK,CAACA,GAAD,CAAL,CAAS,IAAV,CAAvC,IAA0D,KAAzE;AACA,MAAA,CAAC,CAAC,QAAF,CAAW,CAAX,GAAe,KAAK,CAACA,GAAD,CAAL,CAAS,QAAT,CAAkB,CAAlB,GAAsB,KAArC;AACA,MAAA,CAAC,CAAC,KAAF,CAAQ,CAAR,GAAY,CAAC,CAAC,KAAF,CAAQ,CAAR,GAAY,KAAxB;AACA,MAAA,CAAC,CAAC,IAAF,GAAS,IAAT;;AAEA,UAAI,CAAC,CAAC,CAAC,MAAP,EACA;AACI,aAAK,QAAL,CAAc,CAAd;AACH;AACJ,KA7IL,C;;;AAgJI,SAAKD,IAAIC,GAAC,GAAG,QAAb,EAAuBA,GAAC,GAAG,KAAK,OAAL,CAAa,MAAxC,EAAgD,EAAEA,GAAlD,EACA;AACI,WAAK,WAAL,CAAiB,KAAK,OAAL,CAAaA,GAAb,CAAjB;AACH;;AAED,SAAK,UAAL,GAAkB,YAAY,GAAG,KAAjC;AACA,SAAK,WAAL,GAAmB,CAAC,GAAG,CAAC,CAAJ,GAAQ,IAAI,CAAC,UAAd,IAA4B,KAA/C,CAtJJ,C;;AAyJI,QAAI,KAAK,MAAL,CAAY,CAAZ,KAAkB,CAAlB,IAAuB,KAAK,MAAL,CAAY,CAAZ,KAAkB,CAA7C,EACA;AACI,WAAKD,IAAIC,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG,QAApB,EAA8BA,GAAC,EAA/B,EACA;AACI,aAAK,OAAL,CAAaA,GAAb,EAAgB,CAAhB,IAAqB,KAAK,UAAL,GAAkB,KAAK,MAAL,CAAY,CAAnD;AACA,aAAK,OAAL,CAAaA,GAAb,EAAgB,CAAhB,IAAqB,KAAK,WAAL,GAAmB,KAAK,MAAL,CAAY,CAApD;AACH;AACJ;;AACD,SAAK,cAAL,GAAsB,aAAa,GAAG,KAAtC;AACH,G;;;;;;;;uBAOD,e,GAAA,SAAA,eAAA,GACA;AACI,SAAK,QAAL;AACA,SAAK,wBAAL;AACH,G;;;;;;;;uBAOD,c,GAAA,SAAA,cAAA,GACA;AACI,SAAK,QAAL;AAEA,WAAOJ,SAAAA,CAAAA,SAAAA,CAAM,cAANA,CAAM,IAANA,CAAoB,IAApBA,CAAP;AACH,G;;;;;;;;uBAOD,Q,GAAA,SAAA,QAAA,GACA;AACI,QAAI,KAAK,KAAT,EACA;AACI,WAAK,UAAL;AACA,WAAK,KAAL,GAAa,KAAb;AACH;AACJ,G;;;;;;;;AAOD,EAAA,kBAAA,CAAI,IAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,WAAO,KAAK,KAAL,CAAW,IAAlB;AACH,GAHD;;AAKA,EAAA,kBAAA,CAAI,IAAJ,CAAI,GAAJ,GAAI,UAAK,KAAL,EAAU;AACd;AACI,SAAK,KAAL,CAAW,IAAX,GAAmB,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAAK,IAAI,CAAvC,GAA4C,KAA5C,GAAoD,QAAtE;AAEA,SAAK,KAAL,GAAa,IAAb;AACH,GALD;;;;;;;;;AAaA,EAAA,kBAAA,CAAI,KAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,WAAO,KAAK,KAAL,CAAW,KAAlB;AACH,GAHD;;AAKA,EAAA,kBAAA,CAAI,KAAJ,CAAI,GAAJ,GAAI,UAAM,KAAN,EAAW;AACf;AACI,SAAK,KAAL,CAAW,KAAX,GAAmB,KAAK,IAAI,MAA5B;AAEA,SAAK,KAAL,GAAa,IAAb;AACH,GALD;;;;;;;;;;;;;;AAkBA,EAAA,kBAAA,CAAI,MAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,WAAO,KAAK,OAAZ;AACH,GAHD;;AAKA,EAAA,kBAAA,CAAI,MAAJ,CAAI,GAAJ,GAAI,UAAO,KAAP,EAAY;AAChB;AACI,QAAI,OAAO,KAAP,KAAiB,QAArB,EACA;AACI,WAAK,OAAL,CAAa,GAAb,CAAiB,KAAjB;AACH,KAHD,MAKA;AACI,WAAK,OAAL,CAAa,QAAb,CAAsB,KAAtB;AACH;AACJ,GAVD;;;;;;;;AAiBA,EAAA,kBAAA,CAAI,IAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,WAAO,KAAK,KAAZ;AACH,GAHD;;AAKA,EAAA,kBAAA,CAAI,IAAJ,CAAI,GAAJ,GAAI,UAAK,KAAL,EAAU;AACd;AACI,QAAI,CAAC,KAAL,EACA;AACI;AACH;;AAED,QAAI,OAAO,KAAP,KAAiB,QAArB,EACA;AACI,MAAA,KAAK,GAAG,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAR;AAEA,WAAK,KAAL,CAAW,IAAX,GAAkB,KAAK,CAAC,MAAN,KAAiB,CAAjB,GAAqB,KAAK,CAAC,CAAD,CAA1B,GAAgC,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,IAAf,CAAoB,GAApB,CAAlD;AACA,WAAK,KAAL,CAAW,IAAX,GAAkB,KAAK,CAAC,MAAN,IAAgB,CAAhB,GAAoB,QAAQ,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAA5B,GAA6C,UAAU,CAAC,KAAX,CAAiB,KAAK,KAAL,CAAW,IAA5B,EAAkC,IAAjG;AACH,KAND,MAQA;AACI,WAAK,KAAL,CAAW,IAAX,GAAkB,KAAK,CAAC,IAAxB;AACA,WAAK,KAAL,CAAW,IAAX,GAAkB,OAAO,KAAK,CAAC,IAAb,KAAsB,QAAtB,GAAiC,KAAK,CAAC,IAAvC,GAA8C,QAAQ,CAAC,KAAK,CAAC,IAAP,EAAa,EAAb,CAAxE;AACH;;AAED,SAAK,KAAL,GAAa,IAAb;AACH,GArBD;;;;;;;;AA4BA,EAAA,kBAAA,CAAI,IAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,WAAO,KAAK,KAAZ;AACH,GAHD;;AAKA,EAAA,kBAAA,CAAI,IAAJ,CAAI,GAAJ,GAAI,UAAK,IAAL,EAAS;AACb;AACI,IAAA,IAAI,GAAG,MAAM,CAAC,IAAI,KAAK,IAAT,IAAiB,IAAI,KAAK,SAA1B,GAAsC,EAAtC,GAA2C,IAA5C,CAAb;;AAEA,QAAI,KAAK,KAAL,KAAe,IAAnB,EACA;AACI;AACH;;AACD,SAAK,KAAL,GAAa,IAAb;AACA,SAAK,KAAL,GAAa,IAAb;AACH,GAVD;;;;;;;;;;AAmBA,EAAA,kBAAA,CAAI,QAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,WAAO,KAAK,SAAZ;AACH,GAHD;;AAKA,EAAA,kBAAA,CAAI,QAAJ,CAAI,GAAJ,GAAI,UAAS,KAAT,EAAc;AAClB;AACI,QAAI,KAAK,SAAL,KAAmB,KAAvB,EACA;AACI;AACH;;AACD,SAAK,SAAL,GAAiB,KAAjB;AACA,SAAK,KAAL,GAAa,IAAb;AACH,GARD;;;;;;;;;;AAiBA,EAAA,kBAAA,CAAI,aAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,SAAK,QAAL;AAEA,WAAO,KAAK,cAAZ;AACH,GALD;;;;;;;;;;AAcA,EAAA,kBAAA,CAAI,SAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,SAAK,QAAL;AAEA,WAAO,KAAK,UAAZ;AACH,GALD;;;;;;;;AAYA,EAAA,kBAAA,CAAI,aAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,WAAO,KAAK,cAAZ;AACH,GAHD;;AAKA,EAAA,kBAAA,CAAI,aAAJ,CAAI,GAAJ,GAAI,UAAc,KAAd,EAAmB;AACvB;AACI,QAAI,KAAK,cAAL,KAAwB,KAA5B,EACA;AACI,WAAK,cAAL,GAAsB,KAAtB;AACA,WAAK,KAAL,GAAa,IAAb;AACH;AACJ,GAPD;;;;;;;;;;AAgBA,EAAA,kBAAA,CAAI,UAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,SAAK,QAAL;AAEA,WAAO,KAAK,WAAZ;AACH,GALD;;;;;;;;;;;;AAgBA,EAAA,UAAA,CAAO,YAAP,GAAO,SAAA,YAAA,CAAa,GAAb,EAAkB,QAAlB,EACP;AACIE,QAAM,IAAI,GAAG,EAAbA;AACAA,QAAM,IAAI,GAAG,GAAG,CAAC,oBAAJ,CAAyB,MAAzB,EAAiC,CAAjC,CAAbA;AACAA,QAAM,MAAM,GAAG,GAAG,CAAC,oBAAJ,CAAyB,QAAzB,EAAmC,CAAnC,CAAfA;AACAA,QAAM,KAAK,GAAG,GAAG,CAAC,oBAAJ,CAAyB,MAAzB,CAAdA;AACAA,QAAM,GAAG,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAD,CAAL,CAAS,YAAT,CAAsB,MAAtB,CAAD,EAAgC,QAAQ,CAAC,UAAzC,CAA9BA;AACAA,QAAM,aAAa,GAAG,EAAtBA;AAEA,IAAA,IAAI,CAAC,IAAL,GAAY,IAAI,CAAC,YAAL,CAAkB,MAAlB,CAAZ;AACA,IAAA,IAAI,CAAC,IAAL,GAAY,QAAQ,CAAC,IAAI,CAAC,YAAL,CAAkB,MAAlB,CAAD,EAA4B,EAA5B,CAApB;AACA,IAAA,IAAI,CAAC,UAAL,GAAkB,QAAQ,CAAC,MAAM,CAAC,YAAP,CAAoB,YAApB,CAAD,EAAoC,EAApC,CAAR,GAAkD,GAApE;AACA,IAAA,IAAI,CAAC,KAAL,GAAa,EAAb,CAXJ,C;;AAcI,QAAI,QAAQ,YAAY,OAAxB,EACA;AACI,MAAA,QAAQ,GAAG,CAAC,QAAD,CAAX;AACH,KAjBL,C;;;;AAqBI,SAAKC,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EACA;AACID,UAAM,EAAE,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,YAAT,CAAsB,IAAtB,CAAXA;AACAA,UAAM,IAAI,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,YAAT,CAAsB,MAAtB,CAAbA;AAEA,MAAA,aAAa,CAAC,EAAD,CAAb,GAAoB,QAAQ,YAAY,KAApB,GAA4B,QAAQ,CAAC,CAAD,CAApC,GAA0C,QAAQ,CAAC,IAAD,CAAtE;AACH,KA3BL,C;;;AA8BIA,QAAM,OAAO,GAAG,GAAG,CAAC,oBAAJ,CAAyB,MAAzB,CAAhBA;;AAEA,SAAKC,IAAIC,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG,OAAO,CAAC,MAA5B,EAAoCA,GAAC,EAArC,EACA;AACIF,UAAM,MAAM,GAAG,OAAO,CAACE,GAAD,CAAtBF;AACAA,UAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,YAAP,CAAoB,IAApB,CAAD,EAA4B,EAA5B,CAAzBA;AACAA,UAAM,IAAI,GAAG,MAAM,CAAC,YAAP,CAAoB,MAApB,KAA+B,CAA5CA;AACAA,UAAM,WAAW,GAAG,IAAI,SAAJ,CACf,QAAQ,CAAC,MAAM,CAAC,YAAP,CAAoB,GAApB,CAAD,EAA2B,EAA3B,CAAR,GAAyC,GAA1C,GAAkD,aAAa,CAAC,IAAD,CAAb,CAAoB,KAApB,CAA0B,CAA1B,GAA8B,GADhE,EAEf,QAAQ,CAAC,MAAM,CAAC,YAAP,CAAoB,GAApB,CAAD,EAA2B,EAA3B,CAAR,GAAyC,GAA1C,GAAkD,aAAa,CAAC,IAAD,CAAb,CAAoB,KAApB,CAA0B,CAA1B,GAA8B,GAFhE,EAGhB,QAAQ,CAAC,MAAM,CAAC,YAAP,CAAoB,OAApB,CAAD,EAA+B,EAA/B,CAAR,GAA6C,GAH7B,EAIhB,QAAQ,CAAC,MAAM,CAAC,YAAP,CAAoB,QAApB,CAAD,EAAgC,EAAhC,CAAR,GAA8C,GAJ9B,CAApBA;AAOA,MAAA,IAAI,CAAC,KAAL,CAAW,QAAX,IAAuB;AACnB,QAAA,OAAO,EAAE,QAAQ,CAAC,MAAM,CAAC,YAAP,CAAoB,SAApB,CAAD,EAAiC,EAAjC,CAAR,GAA+C,GADrC;AAEnB,QAAA,OAAO,EAAE,QAAQ,CAAC,MAAM,CAAC,YAAP,CAAoB,SAApB,CAAD,EAAiC,EAAjC,CAAR,GAA+C,GAFrC;AAGnB,QAAA,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC,YAAP,CAAoB,UAApB,CAAD,EAAkC,EAAlC,CAAR,GAAgD,GAHvC;AAInB,QAAA,OAAO,EAAE,EAJU;AAKnB,QAAA,OAAO,EAAE,IAAI,OAAJ,CAAY,aAAa,CAAC,IAAD,CAAb,CAAoB,WAAhC,EAA6C,WAA7C,CALU;cAMnB;AANmB,OAAvB;AAQH,KApDL,C;;;AAuDIA,QAAM,QAAQ,GAAG,GAAG,CAAC,oBAAJ,CAAyB,SAAzB,CAAjBA;;AAEA,SAAKC,IAAIC,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqCA,GAAC,EAAtC,EACA;AACIF,UAAM,OAAO,GAAG,QAAQ,CAACE,GAAD,CAAxBF;AACAA,UAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,YAAR,CAAqB,OAArB,CAAD,EAAgC,EAAhC,CAAR,GAA8C,GAA5DA;AACAA,UAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,YAAR,CAAqB,QAArB,CAAD,EAAiC,EAAjC,CAAR,GAA+C,GAA9DA;AACAA,UAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,YAAR,CAAqB,QAArB,CAAD,EAAiC,EAAjC,CAAR,GAA+C,GAA9DA;;AAEA,UAAI,IAAI,CAAC,KAAL,CAAW,MAAX,CAAJ,EACA;AACI,QAAA,IAAI,CAAC,KAAL,CAAW,MAAX,EAAmB,OAAnB,CAA2B,KAA3B,IAAoC,MAApC;AACH;AACJ,KApEL,C;;;;AAwEI,IAAA,UAAU,CAAC,KAAX,CAAiB,IAAI,CAAC,IAAtB,IAA8B,IAA9B;AAEA,WAAO,IAAP;AACH,GA5ED;;;;CA9hBmB,CAAS,SAAT,CAAvB;;AA6mBA,UAAU,CAAC,KAAX,GAAmB,EAAnB;;;;;;;;;ACpoBA,IAAa,gBAAgB,GAAA,SAAA,gBAAA,GAAA,CAAA,CAA7B;;iBAQW,K,GAAA,SAAA,KAAA,CAAM,QAAN,EAAgB,OAAhB,EACX;AACQ,EAAA,QAAQ,CAAC,UAAT,GAAsB,UAAU,CAAC,YAAX,CAAwB,QAAQ,CAAC,IAAjC,EAAuC,OAAvC,CAAtB;AACH,C;;;;;;;;AAOL,gBAAA,CAAW,GAAX,GAAW,SAAA,GAAA,GACX;AACQ,EAAA,cAAc,CAAC,mBAAf,CAAmC,KAAnC,EAA0C,cAAc,CAAC,iBAAf,CAAiC,QAA3E;AACH,CAHL;;;;;;;;AAUA,gBAAA,CAAW,OAAX,GAAW,SAAA,OAAA,CAAQ,GAAR,EACX;AACQA,MAAM,GAAG,GAAG,GAAG,CACV,OADO,CACC,KADD,EACQ,GADR,EACY;AADZ,GAEP,OAFO,CAEC,KAFD,EAEQ,EAFR,EAEW;AAFX,GAGP,OAHO,CAGC,WAHD,EAGc,EAHd,CAAZA,CADR,CAIsC;;;AAGlC,MAAQ,GAAG,KAAK,GAAhB,EACA;AACI,WAAW,GAAX;AACC,GAHL,C;AAAA,OAKS,IAAI,GAAG,KAAK,EAAZ,EACT;AACI,aAAW,GAAX;AACC;;AAEL,SAAW,GAAX;AACC,CAnBL;;;;;;;;;AA2BA,gBAAA,CAAW,GAAX,GAAW,SAAA,GAAA,CAAI,QAAJ,EAAc,IAAd,EACX;;AAEQ,MAAI,CAAC,QAAQ,CAAC,IAAV,IAAkB,QAAQ,CAAC,IAAT,KAAkB,cAAc,CAAC,IAAf,CAAoB,GAA5D,EACJ;AACI,IAAA,IAAQ;AAEJ;AACH,GAPT,C;;;AAUQ,MAAI,QAAQ,CAAC,IAAT,CAAc,oBAAd,CAAmC,MAAnC,EAA2C,MAA3C,KAAsD,CAAtD,IACG,QAAQ,CAAC,IAAT,CAAc,oBAAd,CAAmC,MAAnC,EAA2C,MAA3C,KAAsD,CADzD,IAEG,QAAQ,CAAC,IAAT,CAAc,oBAAd,CAAmC,MAAnC,EAA2C,CAA3C,EAA8C,YAA9C,CAA2D,MAA3D,MAAuE,IAF9E,EAIJ;AACI,IAAA,IAAQ;AAEJ;AACH;;AAEDC,MAAI,MAAM,GAAG,CAAC,QAAQ,CAAC,SAAV,GAAsB,gBAAgB,CAAC,OAAjB,CAAyB,QAAQ,CAAC,GAAlC,CAAtB,GAA+D,EAA5EA;;AAEJ,MAAQ,QAAQ,CAAC,SAAjB,EACA;AACI,QAAQ,MAAM,KAAK,GAAnB,EACA;AACI,MAAA,MAAU,GAAG,EAAb;AACC;;AAED,QAAI,KAAK,OAAL,IAAgB,MAApB,EACJ;;AAEQ,UAAI,KAAK,OAAL,CAAa,MAAb,CAAoB,KAAK,OAAL,CAAa,MAAb,GAAsB,CAA1C,MAAiD,GAArD,EACJ;AACI,QAAA,MAAU,IAAI,GAAd;AACC;AACJ;AACJ,GArCT,C;;;AAwCQ,EAAA,MAAM,GAAG,MAAM,CAAC,OAAP,CAAe,KAAK,OAApB,EAA6B,EAA7B,CAAT,CAxCR,C;;AA2CQ,MAAI,MAAM,IAAI,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,MAAP,GAAgB,CAA9B,MAAqC,GAAnD,EACJ;AACI,IAAA,MAAU,IAAI,GAAd;AACC;;AAEDD,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAT,CAAc,oBAAd,CAAmC,MAAnC,CAAdA;AACAA,MAAM,QAAQ,GAAG,EAAjBA,CAjDR,C;;;AAqDQA,MAAM,SAAS,GAAA,UAAI,IAAJ,EAAU;AAErB,IAAA,QAAQ,CAAC,IAAI,CAAC,QAAL,CAAc,QAAf,CAAR,GAAmC,IAAI,CAAC,OAAxC;;AAEA,QAAI,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,MAAtB,KAAiC,KAAK,CAAC,MAA3C,EACJ;AACI,MAAA,gBAAoB,CAAC,KAArB,CAA2B,QAA3B,EAAqC,QAArC;AACA,MAAA,IAAQ;AACP;AACJ,GATDA;;AAWA,OAAKC,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,EAAE,CAApC,EACJ;AACQD,QAAM,QAAQ,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,YAAT,CAAsB,MAAtB,CAAjBA;AACAA,QAAM,GAAG,GAAG,MAAM,GAAG,QAArBA;AACAC,QAAI,MAAM,GAAG,KAAbA,CAHR,C;;;AAOQ,SAAKD,IAAM,IAAX,IAAmB,KAAK,SAAxB,EACJ;AACI,UAAU,cAAc,GAAG,KAAK,SAAL,CAAe,IAAf,CAA3B;;AAEI,UAAI,cAAc,CAAC,GAAf,KAAuB,GAA3B,EACJ;AACQ,QAAA,cAAc,CAAC,QAAf,CAAwB,QAAxB,GAAmC,QAAnC;;AACJ,YAAQ,cAAc,CAAC,OAAvB,EACA;AACQ,UAAA,SAAS,CAAC,cAAD,CAAT;AACH,SAHL,MAKA;AACI,UAAA,cAAkB,CAAC,iBAAnB,CAAqC,GAArC,CAAyC,SAAzC;AACC;;AACL,QAAA,MAAU,GAAG,IAAb;AACI;AACH;AACJ,KAzBT,C;;;;AA6BI,QAAQ,CAAC,MAAT,EACA;;AAEI,UAAU,OAAO,GAAG;AACZ,QAAA,WAAW,EAAE,QAAQ,CAAC,WADV;AAEZ,QAAA,QAAQ,EAAE,cAAc,CAAC,SAAf,CAAyB,KAFvB;AAGZ,QAAA,QAAQ,EAAE,MAAM,CAAC,MAAP,CACV;AAAA,UAAA,QAAA,EAAM;AAAN,SADU,EAEN,QAAQ,CAAC,QAAT,CAAkB,aAFZ,CAHE;AAOhB,QAAA,cAAkB,EAAE;AAPJ,OAApB;AAUA,WAAS,GAAT,CAAa,GAAb,EAAkB,OAAlB,EAA2B,SAA3B;AACC;AACJ;AACJ,CA/GL","sourcesContent":["import { Texture } from '@pixi/core';\nimport { Container } from '@pixi/display';\nimport { ObservablePoint, Point, Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { Sprite } from '@pixi/sprite';\nimport { removeItems, getResolutionOfUrl } from '@pixi/utils';\n\n/**\n * A BitmapText object will create a line or multiple lines of text using bitmap font.\n *\n * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\n * meaning that rendering is fast, and changing text has no performance implications.\n *\n * The primary disadvantage is that you need to preload the bitmap font assets, and thus the styling is set in stone.\n * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.\n *\n * To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.\n *\n * You can generate the fnt files using\n * http://www.angelcode.com/products/bmfont/ for Windows or\n * http://www.bmglyph.com/ for Mac.\n *\n * A BitmapText can only be created when the font is loaded.\n *\n * ```js\n * // in this case the font is in a file called 'desyrel.fnt'\n * let bitmapText = new PIXI.BitmapText(\"text using a fancy font!\", {font: \"35px Desyrel\", align: \"right\"});\n * ```\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class BitmapText extends Container\n{\n    /**\n     * @param {string} text - A string that you would like the text to display.\n     * @param {object} style - The style parameters.\n     * @param {string|object} style.font - The font descriptor for the object, can be passed as a string of form\n     *      \"24px FontName\" or \"FontName\" or as an object with explicit name/size properties.\n     * @param {string} [style.font.name] - The bitmap font id.\n     * @param {number} [style.font.size] - The size of the font in pixels, e.g. 24\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'), does not affect\n     *      single line text.\n     * @param {number} [style.tint=0xFFFFFF] - The tint color.\n     */\n    constructor(text, style = {})\n    {\n        super();\n\n        /**\n         * Private tracker for the width of the overall text\n         *\n         * @member {number}\n         * @private\n         */\n        this._textWidth = 0;\n\n        /**\n         * Private tracker for the height of the overall text\n         *\n         * @member {number}\n         * @private\n         */\n        this._textHeight = 0;\n\n        /**\n         * Private tracker for the letter sprite pool.\n         *\n         * @member {PIXI.Sprite[]}\n         * @private\n         */\n        this._glyphs = [];\n\n        /**\n         * Private tracker for the current style.\n         *\n         * @member {object}\n         * @private\n         */\n        this._font = {\n            tint: style.tint !== undefined ? style.tint : 0xFFFFFF,\n            align: style.align || 'left',\n            name: null,\n            size: 0,\n        };\n\n        /**\n         * Private tracker for the current font.\n         *\n         * @member {object}\n         * @private\n         */\n        this.font = style.font; // run font setter\n\n        /**\n         * Private tracker for the current text.\n         *\n         * @member {string}\n         * @private\n         */\n        this._text = text;\n\n        /**\n         * The max width of this bitmap text in pixels. If the text provided is longer than the\n         * value provided, line breaks will be automatically inserted in the last whitespace.\n         * Disable by setting value to 0\n         *\n         * @member {number}\n         * @private\n         */\n        this._maxWidth = 0;\n\n        /**\n         * The max line height. This is useful when trying to use the total height of the Text,\n         * ie: when trying to vertically align.\n         *\n         * @member {number}\n         * @private\n         */\n        this._maxLineHeight = 0;\n\n        /**\n         * Letter spacing. This is useful for setting the space between characters.\n         * @member {number}\n         * @private\n         */\n        this._letterSpacing = 0;\n\n        /**\n         * Text anchor. read-only\n         *\n         * @member {PIXI.ObservablePoint}\n         * @private\n         */\n        this._anchor = new ObservablePoint(() => { this.dirty = true; }, this, 0, 0);\n\n        /**\n         * The dirty state of this object.\n         *\n         * @member {boolean}\n         */\n        this.dirty = false;\n\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n         * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n         * The main disadvantage is movement of objects may appear less smooth.\n         * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.roundPixels = settings.ROUND_PIXELS;\n\n        this.updateText();\n    }\n\n    /**\n     * Renders text and updates it when needed\n     *\n     * @private\n     */\n    updateText()\n    {\n        const data = BitmapText.fonts[this._font.name];\n        const scale = this._font.size / data.size;\n        const pos = new Point();\n        const chars = [];\n        const lineWidths = [];\n        const text = this._text.replace(/(?:\\r\\n|\\r)/g, '\\n') || ' ';\n        const textLength = text.length;\n        const maxWidth = this._maxWidth * data.size / this._font.size;\n\n        let prevCharCode = null;\n        let lastLineWidth = 0;\n        let maxLineWidth = 0;\n        let line = 0;\n        let lastBreakPos = -1;\n        let lastBreakWidth = 0;\n        let spacesRemoved = 0;\n        let maxLineHeight = 0;\n\n        for (let i = 0; i < textLength; i++)\n        {\n            const charCode = text.charCodeAt(i);\n            const char = text.charAt(i);\n\n            if ((/(?:\\s)/).test(char))\n            {\n                lastBreakPos = i;\n                lastBreakWidth = lastLineWidth;\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                lineWidths.push(lastLineWidth);\n                maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n                ++line;\n                ++spacesRemoved;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                continue;\n            }\n\n            const charData = data.chars[charCode];\n\n            if (!charData)\n            {\n                continue;\n            }\n\n            if (prevCharCode && charData.kerning[prevCharCode])\n            {\n                pos.x += charData.kerning[prevCharCode];\n            }\n\n            chars.push({\n                texture: charData.texture,\n                line,\n                charCode,\n                position: new Point(pos.x + charData.xOffset + (this._letterSpacing / 2), pos.y + charData.yOffset),\n            });\n            pos.x += charData.xAdvance + this._letterSpacing;\n            lastLineWidth = pos.x;\n            maxLineHeight = Math.max(maxLineHeight, (charData.yOffset + charData.texture.height));\n            prevCharCode = charCode;\n\n            if (lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth)\n            {\n                ++spacesRemoved;\n                removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos);\n                i = lastBreakPos;\n                lastBreakPos = -1;\n\n                lineWidths.push(lastBreakWidth);\n                maxLineWidth = Math.max(maxLineWidth, lastBreakWidth);\n                line++;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n            }\n        }\n\n        const lastChar = text.charAt(text.length - 1);\n\n        if (lastChar !== '\\r' && lastChar !== '\\n')\n        {\n            if ((/(?:\\s)/).test(lastChar))\n            {\n                lastLineWidth = lastBreakWidth;\n            }\n\n            lineWidths.push(lastLineWidth);\n            maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n        }\n\n        const lineAlignOffsets = [];\n\n        for (let i = 0; i <= line; i++)\n        {\n            let alignOffset = 0;\n\n            if (this._font.align === 'right')\n            {\n                alignOffset = maxLineWidth - lineWidths[i];\n            }\n            else if (this._font.align === 'center')\n            {\n                alignOffset = (maxLineWidth - lineWidths[i]) / 2;\n            }\n\n            lineAlignOffsets.push(alignOffset);\n        }\n\n        const lenChars = chars.length;\n        const tint = this.tint;\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            let c = this._glyphs[i]; // get the next glyph sprite\n\n            if (c)\n            {\n                c.texture = chars[i].texture;\n            }\n            else\n            {\n                c = new Sprite(chars[i].texture);\n                c.roundPixels = this.roundPixels;\n                this._glyphs.push(c);\n            }\n\n            c.position.x = (chars[i].position.x + lineAlignOffsets[chars[i].line]) * scale;\n            c.position.y = chars[i].position.y * scale;\n            c.scale.x = c.scale.y = scale;\n            c.tint = tint;\n\n            if (!c.parent)\n            {\n                this.addChild(c);\n            }\n        }\n\n        // remove unnecessary children.\n        for (let i = lenChars; i < this._glyphs.length; ++i)\n        {\n            this.removeChild(this._glyphs[i]);\n        }\n\n        this._textWidth = maxLineWidth * scale;\n        this._textHeight = (pos.y + data.lineHeight) * scale;\n\n        // apply anchor\n        if (this.anchor.x !== 0 || this.anchor.y !== 0)\n        {\n            for (let i = 0; i < lenChars; i++)\n            {\n                this._glyphs[i].x -= this._textWidth * this.anchor.x;\n                this._glyphs[i].y -= this._textHeight * this.anchor.y;\n            }\n        }\n        this._maxLineHeight = maxLineHeight * scale;\n    }\n\n    /**\n     * Updates the transform of this object\n     *\n     * @private\n     */\n    updateTransform()\n    {\n        this.validate();\n        this.containerUpdateTransform();\n    }\n\n    /**\n     * Validates text before calling parent's getLocalBounds\n     *\n     * @return {PIXI.Rectangle} The rectangular bounding area\n     */\n    getLocalBounds()\n    {\n        this.validate();\n\n        return super.getLocalBounds();\n    }\n\n    /**\n     * Updates text when needed\n     *\n     * @private\n     */\n    validate()\n    {\n        if (this.dirty)\n        {\n            this.updateText();\n            this.dirty = false;\n        }\n    }\n\n    /**\n     * The tint of the BitmapText object.\n     *\n     * @member {number}\n     */\n    get tint()\n    {\n        return this._font.tint;\n    }\n\n    set tint(value) // eslint-disable-line require-jsdoc\n    {\n        this._font.tint = (typeof value === 'number' && value >= 0) ? value : 0xFFFFFF;\n\n        this.dirty = true;\n    }\n\n    /**\n     * The alignment of the BitmapText object.\n     *\n     * @member {string}\n     * @default 'left'\n     */\n    get align()\n    {\n        return this._font.align;\n    }\n\n    set align(value) // eslint-disable-line require-jsdoc\n    {\n        this._font.align = value || 'left';\n\n        this.dirty = true;\n    }\n\n    /**\n     * The anchor sets the origin point of the text.\n     *\n     * The default is `(0,0)`, this means the text's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n     *\n     * @member {PIXI.Point | number}\n     */\n    get anchor()\n    {\n        return this._anchor;\n    }\n\n    set anchor(value) // eslint-disable-line require-jsdoc\n    {\n        if (typeof value === 'number')\n        {\n            this._anchor.set(value);\n        }\n        else\n        {\n            this._anchor.copyFrom(value);\n        }\n    }\n\n    /**\n     * The font descriptor of the BitmapText object.\n     *\n     * @member {object}\n     */\n    get font()\n    {\n        return this._font;\n    }\n\n    set font(value) // eslint-disable-line require-jsdoc\n    {\n        if (!value)\n        {\n            return;\n        }\n\n        if (typeof value === 'string')\n        {\n            value = value.split(' ');\n\n            this._font.name = value.length === 1 ? value[0] : value.slice(1).join(' ');\n            this._font.size = value.length >= 2 ? parseInt(value[0], 10) : BitmapText.fonts[this._font.name].size;\n        }\n        else\n        {\n            this._font.name = value.name;\n            this._font.size = typeof value.size === 'number' ? value.size : parseInt(value.size, 10);\n        }\n\n        this.dirty = true;\n    }\n\n    /**\n     * The text of the BitmapText object.\n     *\n     * @member {string}\n     */\n    get text()\n    {\n        return this._text;\n    }\n\n    set text(text) // eslint-disable-line require-jsdoc\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting the value to 0.\n     *\n     * @member {number}\n     */\n    get maxWidth()\n    {\n        return this._maxWidth;\n    }\n\n    set maxWidth(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._maxWidth === value)\n        {\n            return;\n        }\n        this._maxWidth = value;\n        this.dirty = true;\n    }\n\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * i.e. when trying to vertically align.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get maxLineHeight()\n    {\n        this.validate();\n\n        return this._maxLineHeight;\n    }\n\n    /**\n     * The width of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get textWidth()\n    {\n        this.validate();\n\n        return this._textWidth;\n    }\n\n    /**\n     * Additional space between characters.\n     *\n     * @member {number}\n     */\n    get letterSpacing()\n    {\n        return this._letterSpacing;\n    }\n\n    set letterSpacing(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._letterSpacing !== value)\n        {\n            this._letterSpacing = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The height of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get textHeight()\n    {\n        this.validate();\n\n        return this._textHeight;\n    }\n\n    /**\n     * Register a bitmap font with data and a texture.\n     *\n     * @static\n     * @param {XMLDocument} xml - The XML document data.\n     * @param {Object.<string, PIXI.Texture>|PIXI.Texture|PIXI.Texture[]} textures - List of textures for each page.\n     *  If providing an object, the key is the `<page>` element's `file` attribute in the FNT file.\n     * @return {Object} Result font object with font, size, lineHeight and char fields.\n     */\n    static registerFont(xml, textures)\n    {\n        const data = {};\n        const info = xml.getElementsByTagName('info')[0];\n        const common = xml.getElementsByTagName('common')[0];\n        const pages = xml.getElementsByTagName('page');\n        const res = getResolutionOfUrl(pages[0].getAttribute('file'), settings.RESOLUTION);\n        const pagesTextures = {};\n\n        data.font = info.getAttribute('face');\n        data.size = parseInt(info.getAttribute('size'), 10);\n        data.lineHeight = parseInt(common.getAttribute('lineHeight'), 10) / res;\n        data.chars = {};\n\n        // Single texture, convert to list\n        if (textures instanceof Texture)\n        {\n            textures = [textures];\n        }\n\n        // Convert the input Texture, Textures or object\n        // into a page Texture lookup by \"id\"\n        for (let i = 0; i < pages.length; i++)\n        {\n            const id = pages[i].getAttribute('id');\n            const file = pages[i].getAttribute('file');\n\n            pagesTextures[id] = textures instanceof Array ? textures[i] : textures[file];\n        }\n\n        // parse letters\n        const letters = xml.getElementsByTagName('char');\n\n        for (let i = 0; i < letters.length; i++)\n        {\n            const letter = letters[i];\n            const charCode = parseInt(letter.getAttribute('id'), 10);\n            const page = letter.getAttribute('page') || 0;\n            const textureRect = new Rectangle(\n                (parseInt(letter.getAttribute('x'), 10) / res) + (pagesTextures[page].frame.x / res),\n                (parseInt(letter.getAttribute('y'), 10) / res) + (pagesTextures[page].frame.y / res),\n                parseInt(letter.getAttribute('width'), 10) / res,\n                parseInt(letter.getAttribute('height'), 10) / res\n            );\n\n            data.chars[charCode] = {\n                xOffset: parseInt(letter.getAttribute('xoffset'), 10) / res,\n                yOffset: parseInt(letter.getAttribute('yoffset'), 10) / res,\n                xAdvance: parseInt(letter.getAttribute('xadvance'), 10) / res,\n                kerning: {},\n                texture: new Texture(pagesTextures[page].baseTexture, textureRect),\n                page,\n            };\n        }\n\n        // parse kernings\n        const kernings = xml.getElementsByTagName('kerning');\n\n        for (let i = 0; i < kernings.length; i++)\n        {\n            const kerning = kernings[i];\n            const first = parseInt(kerning.getAttribute('first'), 10) / res;\n            const second = parseInt(kerning.getAttribute('second'), 10) / res;\n            const amount = parseInt(kerning.getAttribute('amount'), 10) / res;\n\n            if (data.chars[second])\n            {\n                data.chars[second].kerning[first] = amount;\n            }\n        }\n\n        // I'm leaving this as a temporary fix so we can test the bitmap fonts in v3\n        // but it's very likely to change\n        BitmapText.fonts[data.font] = data;\n\n        return data;\n    }\n}\n\nBitmapText.fonts = {};\n","import { LoaderResource } from '@pixi/loaders';\nimport { BitmapText } from './BitmapText';\n\n/**\n * {@link PIXI.Loader Loader} middleware for loading\n * bitmap-based fonts suitable for using with {@link PIXI.BitmapText}.\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nexport class BitmapFontLoader\n{\n    /**\n     * Register a BitmapText font from loader resource.\n     *\n     * @param {PIXI.LoaderResource} resource - Loader resource.\n     * @param {PIXI.Texture} texture - Reference to texture.\n     */\n    static parse(resource, texture)\n    {\n        resource.bitmapFont = BitmapText.registerFont(resource.data, texture);\n    }\n\n    /**\n     * Called when the plugin is installed.\n     *\n     * @see PIXI.Loader.registerPlugin\n     */\n    static add()\n    {\n        LoaderResource.setExtensionXhrType('fnt', LoaderResource.XHR_RESPONSE_TYPE.DOCUMENT);\n    }\n\n    /**\n     * Replacement for NodeJS's path.dirname\n     * @private\n     * @param {string} url Path to get directory for\n     */\n    static dirname(url)\n    {\n        const dir = url\n            .replace(/\\\\/g, '/') // convert windows notation to UNIX notation, URL-safe because it's a forbidden character\n            .replace(/\\/$/, '') // replace trailing slash\n            .replace(/\\/[^\\/]*$/, ''); // remove everything after the last\n\n        // File request is relative, use current directory\n        if (dir === url)\n        {\n            return '.';\n        }\n        // Started with a slash\n        else if (dir === '')\n        {\n            return '/';\n        }\n\n        return dir;\n    }\n\n    /**\n     * Called after a resource is loaded.\n     * @see PIXI.Loader.loaderMiddleware\n     * @param {PIXI.LoaderResource} resource\n     * @param {function} next\n     */\n    static use(resource, next)\n    {\n        // skip if no data or not xml data\n        if (!resource.data || resource.type !== LoaderResource.TYPE.XML)\n        {\n            next();\n\n            return;\n        }\n\n        // skip if not bitmap font data, using some silly duck-typing\n        if (resource.data.getElementsByTagName('page').length === 0\n            || resource.data.getElementsByTagName('info').length === 0\n            || resource.data.getElementsByTagName('info')[0].getAttribute('face') === null\n        )\n        {\n            next();\n\n            return;\n        }\n\n        let xmlUrl = !resource.isDataUrl ? BitmapFontLoader.dirname(resource.url) : '';\n\n        if (resource.isDataUrl)\n        {\n            if (xmlUrl === '.')\n            {\n                xmlUrl = '';\n            }\n\n            if (this.baseUrl && xmlUrl)\n            {\n                // if baseurl has a trailing slash then add one to xmlUrl so the replace works below\n                if (this.baseUrl.charAt(this.baseUrl.length - 1) === '/')\n                {\n                    xmlUrl += '/';\n                }\n            }\n        }\n\n        // remove baseUrl from xmlUrl\n        xmlUrl = xmlUrl.replace(this.baseUrl, '');\n\n        // if there is an xmlUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n        if (xmlUrl && xmlUrl.charAt(xmlUrl.length - 1) !== '/')\n        {\n            xmlUrl += '/';\n        }\n\n        const pages = resource.data.getElementsByTagName('page');\n        const textures = {};\n\n        // Handle completed, when the number of textures\n        // load is the same number as references in the fnt file\n        const completed = (page) =>\n        {\n            textures[page.metadata.pageFile] = page.texture;\n\n            if (Object.keys(textures).length === pages.length)\n            {\n                BitmapFontLoader.parse(resource, textures);\n                next();\n            }\n        };\n\n        for (let i = 0; i < pages.length; ++i)\n        {\n            const pageFile = pages[i].getAttribute('file');\n            const url = xmlUrl + pageFile;\n            let exists = false;\n\n            // incase the image is loaded outside\n            // using the same loader, resource will be available\n            for (const name in this.resources)\n            {\n                const bitmapResource = this.resources[name];\n\n                if (bitmapResource.url === url)\n                {\n                    bitmapResource.metadata.pageFile = pageFile;\n                    if (bitmapResource.texture)\n                    {\n                        completed(bitmapResource);\n                    }\n                    else\n                    {\n                        bitmapResource.onAfterMiddleware.add(completed);\n                    }\n                    exists = true;\n                    break;\n                }\n            }\n\n            // texture is not loaded, we'll attempt to add\n            // it to the load and add the texture to the list\n            if (!exists)\n            {\n                // Standard loading options for images\n                const options = {\n                    crossOrigin: resource.crossOrigin,\n                    loadType: LoaderResource.LOAD_TYPE.IMAGE,\n                    metadata: Object.assign(\n                        { pageFile },\n                        resource.metadata.imageMetadata\n                    ),\n                    parentResource: resource,\n                };\n\n                this.add(url, options, completed);\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}