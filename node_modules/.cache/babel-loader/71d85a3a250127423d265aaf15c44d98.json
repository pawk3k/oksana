{"ast":null,"code":"/*!\n * @pixi/mixin-cache-as-bitmap - v5.2.1\n * Compiled Tue, 28 Jan 2020 23:33:11 UTC\n *\n * @pixi/mixin-cache-as-bitmap is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { RenderTexture, BaseTexture, Texture } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { DisplayObject } from '@pixi/display';\nimport { Matrix } from '@pixi/math';\nimport { uid } from '@pixi/utils';\nimport { settings } from '@pixi/settings';\n\nvar _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = false; // figured theres no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n\n/**\n * @class\n * @ignore\n */\n\nvar CacheData = function CacheData() {\n  this.textureCacheId = null;\n  this.originalRender = null;\n  this.originalRenderCanvas = null;\n  this.originalCalculateBounds = null;\n  this.originalGetLocalBounds = null;\n  this.originalUpdateTransform = null;\n  this.originalHitTest = null;\n  this.originalDestroy = null;\n  this.originalMask = null;\n  this.originalFilterArea = null;\n  this.sprite = null;\n};\n\nObject.defineProperties(DisplayObject.prototype, {\n  /**\n   * Set this to true if you want this display object to be cached as a bitmap.\n   * This basically takes a snap shot of the display object as it is at that moment. It can\n   * provide a performance benefit for complex static displayObjects.\n   * To remove simply set this property to `false`\n   *\n   * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n   * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  cacheAsBitmap: {\n    get: function get() {\n      return this._cacheAsBitmap;\n    },\n    set: function set(value) {\n      if (this._cacheAsBitmap === value) {\n        return;\n      }\n\n      this._cacheAsBitmap = value;\n      var data;\n\n      if (value) {\n        if (!this._cacheData) {\n          this._cacheData = new CacheData();\n        }\n\n        data = this._cacheData;\n        data.originalRender = this.render;\n        data.originalRenderCanvas = this.renderCanvas;\n        data.originalUpdateTransform = this.updateTransform;\n        data.originalCalculateBounds = this.calculateBounds;\n        data.originalGetLocalBounds = this.getLocalBounds;\n        data.originalDestroy = this.destroy;\n        data.originalContainsPoint = this.containsPoint;\n        data.originalMask = this._mask;\n        data.originalFilterArea = this.filterArea;\n        this.render = this._renderCached;\n        this.renderCanvas = this._renderCachedCanvas;\n        this.destroy = this._cacheAsBitmapDestroy;\n      } else {\n        data = this._cacheData;\n\n        if (data.sprite) {\n          this._destroyCachedDisplayObject();\n        }\n\n        this.render = data.originalRender;\n        this.renderCanvas = data.originalRenderCanvas;\n        this.calculateBounds = data.originalCalculateBounds;\n        this.getLocalBounds = data.originalGetLocalBounds;\n        this.destroy = data.originalDestroy;\n        this.updateTransform = data.originalUpdateTransform;\n        this.containsPoint = data.originalContainsPoint;\n        this._mask = data.originalMask;\n        this.filterArea = data.originalFilterArea;\n      }\n    }\n  }\n});\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @function _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\n\nDisplayObject.prototype._renderCached = function _renderCached(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n\n  this._initCachedDisplayObject(renderer);\n\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n\n  this._cacheData.sprite._render(renderer);\n};\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @function _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\n\n\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer) {\n  if (this._cacheData && this._cacheData.sprite) {\n    return;\n  } // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n\n\n  var cacheAlpha = this.alpha;\n  this.alpha = 1; // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n\n  renderer.batch.flush(); // this.filters= [];\n  // next we find the dimensions of the untransformed object\n  // this function also calls updatetransform on all its children as part of the measuring.\n  // This means we don't need to update the transform again in this function\n  // TODO pass an object to clone too? saves having to create a new one each time!\n\n  var bounds = this.getLocalBounds().clone(); // add some padding!\n\n  if (this.filters) {\n    var padding = this.filters[0].padding;\n    bounds.pad(padding);\n  }\n\n  bounds.ceil(settings.RESOLUTION); // for now we cache the current renderTarget that the WebGL renderer is currently using.\n  // this could be more elegant..\n\n  var cachedRenderTexture = renderer.renderTexture.current;\n  var cachedSourceFrame = renderer.renderTexture.sourceFrame;\n  var cachedProjectionTransform = renderer.projection.transform; // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n  // const stack = renderer.filterManager.filterStack;\n  // this renderTexture will be used to store the cached DisplayObject\n\n  var renderTexture = RenderTexture.create(bounds.width, bounds.height);\n  var textureCacheId = \"cacheAsBitmap_\" + uid();\n  this._cacheData.textureCacheId = textureCacheId;\n  BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  Texture.addToCache(renderTexture, textureCacheId); // need to set //\n\n  var m = _tempMatrix;\n  m.tx = -bounds.x;\n  m.ty = -bounds.y; // reset\n\n  this.transform.worldTransform.identity(); // set all properties to there original so we can render to a texture\n\n  this.render = this._cacheData.originalRender;\n  renderer.render(this, renderTexture, true, m, true); // now restore the state be setting the new properties\n\n  renderer.projection.transform = cachedProjectionTransform;\n  renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame); // renderer.filterManager.filterStack = stack;\n\n  this.render = this._renderCached; // the rest is the same as for Canvas\n\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null; // create our cached sprite\n\n  var cachedSprite = new Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1; // restore the transform of the cached sprite to avoid the nasty flicker..\n\n  if (!this.parent) {\n    this.parent = renderer._tempDisplayObjectParent;\n    this.updateTransform();\n    this.parent = null;\n  } else {\n    this.updateTransform();\n  } // map the hit test..\n\n\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @function _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\n\n\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer) {\n  if (!this.visible || this.worldAlpha <= 0 || !this.renderable) {\n    return;\n  }\n\n  this._initCachedDisplayObjectCanvas(renderer);\n\n  this._cacheData.sprite.worldAlpha = this.worldAlpha;\n\n  this._cacheData.sprite._renderCanvas(renderer);\n}; // TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @function _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\n\n\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer) {\n  if (this._cacheData && this._cacheData.sprite) {\n    return;\n  } // get bounds actually transforms the object for us already!\n\n\n  var bounds = this.getLocalBounds();\n  var cacheAlpha = this.alpha;\n  this.alpha = 1;\n  var cachedRenderTarget = renderer.context;\n  bounds.ceil(settings.RESOLUTION);\n  var renderTexture = RenderTexture.create(bounds.width, bounds.height);\n  var textureCacheId = \"cacheAsBitmap_\" + uid();\n  this._cacheData.textureCacheId = textureCacheId;\n  BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n  Texture.addToCache(renderTexture, textureCacheId); // need to set //\n\n  var m = _tempMatrix;\n  this.transform.localTransform.copyTo(m);\n  m.invert();\n  m.tx -= bounds.x;\n  m.ty -= bounds.y; // m.append(this.transform.worldTransform.)\n  // set all properties to there original so we can render to a texture\n\n  this.renderCanvas = this._cacheData.originalRenderCanvas; // renderTexture.render(this, m, true);\n\n  renderer.render(this, renderTexture, true, m, false); // now restore the state be setting the new properties\n\n  renderer.context = cachedRenderTarget;\n  this.renderCanvas = this._renderCachedCanvas; // the rest is the same as for WebGL\n\n  this.updateTransform = this.displayObjectUpdateTransform;\n  this.calculateBounds = this._calculateCachedBounds;\n  this.getLocalBounds = this._getCachedLocalBounds;\n  this._mask = null;\n  this.filterArea = null; // create our cached sprite\n\n  var cachedSprite = new Sprite(renderTexture);\n  cachedSprite.transform.worldTransform = this.transform.worldTransform;\n  cachedSprite.anchor.x = -(bounds.x / bounds.width);\n  cachedSprite.anchor.y = -(bounds.y / bounds.height);\n  cachedSprite.alpha = cacheAlpha;\n  cachedSprite._bounds = this._bounds;\n  this._cacheData.sprite = cachedSprite;\n  this.transform._parentID = -1; // restore the transform of the cached sprite to avoid the nasty flicker..\n\n  if (!this.parent) {\n    this.parent = renderer._tempDisplayObjectParent;\n    this.updateTransform();\n    this.parent = null;\n  } else {\n    this.updateTransform();\n  } // map the hit test..\n\n\n  this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n */\n\n\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds() {\n  this._bounds.clear();\n\n  this._cacheData.sprite.transform._worldID = this.transform._worldID;\n\n  this._cacheData.sprite._calculateBounds();\n\n  this._lastBoundsID = this._boundsID;\n};\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @return {Rectangle} The local bounds.\n */\n\n\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds() {\n  return this._cacheData.sprite.getLocalBounds();\n};\n/**\n * Destroys the cached sprite.\n *\n * @private\n */\n\n\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject() {\n  this._cacheData.sprite._texture.destroy(true);\n\n  this._cacheData.sprite = null;\n  BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n  Texture.removeFromCache(this._cacheData.textureCacheId);\n  this._cacheData.textureCacheId = null;\n};\n/**\n * Destroys the cached object.\n *\n * @private\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\n\n\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options) {\n  this.cacheAsBitmap = false;\n  this.destroy(options);\n};","map":{"version":3,"sources":["../src/index.js"],"names":["const","let"],"mappings":"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","sourcesContent":["import { Texture, BaseTexture, RenderTexture } from '@pixi/core';\nimport { Sprite } from '@pixi/sprite';\nimport { DisplayObject } from '@pixi/display';\nimport { Matrix } from '@pixi/math';\nimport { uid } from '@pixi/utils';\nimport { settings } from '@pixi/settings';\n\nconst _tempMatrix = new Matrix();\n\nDisplayObject.prototype._cacheAsBitmap = false;\nDisplayObject.prototype._cacheData = false;\n\n// figured theres no point adding ALL the extra variables to prototype.\n// this model can hold the information needed. This can also be generated on demand as\n// most objects are not cached as bitmaps.\n/**\n * @class\n * @ignore\n */\nclass CacheData\n{\n    constructor()\n    {\n        this.textureCacheId = null;\n\n        this.originalRender = null;\n        this.originalRenderCanvas = null;\n        this.originalCalculateBounds = null;\n        this.originalGetLocalBounds = null;\n\n        this.originalUpdateTransform = null;\n        this.originalHitTest = null;\n        this.originalDestroy = null;\n        this.originalMask = null;\n        this.originalFilterArea = null;\n        this.sprite = null;\n    }\n}\n\nObject.defineProperties(DisplayObject.prototype, {\n    /**\n     * Set this to true if you want this display object to be cached as a bitmap.\n     * This basically takes a snap shot of the display object as it is at that moment. It can\n     * provide a performance benefit for complex static displayObjects.\n     * To remove simply set this property to `false`\n     *\n     * IMPORTANT GOTCHA - Make sure that all your textures are preloaded BEFORE setting this property to true\n     * as it will take a snapshot of what is currently there. If the textures have not loaded then they will not appear.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    cacheAsBitmap: {\n        get()\n        {\n            return this._cacheAsBitmap;\n        },\n        set(value)\n        {\n            if (this._cacheAsBitmap === value)\n            {\n                return;\n            }\n\n            this._cacheAsBitmap = value;\n\n            let data;\n\n            if (value)\n            {\n                if (!this._cacheData)\n                {\n                    this._cacheData = new CacheData();\n                }\n\n                data = this._cacheData;\n\n                data.originalRender = this.render;\n                data.originalRenderCanvas = this.renderCanvas;\n\n                data.originalUpdateTransform = this.updateTransform;\n                data.originalCalculateBounds = this.calculateBounds;\n                data.originalGetLocalBounds = this.getLocalBounds;\n\n                data.originalDestroy = this.destroy;\n\n                data.originalContainsPoint = this.containsPoint;\n\n                data.originalMask = this._mask;\n                data.originalFilterArea = this.filterArea;\n\n                this.render = this._renderCached;\n                this.renderCanvas = this._renderCachedCanvas;\n\n                this.destroy = this._cacheAsBitmapDestroy;\n            }\n            else\n            {\n                data = this._cacheData;\n\n                if (data.sprite)\n                {\n                    this._destroyCachedDisplayObject();\n                }\n\n                this.render = data.originalRender;\n                this.renderCanvas = data.originalRenderCanvas;\n                this.calculateBounds = data.originalCalculateBounds;\n                this.getLocalBounds = data.originalGetLocalBounds;\n\n                this.destroy = data.originalDestroy;\n\n                this.updateTransform = data.originalUpdateTransform;\n                this.containsPoint = data.originalContainsPoint;\n\n                this._mask = data.originalMask;\n                this.filterArea = data.originalFilterArea;\n            }\n        },\n    },\n});\n\n/**\n * Renders a cached version of the sprite with WebGL\n *\n * @private\n * @function _renderCached\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCached = function _renderCached(renderer)\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObject(renderer);\n\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    this._cacheData.sprite._render(renderer);\n};\n\n/**\n * Prepares the WebGL renderer to cache the sprite\n *\n * @private\n * @function _initCachedDisplayObject\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObject = function _initCachedDisplayObject(renderer)\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // make sure alpha is set to 1 otherwise it will get rendered as invisible!\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    // first we flush anything left in the renderer (otherwise it would get rendered to the cached texture)\n    renderer.batch.flush();\n    // this.filters= [];\n\n    // next we find the dimensions of the untransformed object\n    // this function also calls updatetransform on all its children as part of the measuring.\n    // This means we don't need to update the transform again in this function\n    // TODO pass an object to clone too? saves having to create a new one each time!\n    const bounds = this.getLocalBounds().clone();\n\n    // add some padding!\n    if (this.filters)\n    {\n        const padding = this.filters[0].padding;\n\n        bounds.pad(padding);\n    }\n\n    bounds.ceil(settings.RESOLUTION);\n\n    // for now we cache the current renderTarget that the WebGL renderer is currently using.\n    // this could be more elegant..\n    const cachedRenderTexture = renderer.renderTexture.current;\n    const cachedSourceFrame = renderer.renderTexture.sourceFrame;\n    const cachedProjectionTransform = renderer.projection.transform;\n\n    // We also store the filter stack - I will definitely look to change how this works a little later down the line.\n    // const stack = renderer.filterManager.filterStack;\n\n    // this renderTexture will be used to store the cached DisplayObject\n    const renderTexture = RenderTexture.create(bounds.width, bounds.height);\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    m.tx = -bounds.x;\n    m.ty = -bounds.y;\n\n    // reset\n    this.transform.worldTransform.identity();\n\n    // set all properties to there original so we can render to a texture\n    this.render = this._cacheData.originalRender;\n\n    renderer.render(this, renderTexture, true, m, true);\n\n    // now restore the state be setting the new properties\n    renderer.projection.transform = cachedProjectionTransform;\n    renderer.renderTexture.bind(cachedRenderTexture, cachedSourceFrame);\n\n    // renderer.filterManager.filterStack = stack;\n\n    this.render = this._renderCached;\n    // the rest is the same as for Canvas\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = renderer._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Renders a cached version of the sprite with canvas\n *\n * @private\n * @function _renderCachedCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._renderCachedCanvas = function _renderCachedCanvas(renderer)\n{\n    if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n    {\n        return;\n    }\n\n    this._initCachedDisplayObjectCanvas(renderer);\n\n    this._cacheData.sprite.worldAlpha = this.worldAlpha;\n    this._cacheData.sprite._renderCanvas(renderer);\n};\n\n// TODO this can be the same as the WebGL version.. will need to do a little tweaking first though..\n/**\n * Prepares the Canvas renderer to cache the sprite\n *\n * @private\n * @function _initCachedDisplayObjectCanvas\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Renderer} renderer - the WebGL renderer\n */\nDisplayObject.prototype._initCachedDisplayObjectCanvas = function _initCachedDisplayObjectCanvas(renderer)\n{\n    if (this._cacheData && this._cacheData.sprite)\n    {\n        return;\n    }\n\n    // get bounds actually transforms the object for us already!\n    const bounds = this.getLocalBounds();\n\n    const cacheAlpha = this.alpha;\n\n    this.alpha = 1;\n\n    const cachedRenderTarget = renderer.context;\n\n    bounds.ceil(settings.RESOLUTION);\n\n    const renderTexture = RenderTexture.create(bounds.width, bounds.height);\n\n    const textureCacheId = `cacheAsBitmap_${uid()}`;\n\n    this._cacheData.textureCacheId = textureCacheId;\n\n    BaseTexture.addToCache(renderTexture.baseTexture, textureCacheId);\n    Texture.addToCache(renderTexture, textureCacheId);\n\n    // need to set //\n    const m = _tempMatrix;\n\n    this.transform.localTransform.copyTo(m);\n    m.invert();\n\n    m.tx -= bounds.x;\n    m.ty -= bounds.y;\n\n    // m.append(this.transform.worldTransform.)\n    // set all properties to there original so we can render to a texture\n    this.renderCanvas = this._cacheData.originalRenderCanvas;\n\n    // renderTexture.render(this, m, true);\n    renderer.render(this, renderTexture, true, m, false);\n\n    // now restore the state be setting the new properties\n    renderer.context = cachedRenderTarget;\n\n    this.renderCanvas = this._renderCachedCanvas;\n    // the rest is the same as for WebGL\n    this.updateTransform = this.displayObjectUpdateTransform;\n    this.calculateBounds = this._calculateCachedBounds;\n    this.getLocalBounds = this._getCachedLocalBounds;\n\n    this._mask = null;\n    this.filterArea = null;\n\n    // create our cached sprite\n    const cachedSprite = new Sprite(renderTexture);\n\n    cachedSprite.transform.worldTransform = this.transform.worldTransform;\n    cachedSprite.anchor.x = -(bounds.x / bounds.width);\n    cachedSprite.anchor.y = -(bounds.y / bounds.height);\n    cachedSprite.alpha = cacheAlpha;\n    cachedSprite._bounds = this._bounds;\n\n    this._cacheData.sprite = cachedSprite;\n\n    this.transform._parentID = -1;\n    // restore the transform of the cached sprite to avoid the nasty flicker..\n    if (!this.parent)\n    {\n        this.parent = renderer._tempDisplayObjectParent;\n        this.updateTransform();\n        this.parent = null;\n    }\n    else\n    {\n        this.updateTransform();\n    }\n\n    // map the hit test..\n    this.containsPoint = cachedSprite.containsPoint.bind(cachedSprite);\n};\n\n/**\n * Calculates the bounds of the cached sprite\n *\n * @private\n */\nDisplayObject.prototype._calculateCachedBounds = function _calculateCachedBounds()\n{\n    this._bounds.clear();\n    this._cacheData.sprite.transform._worldID = this.transform._worldID;\n    this._cacheData.sprite._calculateBounds();\n    this._lastBoundsID = this._boundsID;\n};\n\n/**\n * Gets the bounds of the cached sprite.\n *\n * @private\n * @return {Rectangle} The local bounds.\n */\nDisplayObject.prototype._getCachedLocalBounds = function _getCachedLocalBounds()\n{\n    return this._cacheData.sprite.getLocalBounds();\n};\n\n/**\n * Destroys the cached sprite.\n *\n * @private\n */\nDisplayObject.prototype._destroyCachedDisplayObject = function _destroyCachedDisplayObject()\n{\n    this._cacheData.sprite._texture.destroy(true);\n    this._cacheData.sprite = null;\n\n    BaseTexture.removeFromCache(this._cacheData.textureCacheId);\n    Texture.removeFromCache(this._cacheData.textureCacheId);\n\n    this._cacheData.textureCacheId = null;\n};\n\n/**\n * Destroys the cached object.\n *\n * @private\n * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n *  have been set to that value.\n *  Used when destroying containers, see the Container.destroy method.\n */\nDisplayObject.prototype._cacheAsBitmapDestroy = function _cacheAsBitmapDestroy(options)\n{\n    this.cacheAsBitmap = false;\n    this.destroy(options);\n};\n"]},"metadata":{},"sourceType":"module"}