{"ast":null,"code":"/*!\n * @pixi/accessibility - v5.2.1\n * Compiled Tue, 28 Jan 2020 23:33:11 UTC\n *\n * @pixi/accessibility is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { isMobile, removeItems } from '@pixi/utils';\nimport { DisplayObject } from '@pixi/display';\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.accessibility.AccessibilityManager}.\n *\n * @private\n * @function accessibleTarget\n * @memberof PIXI.accessibility\n * @type {Object}\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          MyObject.prototype,\n *          PIXI.accessibility.accessibleTarget\n *      );\n */\n\nvar accessibleTarget = {\n  /**\n   *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n   *   shadow div with attributes set\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessible: false,\n\n  /**\n   * Sets the title attribute of the shadow div\n   * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n   *\n   * @member {?string}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessibleTitle: null,\n\n  /**\n   * Sets the aria-label attribute of the shadow div\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessibleHint: null,\n\n  /**\n   * @member {number}\n   * @memberof PIXI.DisplayObject#\n   * @private\n   * @todo Needs docs.\n   */\n  tabIndex: 0,\n\n  /**\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @todo Needs docs.\n   */\n  _accessibleActive: false,\n\n  /**\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @todo Needs docs.\n   */\n  _accessibleDiv: false,\n\n  /**\n   * Specify the type of div the accessible layer is. Screen readers treat the element differently\n   * depending on this type. Defaults to button.\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   * @default 'button'\n   */\n  accessibleType: 'button',\n\n  /**\n   * Specify the pointer-events the accessible div will use\n   * Defaults to auto.\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   * @default 'auto'\n   */\n  accessiblePointerEvents: 'auto',\n\n  /**\n   * Setting to false will prevent any children inside this container to\n   * be accessible. Defaults to true.\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @default true\n   */\n  accessibleChildren: true\n}; // add some extra variables to the container..\n\nDisplayObject.mixin(accessibleTarget);\nvar KEY_CODE_TAB = 9;\nvar DIV_TOUCH_SIZE = 100;\nvar DIV_TOUCH_POS_X = 0;\nvar DIV_TOUCH_POS_Y = 0;\nvar DIV_TOUCH_ZINDEX = 2;\nvar DIV_HOOK_SIZE = 1;\nvar DIV_HOOK_POS_X = -1000;\nvar DIV_HOOK_POS_Y = -1000;\nvar DIV_HOOK_ZINDEX = 2;\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n *\n * @class\n * @memberof PIXI.accessibility\n */\n\nvar AccessibilityManager = function AccessibilityManager(renderer) {\n  /**\n   * @type {?HTMLElement}\n   * @private\n   */\n  this._hookDiv = null;\n\n  if (isMobile.tablet || isMobile.phone) {\n    this.createTouchHook();\n  } // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n\n\n  var div = document.createElement('div');\n  div.style.width = DIV_TOUCH_SIZE + \"px\";\n  div.style.height = DIV_TOUCH_SIZE + \"px\";\n  div.style.position = 'absolute';\n  div.style.top = DIV_TOUCH_POS_X + \"px\";\n  div.style.left = DIV_TOUCH_POS_Y + \"px\";\n  div.style.zIndex = DIV_TOUCH_ZINDEX;\n  /**\n   * This is the dom element that will sit over the PixiJS element. This is where the div overlays will go.\n   *\n   * @type {HTMLElement}\n   * @private\n   */\n\n  this.div = div;\n  /**\n   * A simple pool for storing divs.\n   *\n   * @type {*}\n   * @private\n   */\n\n  this.pool = [];\n  /**\n   * This is a tick used to check if an object is no longer being rendered.\n   *\n   * @type {Number}\n   * @private\n   */\n\n  this.renderId = 0;\n  /**\n   * Setting this to true will visually show the divs.\n   *\n   * @type {boolean}\n   */\n\n  this.debug = false;\n  /**\n   * The renderer this accessibility manager works for.\n   *\n   * @member {PIXI.AbstractRenderer}\n   */\n\n  this.renderer = renderer;\n  /**\n   * The array of currently active accessible items.\n   *\n   * @member {Array<*>}\n   * @private\n   */\n\n  this.children = [];\n  /**\n   * pre-bind the functions\n   *\n   * @type {Function}\n   * @private\n   */\n\n  this._onKeyDown = this._onKeyDown.bind(this);\n  /**\n   * pre-bind the functions\n   *\n   * @type {Function}\n   * @private\n   */\n\n  this._onMouseMove = this._onMouseMove.bind(this);\n  /**\n   * A flag\n   * @type {boolean}\n   * @readonly\n   */\n\n  this.isActive = false;\n  /**\n   * A flag\n   * @type {boolean}\n   * @readonly\n   */\n\n  this.isMobileAccessibility = false; // let listen for tab.. once pressed we can fire up and show the accessibility layer\n\n  window.addEventListener('keydown', this._onKeyDown, false);\n};\n/**\n * Creates the touch hooks.\n *\n * @private\n */\n\n\nAccessibilityManager.prototype.createTouchHook = function createTouchHook() {\n  var this$1 = this;\n  var hookDiv = document.createElement('button');\n  hookDiv.style.width = DIV_HOOK_SIZE + \"px\";\n  hookDiv.style.height = DIV_HOOK_SIZE + \"px\";\n  hookDiv.style.position = 'absolute';\n  hookDiv.style.top = DIV_HOOK_POS_X + \"px\";\n  hookDiv.style.left = DIV_HOOK_POS_Y + \"px\";\n  hookDiv.style.zIndex = DIV_HOOK_ZINDEX;\n  hookDiv.style.backgroundColor = '#FF0000';\n  hookDiv.title = 'HOOK DIV';\n  hookDiv.addEventListener('focus', function () {\n    this$1.isMobileAccessibility = true;\n    this$1.activate();\n    this$1.destroyTouchHook();\n  });\n  document.body.appendChild(hookDiv);\n  this._hookDiv = hookDiv;\n};\n/**\n * Destroys the touch hooks.\n *\n * @private\n */\n\n\nAccessibilityManager.prototype.destroyTouchHook = function destroyTouchHook() {\n  if (!this._hookDiv) {\n    return;\n  }\n\n  document.body.removeChild(this._hookDiv);\n  this._hookDiv = null;\n};\n/**\n * Activating will cause the Accessibility layer to be shown.\n * This is called when a user presses the tab key.\n *\n * @private\n */\n\n\nAccessibilityManager.prototype.activate = function activate() {\n  if (this.isActive) {\n    return;\n  }\n\n  this.isActive = true;\n  window.document.addEventListener('mousemove', this._onMouseMove, true);\n  window.removeEventListener('keydown', this._onKeyDown, false);\n  this.renderer.on('postrender', this.update, this);\n\n  if (this.renderer.view.parentNode) {\n    this.renderer.view.parentNode.appendChild(this.div);\n  }\n};\n/**\n * Deactivating will cause the Accessibility layer to be hidden.\n * This is called when a user moves the mouse.\n *\n * @private\n */\n\n\nAccessibilityManager.prototype.deactivate = function deactivate() {\n  if (!this.isActive || this.isMobileAccessibility) {\n    return;\n  }\n\n  this.isActive = false;\n  window.document.removeEventListener('mousemove', this._onMouseMove, true);\n  window.addEventListener('keydown', this._onKeyDown, false);\n  this.renderer.off('postrender', this.update);\n\n  if (this.div.parentNode) {\n    this.div.parentNode.removeChild(this.div);\n  }\n};\n/**\n * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n *\n * @private\n * @param {PIXI.Container} displayObject - The DisplayObject to check.\n */\n\n\nAccessibilityManager.prototype.updateAccessibleObjects = function updateAccessibleObjects(displayObject) {\n  if (!displayObject.visible || !displayObject.accessibleChildren) {\n    return;\n  }\n\n  if (displayObject.accessible && displayObject.interactive) {\n    if (!displayObject._accessibleActive) {\n      this.addChild(displayObject);\n    }\n\n    displayObject.renderId = this.renderId;\n  }\n\n  var children = displayObject.children;\n\n  for (var i = 0; i < children.length; i++) {\n    this.updateAccessibleObjects(children[i]);\n  }\n};\n/**\n * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n *\n * @private\n */\n\n\nAccessibilityManager.prototype.update = function update() {\n  if (!this.renderer.renderingToScreen) {\n    return;\n  } // update children...\n\n\n  this.updateAccessibleObjects(this.renderer._lastObjectRendered);\n  var rect = this.renderer.view.getBoundingClientRect();\n  var sx = rect.width / this.renderer.width;\n  var sy = rect.height / this.renderer.height;\n  var div = this.div;\n  div.style.left = rect.left + \"px\";\n  div.style.top = rect.top + \"px\";\n  div.style.width = this.renderer.width + \"px\";\n  div.style.height = this.renderer.height + \"px\";\n\n  for (var i = 0; i < this.children.length; i++) {\n    var child = this.children[i];\n\n    if (child.renderId !== this.renderId) {\n      child._accessibleActive = false;\n      removeItems(this.children, i, 1);\n      this.div.removeChild(child._accessibleDiv);\n      this.pool.push(child._accessibleDiv);\n      child._accessibleDiv = null;\n      i--;\n\n      if (this.children.length === 0) {\n        this.deactivate();\n      }\n    } else {\n      // map div to display..\n      div = child._accessibleDiv;\n      var hitArea = child.hitArea;\n      var wt = child.worldTransform;\n\n      if (child.hitArea) {\n        div.style.left = (wt.tx + hitArea.x * wt.a) * sx + \"px\";\n        div.style.top = (wt.ty + hitArea.y * wt.d) * sy + \"px\";\n        div.style.width = hitArea.width * wt.a * sx + \"px\";\n        div.style.height = hitArea.height * wt.d * sy + \"px\";\n      } else {\n        hitArea = child.getBounds();\n        this.capHitArea(hitArea);\n        div.style.left = hitArea.x * sx + \"px\";\n        div.style.top = hitArea.y * sy + \"px\";\n        div.style.width = hitArea.width * sx + \"px\";\n        div.style.height = hitArea.height * sy + \"px\"; // update button titles and hints if they exist and they've changed\n\n        if (div.title !== child.accessibleTitle && child.accessibleTitle !== null) {\n          div.title = child.accessibleTitle;\n        }\n\n        if (div.getAttribute('aria-label') !== child.accessibleHint && child.accessibleHint !== null) {\n          div.setAttribute('aria-label', child.accessibleHint);\n        }\n      } // the title or index may have changed, if so lets update it!\n\n\n      if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex) {\n        div.title = child.accessibleTitle;\n        div.tabIndex = child.tabIndex;\n\n        if (this.debug) {\n          this.updateDebugHTML(div);\n        }\n      }\n    }\n  } // increment the render id..\n\n\n  this.renderId++;\n};\n/**\n * private function that will visually add the information to the\n * accessability div\n *\n * @param {HTMLDivElement} div\n */\n\n\nAccessibilityManager.prototype.updateDebugHTML = function updateDebugHTML(div) {\n  div.innerHTML = \"type: \" + div.type + \"</br> title : \" + div.title + \"</br> tabIndex: \" + div.tabIndex;\n};\n/**\n * Adjust the hit area based on the bounds of a display object\n *\n * @param {PIXI.Rectangle} hitArea - Bounds of the child\n */\n\n\nAccessibilityManager.prototype.capHitArea = function capHitArea(hitArea) {\n  if (hitArea.x < 0) {\n    hitArea.width += hitArea.x;\n    hitArea.x = 0;\n  }\n\n  if (hitArea.y < 0) {\n    hitArea.height += hitArea.y;\n    hitArea.y = 0;\n  }\n\n  if (hitArea.x + hitArea.width > this.renderer.width) {\n    hitArea.width = this.renderer.width - hitArea.x;\n  }\n\n  if (hitArea.y + hitArea.height > this.renderer.height) {\n    hitArea.height = this.renderer.height - hitArea.y;\n  }\n};\n/**\n * Adds a DisplayObject to the accessibility manager\n *\n * @private\n * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n */\n\n\nAccessibilityManager.prototype.addChild = function addChild(displayObject) {\n  //this.activate();\n  var div = this.pool.pop();\n\n  if (!div) {\n    div = document.createElement('button');\n    div.style.width = DIV_TOUCH_SIZE + \"px\";\n    div.style.height = DIV_TOUCH_SIZE + \"px\";\n    div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n    div.style.position = 'absolute';\n    div.style.zIndex = DIV_TOUCH_ZINDEX;\n    div.style.borderStyle = 'none'; // ARIA attributes ensure that button title and hint updates are announced properly\n\n    if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n      // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n      div.setAttribute('aria-live', 'off');\n    } else {\n      div.setAttribute('aria-live', 'polite');\n    }\n\n    if (navigator.userAgent.match(/rv:.*Gecko\\//)) {\n      // FireFox needs this to announce only the new button name\n      div.setAttribute('aria-relevant', 'additions');\n    } else {\n      // required by IE, other browsers don't much care\n      div.setAttribute('aria-relevant', 'text');\n    }\n\n    div.addEventListener('click', this._onClick.bind(this));\n    div.addEventListener('focus', this._onFocus.bind(this));\n    div.addEventListener('focusout', this._onFocusOut.bind(this));\n  } // set pointer events\n\n\n  div.style.pointerEvents = displayObject.accessiblePointerEvents; // set the type, this defaults to button!\n\n  div.type = displayObject.accessibleType;\n\n  if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null) {\n    div.title = displayObject.accessibleTitle;\n  } else if (!displayObject.accessibleHint || displayObject.accessibleHint === null) {\n    div.title = \"displayObject \" + displayObject.tabIndex;\n  }\n\n  if (displayObject.accessibleHint && displayObject.accessibleHint !== null) {\n    div.setAttribute('aria-label', displayObject.accessibleHint);\n  }\n\n  if (this.debug) {\n    this.updateDebugHTML(div);\n  }\n\n  displayObject._accessibleActive = true;\n  displayObject._accessibleDiv = div;\n  div.displayObject = displayObject;\n  this.children.push(displayObject);\n  this.div.appendChild(displayObject._accessibleDiv);\n  displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n};\n/**\n * Maps the div button press to pixi's InteractionManager (click)\n *\n * @private\n * @param {MouseEvent} e - The click event.\n */\n\n\nAccessibilityManager.prototype._onClick = function _onClick(e) {\n  var interactionManager = this.renderer.plugins.interaction;\n  interactionManager.dispatchEvent(e.target.displayObject, 'click', interactionManager.eventData);\n  interactionManager.dispatchEvent(e.target.displayObject, 'pointertap', interactionManager.eventData);\n  interactionManager.dispatchEvent(e.target.displayObject, 'tap', interactionManager.eventData);\n};\n/**\n * Maps the div focus events to pixi's InteractionManager (mouseover)\n *\n * @private\n * @param {FocusEvent} e - The focus event.\n */\n\n\nAccessibilityManager.prototype._onFocus = function _onFocus(e) {\n  if (!e.target.getAttribute('aria-live', 'off')) {\n    e.target.setAttribute('aria-live', 'assertive');\n  }\n\n  var interactionManager = this.renderer.plugins.interaction;\n  interactionManager.dispatchEvent(e.target.displayObject, 'mouseover', interactionManager.eventData);\n};\n/**\n * Maps the div focus events to pixi's InteractionManager (mouseout)\n *\n * @private\n * @param {FocusEvent} e - The focusout event.\n */\n\n\nAccessibilityManager.prototype._onFocusOut = function _onFocusOut(e) {\n  if (!e.target.getAttribute('aria-live', 'off')) {\n    e.target.setAttribute('aria-live', 'polite');\n  }\n\n  var interactionManager = this.renderer.plugins.interaction;\n  interactionManager.dispatchEvent(e.target.displayObject, 'mouseout', interactionManager.eventData);\n};\n/**\n * Is called when a key is pressed\n *\n * @private\n * @param {KeyboardEvent} e - The keydown event.\n */\n\n\nAccessibilityManager.prototype._onKeyDown = function _onKeyDown(e) {\n  if (e.keyCode !== KEY_CODE_TAB) {\n    return;\n  }\n\n  this.activate();\n};\n/**\n * Is called when the mouse moves across the renderer element\n *\n * @private\n * @param {MouseEvent} e - The mouse event.\n */\n\n\nAccessibilityManager.prototype._onMouseMove = function _onMouseMove(e) {\n  if (e.movementX === 0 && e.movementY === 0) {\n    return;\n  }\n\n  this.deactivate();\n};\n/**\n * Destroys the accessibility manager\n *\n */\n\n\nAccessibilityManager.prototype.destroy = function destroy() {\n  this.destroyTouchHook();\n  this.div = null;\n\n  for (var i = 0; i < this.children.length; i++) {\n    this.children[i].div = null;\n  }\n\n  window.document.removeEventListener('mousemove', this._onMouseMove, true);\n  window.removeEventListener('keydown', this._onKeyDown);\n  this.pool = null;\n  this.children = null;\n  this.renderer = null;\n};\n/**\n * This namespace contains an accessibility plugin for allowing interaction via the keyboard.\n *\n * Do not instantiate this plugin directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @namespace PIXI.accessibility\n */\n\n\nexport { AccessibilityManager, accessibleTarget };","map":{"version":3,"sources":["../src/accessibleTarget.js","../src/AccessibilityManager.js","../src/index.js"],"names":["const","this","let"],"mappings":"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","sourcesContent":["/**\n * Default property values of accessible objects\n * used by {@link PIXI.accessibility.AccessibilityManager}.\n *\n * @private\n * @function accessibleTarget\n * @memberof PIXI.accessibility\n * @type {Object}\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          MyObject.prototype,\n *          PIXI.accessibility.accessibleTarget\n *      );\n */\nexport const accessibleTarget = {\n    /**\n     *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n     *   shadow div with attributes set\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessible: false,\n\n    /**\n     * Sets the title attribute of the shadow div\n     * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n     *\n     * @member {?string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleTitle: null,\n\n    /**\n     * Sets the aria-label attribute of the shadow div\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleHint: null,\n\n    /**\n     * @member {number}\n     * @memberof PIXI.DisplayObject#\n     * @private\n     * @todo Needs docs.\n     */\n    tabIndex: 0,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleActive: false,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleDiv: false,\n\n    /**\n     * Specify the type of div the accessible layer is. Screen readers treat the element differently\n     * depending on this type. Defaults to button.\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'button'\n     */\n    accessibleType: 'button',\n\n    /**\n     * Specify the pointer-events the accessible div will use\n     * Defaults to auto.\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'auto'\n     */\n    accessiblePointerEvents: 'auto',\n\n    /**\n     * Setting to false will prevent any children inside this container to\n     * be accessible. Defaults to true.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @default true\n     */\n    accessibleChildren: true,\n};\n","import { accessibleTarget } from './accessibleTarget';\nimport { removeItems, isMobile } from '@pixi/utils';\nimport { DisplayObject } from '@pixi/display';\n\n// add some extra variables to the container..\nDisplayObject.mixin(accessibleTarget);\n\nconst KEY_CODE_TAB = 9;\n\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\n\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1000;\nconst DIV_HOOK_POS_Y = -1000;\nconst DIV_HOOK_ZINDEX = 2;\n\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n *\n * @class\n * @memberof PIXI.accessibility\n */\nexport class AccessibilityManager\n{\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer)\n    {\n        /**\n         * @type {?HTMLElement}\n         * @private\n         */\n        this._hookDiv = null;\n        if (isMobile.tablet || isMobile.phone)\n        {\n            this.createTouchHook();\n        }\n\n        // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n        const div = document.createElement('div');\n\n        div.style.width = `${DIV_TOUCH_SIZE}px`;\n        div.style.height = `${DIV_TOUCH_SIZE}px`;\n        div.style.position = 'absolute';\n        div.style.top = `${DIV_TOUCH_POS_X}px`;\n        div.style.left = `${DIV_TOUCH_POS_Y}px`;\n        div.style.zIndex = DIV_TOUCH_ZINDEX;\n\n        /**\n         * This is the dom element that will sit over the PixiJS element. This is where the div overlays will go.\n         *\n         * @type {HTMLElement}\n         * @private\n         */\n        this.div = div;\n\n        /**\n         * A simple pool for storing divs.\n         *\n         * @type {*}\n         * @private\n         */\n        this.pool = [];\n\n        /**\n         * This is a tick used to check if an object is no longer being rendered.\n         *\n         * @type {Number}\n         * @private\n         */\n        this.renderId = 0;\n\n        /**\n         * Setting this to true will visually show the divs.\n         *\n         * @type {boolean}\n         */\n        this.debug = false;\n\n        /**\n         * The renderer this accessibility manager works for.\n         *\n         * @member {PIXI.AbstractRenderer}\n         */\n        this.renderer = renderer;\n\n        /**\n         * The array of currently active accessible items.\n         *\n         * @member {Array<*>}\n         * @private\n         */\n        this.children = [];\n\n        /**\n         * pre-bind the functions\n         *\n         * @type {Function}\n         * @private\n         */\n        this._onKeyDown = this._onKeyDown.bind(this);\n\n        /**\n         * pre-bind the functions\n         *\n         * @type {Function}\n         * @private\n         */\n        this._onMouseMove = this._onMouseMove.bind(this);\n\n        /**\n         * A flag\n         * @type {boolean}\n         * @readonly\n         */\n        this.isActive = false;\n\n        /**\n         * A flag\n         * @type {boolean}\n         * @readonly\n         */\n        this.isMobileAccessibility = false;\n\n        // let listen for tab.. once pressed we can fire up and show the accessibility layer\n        window.addEventListener('keydown', this._onKeyDown, false);\n    }\n\n    /**\n     * Creates the touch hooks.\n     *\n     * @private\n     */\n    createTouchHook()\n    {\n        const hookDiv = document.createElement('button');\n\n        hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.position = 'absolute';\n        hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n        hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n        hookDiv.style.zIndex = DIV_HOOK_ZINDEX;\n        hookDiv.style.backgroundColor = '#FF0000';\n        hookDiv.title = 'HOOK DIV';\n\n        hookDiv.addEventListener('focus', () =>\n        {\n            this.isMobileAccessibility = true;\n            this.activate();\n            this.destroyTouchHook();\n        });\n\n        document.body.appendChild(hookDiv);\n        this._hookDiv = hookDiv;\n    }\n\n    /**\n     * Destroys the touch hooks.\n     *\n     * @private\n     */\n    destroyTouchHook()\n    {\n        if (!this._hookDiv)\n        {\n            return;\n        }\n        document.body.removeChild(this._hookDiv);\n        this._hookDiv = null;\n    }\n\n    /**\n     * Activating will cause the Accessibility layer to be shown.\n     * This is called when a user presses the tab key.\n     *\n     * @private\n     */\n    activate()\n    {\n        if (this.isActive)\n        {\n            return;\n        }\n\n        this.isActive = true;\n\n        window.document.addEventListener('mousemove', this._onMouseMove, true);\n        window.removeEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.on('postrender', this.update, this);\n\n        if (this.renderer.view.parentNode)\n        {\n            this.renderer.view.parentNode.appendChild(this.div);\n        }\n    }\n\n    /**\n     * Deactivating will cause the Accessibility layer to be hidden.\n     * This is called when a user moves the mouse.\n     *\n     * @private\n     */\n    deactivate()\n    {\n        if (!this.isActive || this.isMobileAccessibility)\n        {\n            return;\n        }\n\n        this.isActive = false;\n\n        window.document.removeEventListener('mousemove', this._onMouseMove, true);\n        window.addEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.off('postrender', this.update);\n\n        if (this.div.parentNode)\n        {\n            this.div.parentNode.removeChild(this.div);\n        }\n    }\n\n    /**\n     * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n     *\n     * @private\n     * @param {PIXI.Container} displayObject - The DisplayObject to check.\n     */\n    updateAccessibleObjects(displayObject)\n    {\n        if (!displayObject.visible || !displayObject.accessibleChildren)\n        {\n            return;\n        }\n\n        if (displayObject.accessible && displayObject.interactive)\n        {\n            if (!displayObject._accessibleActive)\n            {\n                this.addChild(displayObject);\n            }\n\n            displayObject.renderId = this.renderId;\n        }\n\n        const children = displayObject.children;\n\n        for (let i = 0; i < children.length; i++)\n        {\n            this.updateAccessibleObjects(children[i]);\n        }\n    }\n\n    /**\n     * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n     *\n     * @private\n     */\n    update()\n    {\n        if (!this.renderer.renderingToScreen)\n        {\n            return;\n        }\n\n        // update children...\n        this.updateAccessibleObjects(this.renderer._lastObjectRendered);\n\n        const rect = this.renderer.view.getBoundingClientRect();\n        const sx = rect.width / this.renderer.width;\n        const sy = rect.height / this.renderer.height;\n\n        let div = this.div;\n\n        div.style.left = `${rect.left}px`;\n        div.style.top = `${rect.top}px`;\n        div.style.width = `${this.renderer.width}px`;\n        div.style.height = `${this.renderer.height}px`;\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (child.renderId !== this.renderId)\n            {\n                child._accessibleActive = false;\n\n                removeItems(this.children, i, 1);\n                this.div.removeChild(child._accessibleDiv);\n                this.pool.push(child._accessibleDiv);\n                child._accessibleDiv = null;\n\n                i--;\n\n                if (this.children.length === 0)\n                {\n                    this.deactivate();\n                }\n            }\n            else\n            {\n                // map div to display..\n                div = child._accessibleDiv;\n                let hitArea = child.hitArea;\n                const wt = child.worldTransform;\n\n                if (child.hitArea)\n                {\n                    div.style.left = `${(wt.tx + (hitArea.x * wt.a)) * sx}px`;\n                    div.style.top = `${(wt.ty + (hitArea.y * wt.d)) * sy}px`;\n\n                    div.style.width = `${hitArea.width * wt.a * sx}px`;\n                    div.style.height = `${hitArea.height * wt.d * sy}px`;\n                }\n                else\n                {\n                    hitArea = child.getBounds();\n\n                    this.capHitArea(hitArea);\n\n                    div.style.left = `${hitArea.x * sx}px`;\n                    div.style.top = `${hitArea.y * sy}px`;\n\n                    div.style.width = `${hitArea.width * sx}px`;\n                    div.style.height = `${hitArea.height * sy}px`;\n\n                    // update button titles and hints if they exist and they've changed\n                    if (div.title !== child.accessibleTitle && child.accessibleTitle !== null)\n                    {\n                        div.title = child.accessibleTitle;\n                    }\n                    if (div.getAttribute('aria-label') !== child.accessibleHint\n                        && child.accessibleHint !== null)\n                    {\n                        div.setAttribute('aria-label', child.accessibleHint);\n                    }\n                }\n\n                // the title or index may have changed, if so lets update it!\n                if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex)\n                {\n                    div.title = child.accessibleTitle;\n                    div.tabIndex = child.tabIndex;\n                    if (this.debug) this.updateDebugHTML(div);\n                }\n            }\n        }\n\n        // increment the render id..\n        this.renderId++;\n    }\n\n    /**\n     * private function that will visually add the information to the\n     * accessability div\n     *\n     * @param {HTMLDivElement} div\n     */\n    updateDebugHTML(div)\n    {\n        div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;\n    }\n\n    /**\n     * Adjust the hit area based on the bounds of a display object\n     *\n     * @param {PIXI.Rectangle} hitArea - Bounds of the child\n     */\n    capHitArea(hitArea)\n    {\n        if (hitArea.x < 0)\n        {\n            hitArea.width += hitArea.x;\n            hitArea.x = 0;\n        }\n\n        if (hitArea.y < 0)\n        {\n            hitArea.height += hitArea.y;\n            hitArea.y = 0;\n        }\n\n        if (hitArea.x + hitArea.width > this.renderer.width)\n        {\n            hitArea.width = this.renderer.width - hitArea.x;\n        }\n\n        if (hitArea.y + hitArea.height > this.renderer.height)\n        {\n            hitArea.height = this.renderer.height - hitArea.y;\n        }\n    }\n\n    /**\n     * Adds a DisplayObject to the accessibility manager\n     *\n     * @private\n     * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n     */\n    addChild(displayObject)\n    {\n        //    this.activate();\n\n        let div = this.pool.pop();\n\n        if (!div)\n        {\n            div = document.createElement('button');\n\n            div.style.width = `${DIV_TOUCH_SIZE}px`;\n            div.style.height = `${DIV_TOUCH_SIZE}px`;\n            div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n            div.style.position = 'absolute';\n            div.style.zIndex = DIV_TOUCH_ZINDEX;\n            div.style.borderStyle = 'none';\n\n            // ARIA attributes ensure that button title and hint updates are announced properly\n            if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1)\n            {\n                // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n                div.setAttribute('aria-live', 'off');\n            }\n            else\n            {\n                div.setAttribute('aria-live', 'polite');\n            }\n\n            if (navigator.userAgent.match(/rv:.*Gecko\\//))\n            {\n                // FireFox needs this to announce only the new button name\n                div.setAttribute('aria-relevant', 'additions');\n            }\n            else\n            {\n                // required by IE, other browsers don't much care\n                div.setAttribute('aria-relevant', 'text');\n            }\n\n            div.addEventListener('click', this._onClick.bind(this));\n            div.addEventListener('focus', this._onFocus.bind(this));\n            div.addEventListener('focusout', this._onFocusOut.bind(this));\n        }\n\n        // set pointer events\n        div.style.pointerEvents = displayObject.accessiblePointerEvents;\n        // set the type, this defaults to button!\n        div.type = displayObject.accessibleType;\n\n        if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null)\n        {\n            div.title = displayObject.accessibleTitle;\n        }\n        else if (!displayObject.accessibleHint\n                 || displayObject.accessibleHint === null)\n        {\n            div.title = `displayObject ${displayObject.tabIndex}`;\n        }\n\n        if (displayObject.accessibleHint\n            && displayObject.accessibleHint !== null)\n        {\n            div.setAttribute('aria-label', displayObject.accessibleHint);\n        }\n\n        if (this.debug) this.updateDebugHTML(div);\n\n        displayObject._accessibleActive = true;\n        displayObject._accessibleDiv = div;\n        div.displayObject = displayObject;\n\n        this.children.push(displayObject);\n        this.div.appendChild(displayObject._accessibleDiv);\n        displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n    }\n\n    /**\n     * Maps the div button press to pixi's InteractionManager (click)\n     *\n     * @private\n     * @param {MouseEvent} e - The click event.\n     */\n    _onClick(e)\n    {\n        const interactionManager = this.renderer.plugins.interaction;\n\n        interactionManager.dispatchEvent(e.target.displayObject, 'click', interactionManager.eventData);\n        interactionManager.dispatchEvent(e.target.displayObject, 'pointertap', interactionManager.eventData);\n        interactionManager.dispatchEvent(e.target.displayObject, 'tap', interactionManager.eventData);\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseover)\n     *\n     * @private\n     * @param {FocusEvent} e - The focus event.\n     */\n    _onFocus(e)\n    {\n        if (!e.target.getAttribute('aria-live', 'off'))\n        {\n            e.target.setAttribute('aria-live', 'assertive');\n        }\n        const interactionManager = this.renderer.plugins.interaction;\n\n        interactionManager.dispatchEvent(e.target.displayObject, 'mouseover', interactionManager.eventData);\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseout)\n     *\n     * @private\n     * @param {FocusEvent} e - The focusout event.\n     */\n    _onFocusOut(e)\n    {\n        if (!e.target.getAttribute('aria-live', 'off'))\n        {\n            e.target.setAttribute('aria-live', 'polite');\n        }\n        const interactionManager = this.renderer.plugins.interaction;\n\n        interactionManager.dispatchEvent(e.target.displayObject, 'mouseout', interactionManager.eventData);\n    }\n\n    /**\n     * Is called when a key is pressed\n     *\n     * @private\n     * @param {KeyboardEvent} e - The keydown event.\n     */\n    _onKeyDown(e)\n    {\n        if (e.keyCode !== KEY_CODE_TAB)\n        {\n            return;\n        }\n\n        this.activate();\n    }\n\n    /**\n     * Is called when the mouse moves across the renderer element\n     *\n     * @private\n     * @param {MouseEvent} e - The mouse event.\n     */\n    _onMouseMove(e)\n    {\n        if (e.movementX === 0 && e.movementY === 0)\n        {\n            return;\n        }\n\n        this.deactivate();\n    }\n\n    /**\n     * Destroys the accessibility manager\n     *\n     */\n    destroy()\n    {\n        this.destroyTouchHook();\n        this.div = null;\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            this.children[i].div = null;\n        }\n\n        window.document.removeEventListener('mousemove', this._onMouseMove, true);\n        window.removeEventListener('keydown', this._onKeyDown);\n\n        this.pool = null;\n        this.children = null;\n        this.renderer = null;\n    }\n}\n","/**\n * This namespace contains an accessibility plugin for allowing interaction via the keyboard.\n *\n * Do not instantiate this plugin directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @namespace PIXI.accessibility\n */\nexport * from './accessibleTarget';\nexport * from './AccessibilityManager';\n"]},"metadata":{},"sourceType":"module"}