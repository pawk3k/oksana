{"ast":null,"code":"/*!\n * @pixi/mesh-extras - v5.2.1\n * Compiled Tue, 28 Jan 2020 23:33:11 UTC\n *\n * @pixi/mesh-extras is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { MeshGeometry, Mesh, MeshMaterial } from '@pixi/mesh';\nimport { WRAP_MODES } from '@pixi/constants';\nimport { Texture } from '@pixi/core';\n\nvar PlaneGeometry =\n/*@__PURE__*/\nfunction (MeshGeometry) {\n  function PlaneGeometry(width, height, segWidth, segHeight) {\n    if (width === void 0) width = 100;\n    if (height === void 0) height = 100;\n    if (segWidth === void 0) segWidth = 10;\n    if (segHeight === void 0) segHeight = 10;\n    MeshGeometry.call(this);\n    this.segWidth = segWidth;\n    this.segHeight = segHeight;\n    this.width = width;\n    this.height = height;\n    this.build();\n  }\n\n  if (MeshGeometry) PlaneGeometry.__proto__ = MeshGeometry;\n  PlaneGeometry.prototype = Object.create(MeshGeometry && MeshGeometry.prototype);\n  PlaneGeometry.prototype.constructor = PlaneGeometry;\n  /**\n   * Refreshes plane coordinates\n   * @private\n   */\n\n  PlaneGeometry.prototype.build = function build() {\n    var total = this.segWidth * this.segHeight;\n    var verts = [];\n    var uvs = [];\n    var indices = [];\n    var segmentsX = this.segWidth - 1;\n    var segmentsY = this.segHeight - 1;\n    var sizeX = this.width / segmentsX;\n    var sizeY = this.height / segmentsY;\n\n    for (var i = 0; i < total; i++) {\n      var x = i % this.segWidth;\n      var y = i / this.segWidth | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / segmentsX, y / segmentsY);\n    }\n\n    var totalSub = segmentsX * segmentsY;\n\n    for (var i$1 = 0; i$1 < totalSub; i$1++) {\n      var xpos = i$1 % segmentsX;\n      var ypos = i$1 / segmentsX | 0;\n      var value = ypos * this.segWidth + xpos;\n      var value2 = ypos * this.segWidth + xpos + 1;\n      var value3 = (ypos + 1) * this.segWidth + xpos;\n      var value4 = (ypos + 1) * this.segWidth + xpos + 1;\n      indices.push(value, value2, value3, value2, value4, value3);\n    }\n\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint16Array(indices); // ensure that the changes are uploaded\n\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  };\n\n  return PlaneGeometry;\n}(MeshGeometry);\n/**\n * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n *\n * ```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * const rope = new PIXI.RopeGeometry(100, points);\n * ```\n *\n * @class\n * @extends PIXI.MeshGeometry\n * @memberof PIXI\n *\n */\n\n\nvar RopeGeometry =\n/*@__PURE__*/\nfunction (MeshGeometry) {\n  function RopeGeometry(width, points, textureScale) {\n    if (width === void 0) width = 200;\n    if (textureScale === void 0) textureScale = 0;\n    MeshGeometry.call(this, new Float32Array(points.length * 4), new Float32Array(points.length * 4), new Uint16Array((points.length - 1) * 6));\n    /**\n     * An array of points that determine the rope\n     * @member {PIXI.Point[]}\n     */\n\n    this.points = points;\n    /**\n     * The width (i.e., thickness) of the rope.\n     * @member {number}\n     * @readOnly\n     */\n\n    this.width = width;\n    /**\n     * Rope texture scale, if zero then the rope texture is stretched.\n     * @member {number}\n     * @readOnly\n     */\n\n    this.textureScale = textureScale;\n    this.build();\n  }\n\n  if (MeshGeometry) RopeGeometry.__proto__ = MeshGeometry;\n  RopeGeometry.prototype = Object.create(MeshGeometry && MeshGeometry.prototype);\n  RopeGeometry.prototype.constructor = RopeGeometry;\n  /**\n   * Refreshes Rope indices and uvs\n   * @private\n   */\n\n  RopeGeometry.prototype.build = function build() {\n    var points = this.points;\n\n    if (!points) {\n      return;\n    }\n\n    var vertexBuffer = this.getBuffer('aVertexPosition');\n    var uvBuffer = this.getBuffer('aTextureCoord');\n    var indexBuffer = this.getIndex(); // if too little points, or texture hasn't got UVs set yet just move on.\n\n    if (points.length < 1) {\n      return;\n    } // if the number of points has changed we will need to recreate the arraybuffers\n\n\n    if (vertexBuffer.data.length / 4 !== points.length) {\n      vertexBuffer.data = new Float32Array(points.length * 4);\n      uvBuffer.data = new Float32Array(points.length * 4);\n      indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n    }\n\n    var uvs = uvBuffer.data;\n    var indices = indexBuffer.data;\n    uvs[0] = 0;\n    uvs[1] = 0;\n    uvs[2] = 0;\n    uvs[3] = 1;\n    var amount = 0;\n    var prev = points[0];\n    var textureWidth = this.width * this.textureScale;\n    var total = points.length; // - 1;\n\n    for (var i = 0; i < total; i++) {\n      // time to do some smart drawing!\n      var index = i * 4;\n\n      if (this.textureScale > 0) {\n        // calculate pixel distance from previous point\n        var dx = prev.x - points[i].x;\n        var dy = prev.y - points[i].y;\n        var distance = Math.sqrt(dx * dx + dy * dy);\n        prev = points[i];\n        amount += distance / textureWidth;\n      } else {\n        // stretch texture\n        amount = i / (total - 1);\n      }\n\n      uvs[index] = amount;\n      uvs[index + 1] = 0;\n      uvs[index + 2] = amount;\n      uvs[index + 3] = 1;\n    }\n\n    var indexCount = 0;\n\n    for (var i$1 = 0; i$1 < total - 1; i$1++) {\n      var index$1 = i$1 * 2;\n      indices[indexCount++] = index$1;\n      indices[indexCount++] = index$1 + 1;\n      indices[indexCount++] = index$1 + 2;\n      indices[indexCount++] = index$1 + 2;\n      indices[indexCount++] = index$1 + 1;\n      indices[indexCount++] = index$1 + 3;\n    } // ensure that the changes are uploaded\n\n\n    uvBuffer.update();\n    indexBuffer.update();\n    this.updateVertices();\n  };\n  /**\n   * refreshes vertices of Rope mesh\n   */\n\n\n  RopeGeometry.prototype.updateVertices = function updateVertices() {\n    var points = this.points;\n\n    if (points.length < 1) {\n      return;\n    }\n\n    var lastPoint = points[0];\n    var nextPoint;\n    var perpX = 0;\n    var perpY = 0;\n    var vertices = this.buffers[0].data;\n    var total = points.length;\n\n    for (var i = 0; i < total; i++) {\n      var point = points[i];\n      var index = i * 4;\n\n      if (i < points.length - 1) {\n        nextPoint = points[i + 1];\n      } else {\n        nextPoint = point;\n      }\n\n      perpY = -(nextPoint.x - lastPoint.x);\n      perpX = nextPoint.y - lastPoint.y;\n      var perpLength = Math.sqrt(perpX * perpX + perpY * perpY);\n      var num = this.textureScale > 0 ? this.textureScale * this.width / 2 : this.width / 2;\n      perpX /= perpLength;\n      perpY /= perpLength;\n      perpX *= num;\n      perpY *= num;\n      vertices[index] = point.x + perpX;\n      vertices[index + 1] = point.y + perpY;\n      vertices[index + 2] = point.x - perpX;\n      vertices[index + 3] = point.y - perpY;\n      lastPoint = point;\n    }\n\n    this.buffers[0].update();\n  };\n\n  RopeGeometry.prototype.update = function update() {\n    if (this.textureScale > 0) {\n      this.build(); // we need to update UVs\n    } else {\n      this.updateVertices();\n    }\n  };\n\n  return RopeGeometry;\n}(MeshGeometry);\n/**\n * The rope allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let rope = new PIXI.SimpleRope(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n *\n */\n\n\nvar SimpleRope =\n/*@__PURE__*/\nfunction (Mesh) {\n  function SimpleRope(texture, points, textureScale) {\n    if (textureScale === void 0) textureScale = 0;\n    var ropeGeometry = new RopeGeometry(texture.height, points, textureScale);\n    var meshMaterial = new MeshMaterial(texture);\n\n    if (textureScale > 0) {\n      // attempt to set UV wrapping, will fail on non-power of two textures\n      texture.baseTexture.wrapMode = WRAP_MODES.REPEAT;\n    }\n\n    Mesh.call(this, ropeGeometry, meshMaterial);\n    /**\n     * re-calculate vertices by rope points each frame\n     *\n     * @member {boolean}\n     */\n\n    this.autoUpdate = true;\n  }\n\n  if (Mesh) SimpleRope.__proto__ = Mesh;\n  SimpleRope.prototype = Object.create(Mesh && Mesh.prototype);\n  SimpleRope.prototype.constructor = SimpleRope;\n\n  SimpleRope.prototype._render = function _render(renderer) {\n    if (this.autoUpdate || this.geometry.width !== this.shader.texture.height) {\n      this.geometry.width = this.shader.texture.height;\n      this.geometry.update();\n    }\n\n    Mesh.prototype._render.call(this, renderer);\n  };\n\n  return SimpleRope;\n}(Mesh);\n/**\n * The SimplePlane allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let SimplePlane = new PIXI.SimplePlane(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n *\n */\n\n\nvar SimplePlane =\n/*@__PURE__*/\nfunction (Mesh) {\n  function SimplePlane(texture, verticesX, verticesY) {\n    var planeGeometry = new PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n    var meshMaterial = new MeshMaterial(Texture.WHITE);\n    Mesh.call(this, planeGeometry, meshMaterial); // lets call the setter to ensure all necessary updates are performed\n\n    this.texture = texture;\n  }\n\n  if (Mesh) SimplePlane.__proto__ = Mesh;\n  SimplePlane.prototype = Object.create(Mesh && Mesh.prototype);\n  SimplePlane.prototype.constructor = SimplePlane;\n  var prototypeAccessors = {\n    texture: {\n      configurable: true\n    }\n  };\n  /**\n   * Method used for overrides, to do something in case texture frame was changed.\n   * Meshes based on plane can override it and change more details based on texture.\n   */\n\n  SimplePlane.prototype.textureUpdated = function textureUpdated() {\n    this._textureID = this.shader.texture._updateID;\n    this.geometry.width = this.shader.texture.width;\n    this.geometry.height = this.shader.texture.height;\n    this.geometry.build();\n  };\n\n  prototypeAccessors.texture.set = function (value) {\n    // Track texture same way sprite does.\n    // For generated meshes like NineSlicePlane it can change the geometry.\n    // Unfortunately, this method might not work if you directly change texture in material.\n    if (this.shader.texture === value) {\n      return;\n    }\n\n    this.shader.texture = value;\n    this._textureID = -1;\n\n    if (value.baseTexture.valid) {\n      this.textureUpdated();\n    } else {\n      value.once('update', this.textureUpdated, this);\n    }\n  };\n\n  prototypeAccessors.texture.get = function () {\n    return this.shader.texture;\n  };\n\n  SimplePlane.prototype._render = function _render(renderer) {\n    if (this._textureID !== this.shader.texture._updateID) {\n      this.textureUpdated();\n    }\n\n    Mesh.prototype._render.call(this, renderer);\n  };\n\n  Object.defineProperties(SimplePlane.prototype, prototypeAccessors);\n  return SimplePlane;\n}(Mesh);\n/**\n * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.\n * For more robust customization, use {@link PIXI.Mesh}.\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n */\n\n\nvar SimpleMesh =\n/*@__PURE__*/\nfunction (Mesh) {\n  function SimpleMesh(texture, vertices, uvs, indices, drawMode) {\n    if (texture === void 0) texture = Texture.EMPTY;\n    var geometry = new MeshGeometry(vertices, uvs, indices);\n    geometry.getBuffer('aVertexPosition').static = false;\n    var meshMaterial = new MeshMaterial(texture);\n    Mesh.call(this, geometry, meshMaterial, null, drawMode);\n    /**\n     * upload vertices buffer each frame\n     * @member {boolean}\n     */\n\n    this.autoUpdate = true;\n  }\n\n  if (Mesh) SimpleMesh.__proto__ = Mesh;\n  SimpleMesh.prototype = Object.create(Mesh && Mesh.prototype);\n  SimpleMesh.prototype.constructor = SimpleMesh;\n  var prototypeAccessors = {\n    vertices: {\n      configurable: true\n    }\n  };\n  /**\n   * Collection of vertices data.\n   * @member {Float32Array}\n   */\n\n  prototypeAccessors.vertices.get = function () {\n    return this.geometry.getBuffer('aVertexPosition').data;\n  };\n\n  prototypeAccessors.vertices.set = function (value) {\n    this.geometry.getBuffer('aVertexPosition').data = value;\n  };\n\n  SimpleMesh.prototype._render = function _render(renderer) {\n    if (this.autoUpdate) {\n      this.geometry.getBuffer('aVertexPosition').update();\n    }\n\n    Mesh.prototype._render.call(this, renderer);\n  };\n\n  Object.defineProperties(SimpleMesh.prototype, prototypeAccessors);\n  return SimpleMesh;\n}(Mesh);\n\nvar DEFAULT_BORDER_SIZE = 10;\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @class\n * @extends PIXI.SimplePlane\n * @memberof PIXI\n *\n */\n\nvar NineSlicePlane =\n/*@__PURE__*/\nfunction (SimplePlane) {\n  function NineSlicePlane(texture, leftWidth, topHeight, rightWidth, bottomHeight) {\n    SimplePlane.call(this, Texture.WHITE, 4, 4);\n    this._origWidth = texture.orig.width;\n    this._origHeight = texture.orig.height;\n    /**\n     * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     * @override\n     */\n\n    this._width = this._origWidth;\n    /**\n     * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     * @override\n     */\n\n    this._height = this._origHeight;\n    /**\n     * The width of the left column (a)\n     *\n     * @member {number}\n     * @private\n     */\n\n    this._leftWidth = typeof leftWidth !== 'undefined' ? leftWidth : DEFAULT_BORDER_SIZE;\n    /**\n     * The width of the right column (b)\n     *\n     * @member {number}\n     * @private\n     */\n\n    this._rightWidth = typeof rightWidth !== 'undefined' ? rightWidth : DEFAULT_BORDER_SIZE;\n    /**\n     * The height of the top row (c)\n     *\n     * @member {number}\n     * @private\n     */\n\n    this._topHeight = typeof topHeight !== 'undefined' ? topHeight : DEFAULT_BORDER_SIZE;\n    /**\n     * The height of the bottom row (d)\n     *\n     * @member {number}\n     * @private\n     */\n\n    this._bottomHeight = typeof bottomHeight !== 'undefined' ? bottomHeight : DEFAULT_BORDER_SIZE; // lets call the setter to ensure all necessary updates are performed\n\n    this.texture = texture;\n  }\n\n  if (SimplePlane) NineSlicePlane.__proto__ = SimplePlane;\n  NineSlicePlane.prototype = Object.create(SimplePlane && SimplePlane.prototype);\n  NineSlicePlane.prototype.constructor = NineSlicePlane;\n  var prototypeAccessors = {\n    vertices: {\n      configurable: true\n    },\n    width: {\n      configurable: true\n    },\n    height: {\n      configurable: true\n    },\n    leftWidth: {\n      configurable: true\n    },\n    rightWidth: {\n      configurable: true\n    },\n    topHeight: {\n      configurable: true\n    },\n    bottomHeight: {\n      configurable: true\n    }\n  };\n\n  NineSlicePlane.prototype.textureUpdated = function textureUpdated() {\n    this._textureID = this.shader.texture._updateID;\n\n    this._refresh();\n  };\n\n  prototypeAccessors.vertices.get = function () {\n    return this.geometry.getBuffer('aVertexPosition').data;\n  };\n\n  prototypeAccessors.vertices.set = function (value) {\n    this.geometry.getBuffer('aVertexPosition').data = value;\n  };\n  /**\n   * Updates the horizontal vertices.\n   *\n   */\n\n\n  NineSlicePlane.prototype.updateHorizontalVertices = function updateHorizontalVertices() {\n    var vertices = this.vertices;\n\n    var scale = this._getMinScale();\n\n    vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n    vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - this._bottomHeight * scale;\n    vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n  };\n  /**\n   * Updates the vertical vertices.\n   *\n   */\n\n\n  NineSlicePlane.prototype.updateVerticalVertices = function updateVerticalVertices() {\n    var vertices = this.vertices;\n\n    var scale = this._getMinScale();\n\n    vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n    vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - this._rightWidth * scale;\n    vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n  };\n  /**\n   * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n   *\n   * @return {number} Smaller number of vertical and horizontal scale.\n   * @private\n   */\n\n\n  NineSlicePlane.prototype._getMinScale = function _getMinScale() {\n    var w = this._leftWidth + this._rightWidth;\n    var scaleW = this._width > w ? 1.0 : this._width / w;\n    var h = this._topHeight + this._bottomHeight;\n    var scaleH = this._height > h ? 1.0 : this._height / h;\n    var scale = Math.min(scaleW, scaleH);\n    return scale;\n  };\n  /**\n   * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.width.get = function () {\n    return this._width;\n  };\n\n  prototypeAccessors.width.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this._width = value;\n\n    this._refresh();\n  };\n  /**\n   * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.height.get = function () {\n    return this._height;\n  };\n\n  prototypeAccessors.height.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this._height = value;\n\n    this._refresh();\n  };\n  /**\n   * The width of the left column\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.leftWidth.get = function () {\n    return this._leftWidth;\n  };\n\n  prototypeAccessors.leftWidth.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this._leftWidth = value;\n\n    this._refresh();\n  };\n  /**\n   * The width of the right column\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.rightWidth.get = function () {\n    return this._rightWidth;\n  };\n\n  prototypeAccessors.rightWidth.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this._rightWidth = value;\n\n    this._refresh();\n  };\n  /**\n   * The height of the top row\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.topHeight.get = function () {\n    return this._topHeight;\n  };\n\n  prototypeAccessors.topHeight.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this._topHeight = value;\n\n    this._refresh();\n  };\n  /**\n   * The height of the bottom row\n   *\n   * @member {number}\n   */\n\n\n  prototypeAccessors.bottomHeight.get = function () {\n    return this._bottomHeight;\n  };\n\n  prototypeAccessors.bottomHeight.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this._bottomHeight = value;\n\n    this._refresh();\n  };\n  /**\n   * Refreshes NineSlicePlane coords. All of them.\n   */\n\n\n  NineSlicePlane.prototype._refresh = function _refresh() {\n    var texture = this.texture;\n    var uvs = this.geometry.buffers[1].data;\n    this._origWidth = texture.orig.width;\n    this._origHeight = texture.orig.height;\n\n    var _uvw = 1.0 / this._origWidth;\n\n    var _uvh = 1.0 / this._origHeight;\n\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.updateHorizontalVertices();\n    this.updateVerticalVertices();\n    this.geometry.buffers[0].update();\n    this.geometry.buffers[1].update();\n  };\n\n  Object.defineProperties(NineSlicePlane.prototype, prototypeAccessors);\n  return NineSlicePlane;\n}(SimplePlane);\n\nexport { NineSlicePlane, PlaneGeometry, RopeGeometry, SimpleMesh, SimplePlane, SimpleRope };","map":{"version":3,"sources":["../src/geometry/PlaneGeometry.js","../src/geometry/RopeGeometry.js","../src/SimpleRope.js","../src/SimplePlane.js","../src/SimpleMesh.js","../src/NineSlicePlane.js"],"names":["super","const","let","i","index"],"mappings":";;;;;;;;;;;IAEa,aAAa;AAAA;AAAA,UAAA,YAAA,EAAA;AAEtB,WAAA,aAAA,CAAY,KAAZ,EAAyB,MAAzB,EAAuC,QAAvC,EAAsD,SAAtD,EACA;+BADiB,GAAG,G;iCAAW,GAAG,G;qCAAa,GAAG,E;uCAAa,GAAG,E;AAE9DA,IAAAA,YAAAA,CAAAA,IAAAA,CAAK,IAALA;AAEA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,SAAL,GAAiB,SAAjB;AAEA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,MAAL,GAAc,MAAd;AAEA,SAAK,KAAL;;;;;wCACH,a;;;;;;0BAMD,K,GAAA,SAAA,KAAA,GACA;AACIC,QAAM,KAAK,GAAG,KAAK,QAAL,GAAgB,KAAK,SAAnCA;AACAA,QAAM,KAAK,GAAG,EAAdA;AACAA,QAAM,GAAG,GAAG,EAAZA;AACAA,QAAM,OAAO,GAAG,EAAhBA;AAEAA,QAAM,SAAS,GAAG,KAAK,QAAL,GAAgB,CAAlCA;AACAA,QAAM,SAAS,GAAG,KAAK,SAAL,GAAiB,CAAnCA;AAEAA,QAAM,KAAK,GAAI,KAAK,KAAN,GAAe,SAA7BA;AACAA,QAAM,KAAK,GAAI,KAAK,MAAN,GAAgB,SAA9BA;;AAEA,SAAKC,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,EAA5B,EACA;AACID,UAAM,CAAC,GAAI,CAAC,GAAG,KAAK,QAApBA;AACAA,UAAM,CAAC,GAAK,CAAC,GAAG,KAAK,QAAV,GAAsB,CAAjCA;AAEA,MAAA,KAAK,CAAC,IAAN,CAAW,CAAC,GAAG,KAAf,EAAsB,CAAC,GAAG,KAA1B;AACA,MAAA,GAAG,CAAC,IAAJ,CAAS,CAAC,GAAG,SAAb,EAAwB,CAAC,GAAG,SAA5B;AACH;;AAEDA,QAAM,QAAQ,GAAG,SAAS,GAAG,SAA7BA;;AAEA,SAAKC,IAAIC,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG,QAApB,EAA8BA,GAAC,EAA/B,EACA;AACIF,UAAM,IAAI,GAAGE,GAAC,GAAG,SAAjBF;AACAA,UAAM,IAAI,GAAIE,GAAC,GAAG,SAAL,GAAkB,CAA/BF;AAEAA,UAAM,KAAK,GAAI,IAAI,GAAG,KAAK,QAAb,GAAyB,IAAvCA;AACAA,UAAM,MAAM,GAAI,IAAI,GAAG,KAAK,QAAb,GAAyB,IAAzB,GAAgC,CAA/CA;AACAA,UAAM,MAAM,GAAI,CAAC,IAAI,GAAG,CAAR,IAAa,KAAK,QAAnB,GAA+B,IAA9CA;AACAA,UAAM,MAAM,GAAI,CAAC,IAAI,GAAG,CAAR,IAAa,KAAK,QAAnB,GAA+B,IAA/B,GAAsC,CAArDA;AAEA,MAAA,OAAO,CAAC,IAAR,CAAa,KAAb,EAAoB,MAApB,EAA4B,MAA5B,EACI,MADJ,EACY,MADZ,EACoB,MADpB;AAEH;;AAED,SAAK,OAAL,CAAa,CAAb,EAAgB,IAAhB,GAAuB,IAAI,YAAJ,CAAiB,KAAjB,CAAvB;AACA,SAAK,OAAL,CAAa,CAAb,EAAgB,IAAhB,GAAuB,IAAI,YAAJ,CAAiB,GAAjB,CAAvB;AACA,SAAK,WAAL,CAAiB,IAAjB,GAAwB,IAAI,WAAJ,CAAgB,OAAhB,CAAxB,CAvCJ,C;;AA0CI,SAAK,OAAL,CAAa,CAAb,EAAgB,MAAhB;AACA,SAAK,OAAL,CAAa,CAAb,EAAgB,MAAhB;AACA,SAAK,WAAL,CAAiB,MAAjB;AACH,G;;;CAjEqB,CAAS,YAAT,C;;;;;;;;;;;;;;;;;;ACc1B,IAAa,YAAY;AAAA;AAAA,UAAA,YAAA,EAAA;AAarB,WAAA,YAAA,CAAY,KAAZ,EAAyB,MAAzB,EAAiC,YAAjC,EACA;+BADiB,GAAG,G;6CAAyB,GAAG,C;AAE5CD,IAAAA,YAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM,IAAI,YAAJ,CAAiB,MAAM,CAAC,MAAP,GAAgB,CAAjC,CAANA,EACI,IAAI,YAAJ,CAAiB,MAAM,CAAC,MAAP,GAAgB,CAAjC,CADJA,EAEI,IAAI,WAAJ,CAAgB,CAAC,MAAM,CAAC,MAAP,GAAgB,CAAjB,IAAsB,CAAtC,CAFJA;;;;;;AAQA,SAAK,MAAL,GAAc,MAAd;;;;;;;AAOA,SAAK,KAAL,GAAa,KAAb;;;;;;;AAOA,SAAK,YAAL,GAAoB,YAApB;AAEA,SAAK,KAAL;;;;;uCACH,Y;;;;;;yBAKD,K,GAAA,SAAA,KAAA,GACA;AACIC,QAAM,MAAM,GAAG,KAAK,MAApBA;;AAEA,QAAI,CAAC,MAAL,EAAW;AAAE;AAAO;;AAEpBA,QAAM,YAAY,GAAG,KAAK,SAAL,CAAe,iBAAf,CAArBA;AACAA,QAAM,QAAQ,GAAG,KAAK,SAAL,CAAe,eAAf,CAAjBA;AACAA,QAAM,WAAW,GAAG,KAAK,QAAL,EAApBA,CAPJ,C;;AAUI,QAAI,MAAM,CAAC,MAAP,GAAgB,CAApB,EACA;AACI;AACH,KAbL,C;;;AAgBI,QAAI,YAAY,CAAC,IAAb,CAAkB,MAAlB,GAA2B,CAA3B,KAAiC,MAAM,CAAC,MAA5C,EACA;AACI,MAAA,YAAY,CAAC,IAAb,GAAoB,IAAI,YAAJ,CAAiB,MAAM,CAAC,MAAP,GAAgB,CAAjC,CAApB;AACA,MAAA,QAAQ,CAAC,IAAT,GAAgB,IAAI,YAAJ,CAAiB,MAAM,CAAC,MAAP,GAAgB,CAAjC,CAAhB;AACA,MAAA,WAAW,CAAC,IAAZ,GAAmB,IAAI,WAAJ,CAAgB,CAAC,MAAM,CAAC,MAAP,GAAgB,CAAjB,IAAsB,CAAtC,CAAnB;AACH;;AAEDA,QAAM,GAAG,GAAG,QAAQ,CAAC,IAArBA;AACAA,QAAM,OAAO,GAAG,WAAW,CAAC,IAA5BA;AAEA,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACA,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACA,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AACA,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAT;AAEAC,QAAI,MAAM,GAAG,CAAbA;AACAA,QAAI,IAAI,GAAG,MAAM,CAAC,CAAD,CAAjBA;AACAD,QAAM,YAAY,GAAG,KAAK,KAAL,GAAa,KAAK,YAAvCA;AACAA,QAAM,KAAK,GAAG,MAAM,CAAC,MAArBA,CAlCJ,CAkCgC;;AAE5B,SAAKC,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,EAA5B,EACA;;AAEID,UAAM,KAAK,GAAG,CAAC,GAAG,CAAlBA;;AAEA,UAAI,KAAK,YAAL,GAAoB,CAAxB,EACA;;AAEIA,YAAM,EAAE,GAAG,IAAI,CAAC,CAAL,GAAS,MAAM,CAAC,CAAD,CAAN,CAAU,CAA9BA;AACAA,YAAM,EAAE,GAAG,IAAI,CAAC,CAAL,GAAS,MAAM,CAAC,CAAD,CAAN,CAAU,CAA9BA;AACAA,YAAM,QAAQ,GAAG,IAAI,CAAC,IAAL,CAAW,EAAE,GAAG,EAAN,GAAa,EAAE,GAAG,EAA5B,CAAjBA;AAEA,QAAA,IAAI,GAAG,MAAM,CAAC,CAAD,CAAb;AACA,QAAA,MAAM,IAAI,QAAQ,GAAG,YAArB;AACH,OATD,MAWA;;AAEI,QAAA,MAAM,GAAG,CAAC,IAAI,KAAK,GAAG,CAAZ,CAAV;AACH;;AAED,MAAA,GAAG,CAAC,KAAD,CAAH,GAAa,MAAb;AACA,MAAA,GAAG,CAAC,KAAK,GAAG,CAAT,CAAH,GAAiB,CAAjB;AAEA,MAAA,GAAG,CAAC,KAAK,GAAG,CAAT,CAAH,GAAiB,MAAjB;AACA,MAAA,GAAG,CAAC,KAAK,GAAG,CAAT,CAAH,GAAiB,CAAjB;AACH;;AAEDC,QAAI,UAAU,GAAG,CAAjBA;;AAEA,SAAKA,IAAIC,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG,KAAK,GAAG,CAA5B,EAA+BA,GAAC,EAAhC,EACA;AACIF,UAAMG,OAAK,GAAGD,GAAC,GAAG,CAAlBF;AAEA,MAAA,OAAO,CAAC,UAAU,EAAX,CAAP,GAAwBG,OAAxB;AACA,MAAA,OAAO,CAAC,UAAU,EAAX,CAAP,GAAwBA,OAAK,GAAG,CAAhC;AACA,MAAA,OAAO,CAAC,UAAU,EAAX,CAAP,GAAwBA,OAAK,GAAG,CAAhC;AAEA,MAAA,OAAO,CAAC,UAAU,EAAX,CAAP,GAAwBA,OAAK,GAAG,CAAhC;AACA,MAAA,OAAO,CAAC,UAAU,EAAX,CAAP,GAAwBA,OAAK,GAAG,CAAhC;AACA,MAAA,OAAO,CAAC,UAAU,EAAX,CAAP,GAAwBA,OAAK,GAAG,CAAhC;AACH,KA7EL,C;;;AAgFI,IAAA,QAAQ,CAAC,MAAT;AACA,IAAA,WAAW,CAAC,MAAZ;AAEA,SAAK,cAAL;AACH,G;;;;;;yBAKD,c,GAAA,SAAA,cAAA,GACA;AACIH,QAAM,MAAM,GAAG,KAAK,MAApBA;;AAEA,QAAI,MAAM,CAAC,MAAP,GAAgB,CAApB,EACA;AACI;AACH;;AAEDC,QAAI,SAAS,GAAG,MAAM,CAAC,CAAD,CAAtBA;AACAA,QAAI,SAAJA;AACAA,QAAI,KAAK,GAAG,CAAZA;AACAA,QAAI,KAAK,GAAG,CAAZA;AAEAD,QAAM,QAAQ,GAAG,KAAK,OAAL,CAAa,CAAb,EAAgB,IAAjCA;AACAA,QAAM,KAAK,GAAG,MAAM,CAAC,MAArBA;;AAEA,SAAKC,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAApB,EAA2B,CAAC,EAA5B,EACA;AACID,UAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAApBA;AACAA,UAAM,KAAK,GAAG,CAAC,GAAG,CAAlBA;;AAEA,UAAI,CAAC,GAAG,MAAM,CAAC,MAAP,GAAgB,CAAxB,EACA;AACI,QAAA,SAAS,GAAG,MAAM,CAAC,CAAC,GAAG,CAAL,CAAlB;AACH,OAHD,MAKA;AACI,QAAA,SAAS,GAAG,KAAZ;AACH;;AAED,MAAA,KAAK,GAAG,EAAE,SAAS,CAAC,CAAV,GAAc,SAAS,CAAC,CAA1B,CAAR;AACA,MAAA,KAAK,GAAG,SAAS,CAAC,CAAV,GAAc,SAAS,CAAC,CAAhC;AASAA,UAAM,UAAU,GAAG,IAAI,CAAC,IAAL,CAAW,KAAK,GAAG,KAAT,GAAmB,KAAK,GAAG,KAArC,CAAnBA;AACAA,UAAM,GAAG,GAAG,KAAK,YAAL,GAAoB,CAApB,GAAwB,KAAK,YAAL,GAAoB,KAAK,KAAzB,GAAiC,CAAzD,GAA6D,KAAK,KAAL,GAAa,CAAtFA;AAEA,MAAA,KAAK,IAAI,UAAT;AACA,MAAA,KAAK,IAAI,UAAT;AAEA,MAAA,KAAK,IAAI,GAAT;AACA,MAAA,KAAK,IAAI,GAAT;AAEA,MAAA,QAAQ,CAAC,KAAD,CAAR,GAAkB,KAAK,CAAC,CAAN,GAAU,KAA5B;AACA,MAAA,QAAQ,CAAC,KAAK,GAAG,CAAT,CAAR,GAAsB,KAAK,CAAC,CAAN,GAAU,KAAhC;AACA,MAAA,QAAQ,CAAC,KAAK,GAAG,CAAT,CAAR,GAAsB,KAAK,CAAC,CAAN,GAAU,KAAhC;AACA,MAAA,QAAQ,CAAC,KAAK,GAAG,CAAT,CAAR,GAAsB,KAAK,CAAC,CAAN,GAAU,KAAhC;AAEA,MAAA,SAAS,GAAG,KAAZ;AACH;;AAED,SAAK,OAAL,CAAa,CAAb,EAAgB,MAAhB;AACH,G;;yBAED,M,GAAA,SAAA,MAAA,GACA;AACI,QAAI,KAAK,YAAL,GAAoB,CAAxB,EACA;AACI,WAAK,KAAL,GADJ,CACiB;AAChB,KAHD,MAKA;AACI,WAAK,cAAL;AACH;AACJ,G;;;CA9MoB,CAAS,YAAT,CAAzB;;;;;;;;;;;;;;;;;;ACGA,IAAa,UAAU;AAAA;AAAA,UAAA,IAAA,EAAA;AASnB,WAAA,UAAA,CAAY,OAAZ,EAAqB,MAArB,EAA6B,YAA7B,EACA;6CADyC,GAAG,C;AAExCA,QAAM,YAAY,GAAG,IAAI,YAAJ,CAAiB,OAAO,CAAC,MAAzB,EAAiC,MAAjC,EAAyC,YAAzC,CAArBA;AACAA,QAAM,YAAY,GAAG,IAAI,YAAJ,CAAiB,OAAjB,CAArBA;;AAEA,QAAI,YAAY,GAAG,CAAnB,EACA;;AAEI,MAAA,OAAO,CAAC,WAAR,CAAoB,QAApB,GAA+B,UAAU,CAAC,MAA1C;AACH;;AACDD,IAAAA,IAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM,YAANA,EAAoB,YAApBA;;;;;;;AAOA,SAAK,UAAL,GAAkB,IAAlB;;;;;qCACH,U;;uBAED,O,GAAA,SAAA,OAAA,CAAQ,QAAR,EACA;AACI,QAAI,KAAK,UAAL,IACG,KAAK,QAAL,CAAc,KAAd,KAAwB,KAAK,MAAL,CAAY,OAAZ,CAAoB,MADnD,EAEA;AACI,WAAK,QAAL,CAAc,KAAd,GAAsB,KAAK,MAAL,CAAY,OAAZ,CAAoB,MAA1C;AACA,WAAK,QAAL,CAAc,MAAd;AACH;;AAEDA,IAAAA,IAAAA,CAAAA,SAAAA,CAAM,OAANA,CAAM,IAANA,CAAa,IAAbA,EAAc,QAAdA;AACH,G;;;CAvCkB,CAAS,IAAT,CAAvB;;;;;;;;;;;;;;;;;;ACAA,IAAa,WAAW;AAAA;AAAA,UAAA,IAAA,EAAA;AAOpB,WAAA,WAAA,CAAY,OAAZ,EAAqB,SAArB,EAAgC,SAAhC,EACA;AACIC,QAAM,aAAa,GAAG,IAAI,aAAJ,CAAkB,OAAO,CAAC,KAA1B,EAAiC,OAAO,CAAC,MAAzC,EAAiD,SAAjD,EAA4D,SAA5D,CAAtBA;AACAA,QAAM,YAAY,GAAG,IAAI,YAAJ,CAAiB,OAAO,CAAC,KAAzB,CAArBA;AAEAD,IAAAA,IAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM,aAANA,EAAqB,YAArBA,EAJJ,C;;AAOI,SAAK,OAAL,GAAe,OAAf;;;;;;;;oBACH;;;;;;;;wBAMD,c,GAAA,SAAA,cAAA,GACA;AACI,SAAK,UAAL,GAAkB,KAAK,MAAL,CAAY,OAAZ,CAAoB,SAAtC;AAEA,SAAK,QAAL,CAAc,KAAd,GAAsB,KAAK,MAAL,CAAY,OAAZ,CAAoB,KAA1C;AACA,SAAK,QAAL,CAAc,MAAd,GAAuB,KAAK,MAAL,CAAY,OAAZ,CAAoB,MAA3C;AAEA,SAAK,QAAL,CAAc,KAAd;AACH,G;;AAED,EAAA,kBAAA,CAAI,OAAJ,CAAI,GAAJ,GAAI,UAAQ,KAAR,EACJ;;;;AAKI,QAAI,KAAK,MAAL,CAAY,OAAZ,KAAwB,KAA5B,EACA;AACI;AACH;;AAED,SAAK,MAAL,CAAY,OAAZ,GAAsB,KAAtB;AACA,SAAK,UAAL,GAAkB,CAAC,CAAnB;;AAEA,QAAI,KAAK,CAAC,WAAN,CAAkB,KAAtB,EACA;AACI,WAAK,cAAL;AACH,KAHD,MAKA;AACI,MAAA,KAAK,CAAC,IAAN,CAAW,QAAX,EAAqB,KAAK,cAA1B,EAA0C,IAA1C;AACH;AACJ,GAtBD;;AAwBA,EAAA,kBAAA,CAAI,OAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,WAAO,KAAK,MAAL,CAAY,OAAnB;AACH,GAHD;;wBAKA,O,GAAA,SAAA,OAAA,CAAQ,QAAR,EACA;AACI,QAAI,KAAK,UAAL,KAAoB,KAAK,MAAL,CAAY,OAAZ,CAAoB,SAA5C,EACA;AACI,WAAK,cAAL;AACH;;AAEDA,IAAAA,IAAAA,CAAAA,SAAAA,CAAM,OAANA,CAAM,IAANA,CAAa,IAAbA,EAAc,QAAdA;AACH,G;;;;CArEmB,CAAS,IAAT,CAAxB;;;;;;;;;;;ACRA,IAAa,UAAU;AAAA;AAAA,UAAA,IAAA,EAAA;AASnB,WAAA,UAAA,CAAY,OAAZ,EAAqC,QAArC,EAA+C,GAA/C,EAAoD,OAApD,EAA6D,QAA7D,EACA;mCADmB,GAAG,OAAO,CAAC,K;AAE1BC,QAAM,QAAQ,GAAG,IAAI,YAAJ,CAAiB,QAAjB,EAA2B,GAA3B,EAAgC,OAAhC,CAAjBA;AAEA,IAAA,QAAQ,CAAC,SAAT,CAAmB,iBAAnB,EAAsC,MAAtC,GAA+C,KAA/C;AAEAA,QAAM,YAAY,GAAG,IAAI,YAAJ,CAAiB,OAAjB,CAArBA;AAEAD,IAAAA,IAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM,QAANA,EAAgB,YAAhBA,EAA8B,IAA9BA,EAAoC,QAApCA;;;;;;AAMA,SAAK,UAAL,GAAkB,IAAlB;;;;;;;;oBACH;;;;;;;;AAMD,EAAA,kBAAA,CAAI,QAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,WAAO,KAAK,QAAL,CAAc,SAAd,CAAwB,iBAAxB,EAA2C,IAAlD;AACH,GAHD;;AAIA,EAAA,kBAAA,CAAI,QAAJ,CAAI,GAAJ,GAAI,UAAS,KAAT,EACJ;AACI,SAAK,QAAL,CAAc,SAAd,CAAwB,iBAAxB,EAA2C,IAA3C,GAAkD,KAAlD;AACH,GAHD;;uBAKA,O,GAAA,SAAA,OAAA,CAAQ,QAAR,EACA;AACI,QAAI,KAAK,UAAT,EACA;AACI,WAAK,QAAL,CAAc,SAAd,CAAwB,iBAAxB,EAA2C,MAA3C;AACH;;AAEDA,IAAAA,IAAAA,CAAAA,SAAAA,CAAM,OAANA,CAAM,IAANA,CAAa,IAAbA,EAAc,QAAdA;AACH,G;;;;CA/CkB,CAAS,IAAT,CAAvB;;ACRAC,IAAM,mBAAmB,GAAG,EAA5BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,IAAa,cAAc;AAAA;AAAA,UAAA,WAAA,EAAA;AASvB,WAAA,cAAA,CAAY,OAAZ,EAAqB,SAArB,EAAgC,SAAhC,EAA2C,UAA3C,EAAuD,YAAvD,EACA;AACID,IAAAA,WAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM,OAAO,CAAC,KAAdA,EAAqB,CAArBA,EAAwB,CAAxBA;AAEA,SAAK,UAAL,GAAkB,OAAO,CAAC,IAAR,CAAa,KAA/B;AACA,SAAK,WAAL,GAAmB,OAAO,CAAC,IAAR,CAAa,MAAhC;;;;;;;;AAQA,SAAK,MAAL,GAAc,KAAK,UAAnB;;;;;;;;AAQA,SAAK,OAAL,GAAe,KAAK,WAApB;;;;;;;;AAQA,SAAK,UAAL,GAAkB,OAAO,SAAP,KAAqB,WAArB,GAAmC,SAAnC,GAA+C,mBAAjE;;;;;;;;AAQA,SAAK,WAAL,GAAmB,OAAO,UAAP,KAAsB,WAAtB,GAAoC,UAApC,GAAiD,mBAApE;;;;;;;;AAQA,SAAK,UAAL,GAAkB,OAAO,SAAP,KAAqB,WAArB,GAAmC,SAAnC,GAA+C,mBAAjE;;;;;;;;AAQA,SAAK,aAAL,GAAqB,OAAO,YAAP,KAAwB,WAAxB,GAAsC,YAAtC,GAAqD,mBAA1E,CApDJ,C;;AAuDI,SAAK,OAAL,GAAe,OAAf;;;;;;;;;;;;;;;;;;;;;;;;;;oBACH;;;;2BAED,c,GAAA,SAAA,cAAA,GACA;AACI,SAAK,UAAL,GAAkB,KAAK,MAAL,CAAY,OAAZ,CAAoB,SAAtC;;AACA,SAAK,QAAL;AACH,G;;AAED,EAAA,kBAAA,CAAI,QAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,WAAO,KAAK,QAAL,CAAc,SAAd,CAAwB,iBAAxB,EAA2C,IAAlD;AACH,GAHD;;AAKA,EAAA,kBAAA,CAAI,QAAJ,CAAI,GAAJ,GAAI,UAAS,KAAT,EACJ;AACI,SAAK,QAAL,CAAc,SAAd,CAAwB,iBAAxB,EAA2C,IAA3C,GAAkD,KAAlD;AACH,GAHD;;;;;;;2BASA,wB,GAAA,SAAA,wBAAA,GACA;AACIC,QAAM,QAAQ,GAAG,KAAK,QAAtBA;;AAEAA,QAAM,KAAK,GAAG,KAAK,YAAL,EAAdA;;AAEA,IAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,QAAQ,CAAC,EAAD,CAAR,GAAe,QAAQ,CAAC,EAAD,CAAR,GAAe,QAAQ,CAAC,EAAD,CAAR,GAAe,KAAK,UAAL,GAAkB,KAA7E;AACA,IAAA,QAAQ,CAAC,EAAD,CAAR,GAAe,QAAQ,CAAC,EAAD,CAAR,GAAe,QAAQ,CAAC,EAAD,CAAR,GAAe,QAAQ,CAAC,EAAD,CAAR,GAAe,KAAK,OAAL,GAAgB,KAAK,aAAL,GAAqB,KAAjG;AACA,IAAA,QAAQ,CAAC,EAAD,CAAR,GAAe,QAAQ,CAAC,EAAD,CAAR,GAAe,QAAQ,CAAC,EAAD,CAAR,GAAe,QAAQ,CAAC,EAAD,CAAR,GAAe,KAAK,OAAjE;AACH,G;;;;;;;2BAMD,sB,GAAA,SAAA,sBAAA,GACA;AACIA,QAAM,QAAQ,GAAG,KAAK,QAAtBA;;AAEAA,QAAM,KAAK,GAAG,KAAK,YAAL,EAAdA;;AAEA,IAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,QAAQ,CAAC,EAAD,CAAR,GAAe,QAAQ,CAAC,EAAD,CAAR,GAAe,QAAQ,CAAC,EAAD,CAAR,GAAe,KAAK,UAAL,GAAkB,KAA7E;AACA,IAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,QAAQ,CAAC,EAAD,CAAR,GAAe,QAAQ,CAAC,EAAD,CAAR,GAAe,QAAQ,CAAC,EAAD,CAAR,GAAe,KAAK,MAAL,GAAe,KAAK,WAAL,GAAmB,KAA7F;AACA,IAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,QAAQ,CAAC,EAAD,CAAR,GAAe,QAAQ,CAAC,EAAD,CAAR,GAAe,QAAQ,CAAC,EAAD,CAAR,GAAe,KAAK,MAAhE;AACH,G;;;;;;;;;2BAQD,Y,GAAA,SAAA,YAAA,GACA;AACIA,QAAM,CAAC,GAAG,KAAK,UAAL,GAAkB,KAAK,WAAjCA;AACAA,QAAM,MAAM,GAAG,KAAK,MAAL,GAAc,CAAd,GAAkB,GAAlB,GAAwB,KAAK,MAAL,GAAc,CAArDA;AAEAA,QAAM,CAAC,GAAG,KAAK,UAAL,GAAkB,KAAK,aAAjCA;AACAA,QAAM,MAAM,GAAG,KAAK,OAAL,GAAe,CAAf,GAAmB,GAAnB,GAAyB,KAAK,OAAL,GAAe,CAAvDA;AAEAA,QAAM,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,MAAT,EAAiB,MAAjB,CAAdA;AAEA,WAAO,KAAP;AACH,G;;;;;;;;AAOD,EAAA,kBAAA,CAAI,KAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,WAAO,KAAK,MAAZ;AACH,GAHD;;AAKA,EAAA,kBAAA,CAAI,KAAJ,CAAI,GAAJ,GAAI,UAAM,KAAN,EAAW;AACf;AACI,SAAK,MAAL,GAAc,KAAd;;AACA,SAAK,QAAL;AACH,GAJD;;;;;;;;AAWA,EAAA,kBAAA,CAAI,MAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,WAAO,KAAK,OAAZ;AACH,GAHD;;AAKA,EAAA,kBAAA,CAAI,MAAJ,CAAI,GAAJ,GAAI,UAAO,KAAP,EAAY;AAChB;AACI,SAAK,OAAL,GAAe,KAAf;;AACA,SAAK,QAAL;AACH,GAJD;;;;;;;;AAWA,EAAA,kBAAA,CAAI,SAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,WAAO,KAAK,UAAZ;AACH,GAHD;;AAKA,EAAA,kBAAA,CAAI,SAAJ,CAAI,GAAJ,GAAI,UAAU,KAAV,EAAe;AACnB;AACI,SAAK,UAAL,GAAkB,KAAlB;;AACA,SAAK,QAAL;AACH,GAJD;;;;;;;;AAWA,EAAA,kBAAA,CAAI,UAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,WAAO,KAAK,WAAZ;AACH,GAHD;;AAKA,EAAA,kBAAA,CAAI,UAAJ,CAAI,GAAJ,GAAI,UAAW,KAAX,EAAgB;AACpB;AACI,SAAK,WAAL,GAAmB,KAAnB;;AACA,SAAK,QAAL;AACH,GAJD;;;;;;;;AAWA,EAAA,kBAAA,CAAI,SAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,WAAO,KAAK,UAAZ;AACH,GAHD;;AAKA,EAAA,kBAAA,CAAI,SAAJ,CAAI,GAAJ,GAAI,UAAU,KAAV,EAAe;AACnB;AACI,SAAK,UAAL,GAAkB,KAAlB;;AACA,SAAK,QAAL;AACH,GAJD;;;;;;;;AAWA,EAAA,kBAAA,CAAI,YAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,WAAO,KAAK,aAAZ;AACH,GAHD;;AAKA,EAAA,kBAAA,CAAI,YAAJ,CAAI,GAAJ,GAAI,UAAa,KAAb,EAAkB;AACtB;AACI,SAAK,aAAL,GAAqB,KAArB;;AACA,SAAK,QAAL;AACH,GAJD;;;;;;2BASA,Q,GAAA,SAAA,QAAA,GACA;AACIA,QAAM,OAAO,GAAG,KAAK,OAArBA;AAEAA,QAAM,GAAG,GAAG,KAAK,QAAL,CAAc,OAAd,CAAsB,CAAtB,EAAyB,IAArCA;AAEA,SAAK,UAAL,GAAkB,OAAO,CAAC,IAAR,CAAa,KAA/B;AACA,SAAK,WAAL,GAAmB,OAAO,CAAC,IAAR,CAAa,MAAhC;;AAEAA,QAAM,IAAI,GAAG,MAAM,KAAK,UAAxBA;;AACAA,QAAM,IAAI,GAAG,MAAM,KAAK,WAAxBA;;AAEA,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,EAAD,CAAH,GAAU,GAAG,CAAC,EAAD,CAAH,GAAU,CAAtC;AACA,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,CAAD,CAAH,GAAS,CAApC;AACA,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,EAAD,CAAH,GAAU,GAAG,CAAC,EAAD,CAAH,GAAU,GAAG,CAAC,EAAD,CAAH,GAAU,CAAvC;AACA,IAAA,GAAG,CAAC,EAAD,CAAH,GAAU,GAAG,CAAC,EAAD,CAAH,GAAU,GAAG,CAAC,EAAD,CAAH,GAAU,GAAG,CAAC,EAAD,CAAH,GAAU,CAAxC;AAEA,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,EAAD,CAAH,GAAU,GAAG,CAAC,EAAD,CAAH,GAAU,GAAG,CAAC,EAAD,CAAH,GAAU,IAAI,GAAG,KAAK,UAAnD;AACA,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,EAAD,CAAH,GAAU,GAAG,CAAC,EAAD,CAAH,GAAU,GAAG,CAAC,EAAD,CAAH,GAAU,IAAK,IAAI,GAAG,KAAK,WAAxD;AACA,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAG,CAAC,EAAD,CAAH,GAAU,GAAG,CAAC,EAAD,CAAH,GAAU,GAAG,CAAC,EAAD,CAAH,GAAU,IAAI,GAAG,KAAK,UAAnD;AACA,IAAA,GAAG,CAAC,EAAD,CAAH,GAAU,GAAG,CAAC,EAAD,CAAH,GAAU,GAAG,CAAC,EAAD,CAAH,GAAU,GAAG,CAAC,EAAD,CAAH,GAAU,IAAK,IAAI,GAAG,KAAK,aAAzD;AAEA,SAAK,wBAAL;AACA,SAAK,sBAAL;AAEA,SAAK,QAAL,CAAc,OAAd,CAAsB,CAAtB,EAAyB,MAAzB;AACA,SAAK,QAAL,CAAc,OAAd,CAAsB,CAAtB,EAAyB,MAAzB;AACH,G;;;;CAnQsB,CAAS,WAAT,CAA3B","sourcesContent":["import { MeshGeometry } from '@pixi/mesh';\n\nexport class PlaneGeometry extends MeshGeometry\n{\n    constructor(width = 100, height = 100, segWidth = 10, segHeight = 10)\n    {\n        super();\n\n        this.segWidth = segWidth;\n        this.segHeight = segHeight;\n\n        this.width = width;\n        this.height = height;\n\n        this.build();\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @private\n     */\n    build()\n    {\n        const total = this.segWidth * this.segHeight;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const segmentsX = this.segWidth - 1;\n        const segmentsY = this.segHeight - 1;\n\n        const sizeX = (this.width) / segmentsX;\n        const sizeY = (this.height) / segmentsY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.segWidth);\n            const y = ((i / this.segWidth) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / segmentsX, y / segmentsY);\n        }\n\n        const totalSub = segmentsX * segmentsY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % segmentsX;\n            const ypos = (i / segmentsX) | 0;\n\n            const value = (ypos * this.segWidth) + xpos;\n            const value2 = (ypos * this.segWidth) + xpos + 1;\n            const value3 = ((ypos + 1) * this.segWidth) + xpos;\n            const value4 = ((ypos + 1) * this.segWidth) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint16Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n","import { MeshGeometry } from '@pixi/mesh';\n/**\n * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n *\n * ```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * const rope = new PIXI.RopeGeometry(100, points);\n * ```\n *\n * @class\n * @extends PIXI.MeshGeometry\n * @memberof PIXI\n *\n */\nexport class RopeGeometry extends MeshGeometry\n{\n    /**\n     * @param {number} [width=200] - The width (i.e., thickness) of the rope.\n     * @param {PIXI.Point[]} [points] - An array of {@link PIXI.Point} objects to construct this rope.\n     * @param {number} [textureScale=0] - By default the rope texture will be stretched to match\n     *     rope length. If textureScale is positive this value will be treated as a scaling\n     *     factor and the texture will preserve its aspect ratio instead. To create a tiling rope\n     *     set baseTexture.wrapMode to {@link PIXI.WRAP_MODES.REPEAT} and use a power of two texture,\n     *     then set textureScale=1 to keep the original texture pixel size.\n     *     In order to reduce alpha channel artifacts provide a larger texture and downsample -\n     *     i.e. set textureScale=0.5 to scale it down twice.\n     */\n    constructor(width = 200, points, textureScale = 0)\n    {\n        super(new Float32Array(points.length * 4),\n            new Float32Array(points.length * 4),\n            new Uint16Array((points.length - 1) * 6));\n\n        /**\n         * An array of points that determine the rope\n         * @member {PIXI.Point[]}\n         */\n        this.points = points;\n\n        /**\n         * The width (i.e., thickness) of the rope.\n         * @member {number}\n         * @readOnly\n         */\n        this.width = width;\n\n        /**\n         * Rope texture scale, if zero then the rope texture is stretched.\n         * @member {number}\n         * @readOnly\n         */\n        this.textureScale = textureScale;\n\n        this.build();\n    }\n    /**\n     * Refreshes Rope indices and uvs\n     * @private\n     */\n    build()\n    {\n        const points = this.points;\n\n        if (!points) return;\n\n        const vertexBuffer = this.getBuffer('aVertexPosition');\n        const uvBuffer = this.getBuffer('aTextureCoord');\n        const indexBuffer = this.getIndex();\n\n        // if too little points, or texture hasn't got UVs set yet just move on.\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        // if the number of points has changed we will need to recreate the arraybuffers\n        if (vertexBuffer.data.length / 4 !== points.length)\n        {\n            vertexBuffer.data = new Float32Array(points.length * 4);\n            uvBuffer.data = new Float32Array(points.length * 4);\n            indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n        }\n\n        const uvs = uvBuffer.data;\n        const indices = indexBuffer.data;\n\n        uvs[0] = 0;\n        uvs[1] = 0;\n        uvs[2] = 0;\n        uvs[3] = 1;\n\n        let amount = 0;\n        let prev = points[0];\n        const textureWidth = this.width * this.textureScale;\n        const total = points.length; // - 1;\n\n        for (let i = 0; i < total; i++)\n        {\n            // time to do some smart drawing!\n            const index = i * 4;\n\n            if (this.textureScale > 0)\n            {\n                // calculate pixel distance from previous point\n                const dx = prev.x - points[i].x;\n                const dy = prev.y - points[i].y;\n                const distance = Math.sqrt((dx * dx) + (dy * dy));\n\n                prev = points[i];\n                amount += distance / textureWidth;\n            }\n            else\n            {\n                // stretch texture\n                amount = i / (total - 1);\n            }\n\n            uvs[index] = amount;\n            uvs[index + 1] = 0;\n\n            uvs[index + 2] = amount;\n            uvs[index + 3] = 1;\n        }\n\n        let indexCount = 0;\n\n        for (let i = 0; i < total - 1; i++)\n        {\n            const index = i * 2;\n\n            indices[indexCount++] = index;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 2;\n\n            indices[indexCount++] = index + 2;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 3;\n        }\n\n        // ensure that the changes are uploaded\n        uvBuffer.update();\n        indexBuffer.update();\n\n        this.updateVertices();\n    }\n\n    /**\n     * refreshes vertices of Rope mesh\n     */\n    updateVertices()\n    {\n        const points = this.points;\n\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        let lastPoint = points[0];\n        let nextPoint;\n        let perpX = 0;\n        let perpY = 0;\n\n        const vertices = this.buffers[0].data;\n        const total = points.length;\n\n        for (let i = 0; i < total; i++)\n        {\n            const point = points[i];\n            const index = i * 4;\n\n            if (i < points.length - 1)\n            {\n                nextPoint = points[i + 1];\n            }\n            else\n            {\n                nextPoint = point;\n            }\n\n            perpY = -(nextPoint.x - lastPoint.x);\n            perpX = nextPoint.y - lastPoint.y;\n\n            let ratio = (1 - (i / (total - 1))) * 10;\n\n            if (ratio > 1)\n            {\n                ratio = 1;\n            }\n\n            const perpLength = Math.sqrt((perpX * perpX) + (perpY * perpY));\n            const num = this.textureScale > 0 ? this.textureScale * this.width / 2 : this.width / 2;\n\n            perpX /= perpLength;\n            perpY /= perpLength;\n\n            perpX *= num;\n            perpY *= num;\n\n            vertices[index] = point.x + perpX;\n            vertices[index + 1] = point.y + perpY;\n            vertices[index + 2] = point.x - perpX;\n            vertices[index + 3] = point.y - perpY;\n\n            lastPoint = point;\n        }\n\n        this.buffers[0].update();\n    }\n\n    update()\n    {\n        if (this.textureScale > 0)\n        {\n            this.build(); // we need to update UVs\n        }\n        else\n        {\n            this.updateVertices();\n        }\n    }\n}\n","import { Mesh, MeshMaterial } from '@pixi/mesh';\nimport { WRAP_MODES } from '@pixi/constants';\nimport { RopeGeometry } from './geometry/RopeGeometry';\n\n/**\n * The rope allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let rope = new PIXI.SimpleRope(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n *\n */\nexport class SimpleRope extends Mesh\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the rope.\n     * @param {PIXI.Point[]} points - An array of {@link PIXI.Point} objects to construct this rope.\n     * @param {number} [textureScale=0] - Optional. Positive values scale rope texture\n     * keeping its aspect ratio. You can reduce alpha channel artifacts by providing a larger texture\n     * and downsampling here. If set to zero, texture will be streched instead.\n     */\n    constructor(texture, points, textureScale = 0)\n    {\n        const ropeGeometry = new RopeGeometry(texture.height, points, textureScale);\n        const meshMaterial = new MeshMaterial(texture);\n\n        if (textureScale > 0)\n        {\n            // attempt to set UV wrapping, will fail on non-power of two textures\n            texture.baseTexture.wrapMode = WRAP_MODES.REPEAT;\n        }\n        super(ropeGeometry, meshMaterial);\n\n        /**\n         * re-calculate vertices by rope points each frame\n         *\n         * @member {boolean}\n         */\n        this.autoUpdate = true;\n    }\n\n    _render(renderer)\n    {\n        if (this.autoUpdate\n            || this.geometry.width !== this.shader.texture.height)\n        {\n            this.geometry.width = this.shader.texture.height;\n            this.geometry.update();\n        }\n\n        super._render(renderer);\n    }\n}\n","import { Texture } from '@pixi/core';\nimport { Mesh, MeshMaterial } from '@pixi/mesh';\nimport { PlaneGeometry } from './geometry/PlaneGeometry';\n\n/**\n * The SimplePlane allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let SimplePlane = new PIXI.SimplePlane(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n *\n */\nexport class SimplePlane extends Mesh\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the SimplePlane.\n     * @param {number} verticesX - The number of vertices in the x-axis\n     * @param {number} verticesY - The number of vertices in the y-axis\n     */\n    constructor(texture, verticesX, verticesY)\n    {\n        const planeGeometry = new PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n        const meshMaterial = new MeshMaterial(Texture.WHITE);\n\n        super(planeGeometry, meshMaterial);\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n    }\n\n    /**\n     * Method used for overrides, to do something in case texture frame was changed.\n     * Meshes based on plane can override it and change more details based on texture.\n     */\n    textureUpdated()\n    {\n        this._textureID = this.shader.texture._updateID;\n\n        this.geometry.width = this.shader.texture.width;\n        this.geometry.height = this.shader.texture.height;\n\n        this.geometry.build();\n    }\n\n    set texture(value)\n    {\n        // Track texture same way sprite does.\n        // For generated meshes like NineSlicePlane it can change the geometry.\n        // Unfortunately, this method might not work if you directly change texture in material.\n\n        if (this.shader.texture === value)\n        {\n            return;\n        }\n\n        this.shader.texture = value;\n        this._textureID = -1;\n\n        if (value.baseTexture.valid)\n        {\n            this.textureUpdated();\n        }\n        else\n        {\n            value.once('update', this.textureUpdated, this);\n        }\n    }\n\n    get texture()\n    {\n        return this.shader.texture;\n    }\n\n    _render(renderer)\n    {\n        if (this._textureID !== this.shader.texture._updateID)\n        {\n            this.textureUpdated();\n        }\n\n        super._render(renderer);\n    }\n}\n","import { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\nimport { Texture } from '@pixi/core';\n\n/**\n * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.\n * For more robust customization, use {@link PIXI.Mesh}.\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n */\nexport class SimpleMesh extends Mesh\n{\n    /**\n     * @param {PIXI.Texture} [texture=Texture.EMPTY] - The texture to use\n     * @param {Float32Array} [vertices] - if you want to specify the vertices\n     * @param {Float32Array} [uvs] - if you want to specify the uvs\n     * @param {Uint16Array} [indices] - if you want to specify the indices\n     * @param {number} [drawMode] - the drawMode, can be any of the Mesh.DRAW_MODES consts\n     */\n    constructor(texture = Texture.EMPTY, vertices, uvs, indices, drawMode)\n    {\n        const geometry = new MeshGeometry(vertices, uvs, indices);\n\n        geometry.getBuffer('aVertexPosition').static = false;\n\n        const meshMaterial = new MeshMaterial(texture);\n\n        super(geometry, meshMaterial, null, drawMode);\n\n        /**\n         * upload vertices buffer each frame\n         * @member {boolean}\n         */\n        this.autoUpdate = true;\n    }\n\n    /**\n     * Collection of vertices data.\n     * @member {Float32Array}\n     */\n    get vertices()\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n    set vertices(value)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    _render(renderer)\n    {\n        if (this.autoUpdate)\n        {\n            this.geometry.getBuffer('aVertexPosition').update();\n        }\n\n        super._render(renderer);\n    }\n}\n","import { Texture } from '@pixi/core';\nimport { SimplePlane } from './SimplePlane';\n\nconst DEFAULT_BORDER_SIZE = 10;\n\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @class\n * @extends PIXI.SimplePlane\n * @memberof PIXI\n *\n */\nexport class NineSlicePlane extends SimplePlane\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the NineSlicePlane.\n     * @param {number} [leftWidth=10] size of the left vertical bar (A)\n     * @param {number} [topHeight=10] size of the top horizontal bar (C)\n     * @param {number} [rightWidth=10] size of the right vertical bar (B)\n     * @param {number} [bottomHeight=10] size of the bottom horizontal bar (D)\n     */\n    constructor(texture, leftWidth, topHeight, rightWidth, bottomHeight)\n    {\n        super(Texture.WHITE, 4, 4);\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        /**\n         * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         * @override\n         */\n        this._width = this._origWidth;\n\n        /**\n         * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         * @override\n         */\n        this._height = this._origHeight;\n\n        /**\n         * The width of the left column (a)\n         *\n         * @member {number}\n         * @private\n         */\n        this._leftWidth = typeof leftWidth !== 'undefined' ? leftWidth : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The width of the right column (b)\n         *\n         * @member {number}\n         * @private\n         */\n        this._rightWidth = typeof rightWidth !== 'undefined' ? rightWidth : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The height of the top row (c)\n         *\n         * @member {number}\n         * @private\n         */\n        this._topHeight = typeof topHeight !== 'undefined' ? topHeight : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The height of the bottom row (d)\n         *\n         * @member {number}\n         * @private\n         */\n        this._bottomHeight = typeof bottomHeight !== 'undefined' ? bottomHeight : DEFAULT_BORDER_SIZE;\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n    }\n\n    textureUpdated()\n    {\n        this._textureID = this.shader.texture._updateID;\n        this._refresh();\n    }\n\n    get vertices()\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n\n    set vertices(value)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    /**\n     * Updates the horizontal vertices.\n     *\n     */\n    updateHorizontalVertices()\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n        vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - (this._bottomHeight * scale);\n        vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n    }\n\n    /**\n     * Updates the vertical vertices.\n     *\n     */\n    updateVerticalVertices()\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n        vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - (this._rightWidth * scale);\n        vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n    }\n\n    /**\n     * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n     *\n     * @return {number} Smaller number of vertical and horizontal scale.\n     * @private\n     */\n    _getMinScale()\n    {\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this._width > w ? 1.0 : this._width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this._height > h ? 1.0 : this._height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        return scale;\n    }\n\n    /**\n     * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        return this._width;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this._width = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        return this._height;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this._height = value;\n        this._refresh();\n    }\n\n    /**\n     * The width of the left column\n     *\n     * @member {number}\n     */\n    get leftWidth()\n    {\n        return this._leftWidth;\n    }\n\n    set leftWidth(value) // eslint-disable-line require-jsdoc\n    {\n        this._leftWidth = value;\n        this._refresh();\n    }\n\n    /**\n     * The width of the right column\n     *\n     * @member {number}\n     */\n    get rightWidth()\n    {\n        return this._rightWidth;\n    }\n\n    set rightWidth(value) // eslint-disable-line require-jsdoc\n    {\n        this._rightWidth = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the top row\n     *\n     * @member {number}\n     */\n    get topHeight()\n    {\n        return this._topHeight;\n    }\n\n    set topHeight(value) // eslint-disable-line require-jsdoc\n    {\n        this._topHeight = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the bottom row\n     *\n     * @member {number}\n     */\n    get bottomHeight()\n    {\n        return this._bottomHeight;\n    }\n\n    set bottomHeight(value) // eslint-disable-line require-jsdoc\n    {\n        this._bottomHeight = value;\n        this._refresh();\n    }\n\n    /**\n     * Refreshes NineSlicePlane coords. All of them.\n     */\n    _refresh()\n    {\n        const texture = this.texture;\n\n        const uvs = this.geometry.buffers[1].data;\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        const _uvw = 1.0 / this._origWidth;\n        const _uvh = 1.0 / this._origHeight;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.updateHorizontalVertices();\n        this.updateVerticalVertices();\n\n        this.geometry.buffers[0].update();\n        this.geometry.buffers[1].update();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}