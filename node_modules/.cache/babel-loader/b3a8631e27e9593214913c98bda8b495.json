{"ast":null,"code":"/*!\n * @pixi/app - v5.2.1\n * Compiled Tue, 28 Jan 2020 23:33:11 UTC\n *\n * @pixi/app is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Container } from '@pixi/display';\nimport { autoDetectRenderer } from '@pixi/core';\n/**\n * Convenience class to create a new PIXI application.\n *\n * This class automatically creates the renderer, ticker and root container.\n *\n * @example\n * // Create the application\n * const app = new PIXI.Application();\n *\n * // Add the view to the DOM\n * document.body.appendChild(app.view);\n *\n * // ex, add display objects\n * app.stage.addChild(PIXI.Sprite.from('something.png'));\n *\n * @class\n * @memberof PIXI\n */\n\nvar Application = function Application(options) {\n  var this$1 = this; // The default options\n\n  options = Object.assign({\n    forceCanvas: false\n  }, options);\n  /**\n   * WebGL renderer if available, otherwise CanvasRenderer.\n   * @member {PIXI.Renderer|PIXI.CanvasRenderer}\n   */\n\n  this.renderer = autoDetectRenderer(options);\n  /**\n   * The root display container that's rendered.\n   * @member {PIXI.Container}\n   */\n\n  this.stage = new Container(); // install plugins here\n\n  Application._plugins.forEach(function (plugin) {\n    plugin.init.call(this$1, options);\n  });\n};\n\nvar prototypeAccessors = {\n  view: {\n    configurable: true\n  },\n  screen: {\n    configurable: true\n  }\n};\n/**\n * Register a middleware plugin for the application\n * @static\n * @param {PIXI.Application.Plugin} plugin - Plugin being installed\n */\n\nApplication.registerPlugin = function registerPlugin(plugin) {\n  Application._plugins.push(plugin);\n};\n/**\n * Render the current stage.\n */\n\n\nApplication.prototype.render = function render() {\n  this.renderer.render(this.stage);\n};\n/**\n * Reference to the renderer's canvas element.\n * @member {HTMLCanvasElement}\n * @readonly\n */\n\n\nprototypeAccessors.view.get = function () {\n  return this.renderer.view;\n};\n/**\n * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.\n * @member {PIXI.Rectangle}\n * @readonly\n */\n\n\nprototypeAccessors.screen.get = function () {\n  return this.renderer.screen;\n};\n/**\n * Destroy and don't use after this.\n * @param {Boolean} [removeView=false] Automatically remove canvas from DOM.\n * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n *  have been set to that value\n * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n *  method called as well. 'stageOptions' will be passed on to those calls.\n * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n *  to true. Should it destroy the texture of the child sprite\n * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n *  to true. Should it destroy the base texture of the child sprite\n */\n\n\nApplication.prototype.destroy = function destroy(removeView, stageOptions) {\n  var this$1 = this; // Destroy plugins in the opposite order\n  // which they were constructed\n\n  var plugins = Application._plugins.slice(0);\n\n  plugins.reverse();\n  plugins.forEach(function (plugin) {\n    plugin.destroy.call(this$1);\n  });\n  this.stage.destroy(stageOptions);\n  this.stage = null;\n  this.renderer.destroy(removeView);\n  this.renderer = null;\n  this._options = null;\n};\n\nObject.defineProperties(Application.prototype, prototypeAccessors);\n/**\n * @memberof PIXI.Application\n * @typedef {object} Plugin\n * @property {function} init - Called when Application is constructed, scoped to Application instance.\n *  Passes in `options` as the only argument, which are Application constructor options.\n * @property {function} destroy - Called when destroying Application, scoped to Application instance\n */\n\n/**\n * Collection of installed plugins.\n * @static\n * @private\n * @type {PIXI.Application.Plugin[]}\n */\n\nApplication._plugins = [];\n/**\n * Middleware for for Application's resize functionality\n * @private\n * @class\n */\n\nvar ResizePlugin = function ResizePlugin() {};\n\nResizePlugin.init = function init(options) {\n  var this$1 = this;\n  /**\n   * The element or window to resize the application to.\n   * @type {Window|HTMLElement}\n   * @name resizeTo\n   * @memberof PIXI.Application#\n   */\n\n  Object.defineProperty(this, 'resizeTo', {\n    set: function set(dom) {\n      window.removeEventListener('resize', this.resize);\n      this._resizeTo = dom;\n\n      if (dom) {\n        window.addEventListener('resize', this.resize);\n        this.resize();\n      }\n    },\n    get: function get() {\n      return this._resizeTo;\n    }\n  });\n  /**\n   * If `resizeTo` is set, calling this function\n   * will resize to the width and height of that element.\n   * @method PIXI.Application#resize\n   */\n\n  this.resize = function () {\n    if (this$1._resizeTo) {\n      // Resize to the window\n      if (this$1._resizeTo === window) {\n        this$1.renderer.resize(window.innerWidth, window.innerHeight);\n      } // Resize to other HTML entities\n      else {\n          this$1.renderer.resize(this$1._resizeTo.clientWidth, this$1._resizeTo.clientHeight);\n        }\n    }\n  }; // On resize\n\n\n  this._resizeTo = null;\n  this.resizeTo = options.resizeTo || null;\n};\n/**\n * Clean up the ticker, scoped to application\n * @static\n * @private\n */\n\n\nResizePlugin.destroy = function destroy() {\n  this.resizeTo = null;\n  this.resize = null;\n};\n\nApplication.registerPlugin(ResizePlugin);\nexport { Application };","map":{"version":3,"sources":["../src/Application.js","../src/ResizePlugin.js","../src/index.js"],"names":["this","const"],"mappings":"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","sourcesContent":["import { Container } from '@pixi/display';\nimport { autoDetectRenderer } from '@pixi/core';\n\n/**\n * Convenience class to create a new PIXI application.\n *\n * This class automatically creates the renderer, ticker and root container.\n *\n * @example\n * // Create the application\n * const app = new PIXI.Application();\n *\n * // Add the view to the DOM\n * document.body.appendChild(app.view);\n *\n * // ex, add display objects\n * app.stage.addChild(PIXI.Sprite.from('something.png'));\n *\n * @class\n * @memberof PIXI\n */\nexport class Application\n{\n    /**\n     * @param {object} [options] - The optional renderer parameters.\n     * @param {boolean} [options.autoStart=true] - Automatically starts the rendering after the construction.\n     *     **Note**: Setting this parameter to false does NOT stop the shared ticker even if you set\n     *     options.sharedTicker to true in case that it is already started. Stop it by your own.\n     * @param {number} [options.width=800] - The width of the renderers view.\n     * @param {number} [options.height=600] - The height of the renderers view.\n     * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.\n     * @param {boolean} [options.transparent=false] - If the render view is transparent.\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n     *   resolutions other than 1.\n     * @param {boolean} [options.antialias=false] - Sets antialias\n     * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation, enable this if you\n     *  need to call toDataUrl on the WebGL context.\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer, retina would be 2.\n     * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this\n     *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise\n     *   it is ignored.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n     *   not before the new render pass.\n     * @param {boolean} [options.forceFXAA=false] - Forces FXAA antialiasing to be used over native.\n     *  FXAA is faster, but may not always look as great. **(WebGL only)**.\n     * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to \"high-performance\"\n     *  for devices with dual graphics card. **(WebGL only)**.\n     * @param {boolean} [options.sharedTicker=false] - `true` to use PIXI.Ticker.shared, `false` to create new ticker.\n     *  If set to false, you cannot register a handler to occur before anything that runs on the shared ticker.\n     *  The system ticker will always run before both the shared ticker and the app ticker.\n     * @param {boolean} [options.sharedLoader=false] - `true` to use PIXI.Loader.shared, `false` to create new Loader.\n     * @param {Window|HTMLElement} [options.resizeTo] - Element to automatically resize stage to.\n     */\n    constructor(options)\n    {\n        // The default options\n        options = Object.assign({\n            forceCanvas: false,\n        }, options);\n\n        /**\n         * WebGL renderer if available, otherwise CanvasRenderer.\n         * @member {PIXI.Renderer|PIXI.CanvasRenderer}\n         */\n        this.renderer = autoDetectRenderer(options);\n\n        /**\n         * The root display container that's rendered.\n         * @member {PIXI.Container}\n         */\n        this.stage = new Container();\n\n        // install plugins here\n        Application._plugins.forEach((plugin) =>\n        {\n            plugin.init.call(this, options);\n        });\n    }\n\n    /**\n     * Register a middleware plugin for the application\n     * @static\n     * @param {PIXI.Application.Plugin} plugin - Plugin being installed\n     */\n    static registerPlugin(plugin)\n    {\n        Application._plugins.push(plugin);\n    }\n\n    /**\n     * Render the current stage.\n     */\n    render()\n    {\n        this.renderer.render(this.stage);\n    }\n\n    /**\n     * Reference to the renderer's canvas element.\n     * @member {HTMLCanvasElement}\n     * @readonly\n     */\n    get view()\n    {\n        return this.renderer.view;\n    }\n\n    /**\n     * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.\n     * @member {PIXI.Rectangle}\n     * @readonly\n     */\n    get screen()\n    {\n        return this.renderer.screen;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @param {Boolean} [removeView=false] Automatically remove canvas from DOM.\n     * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'stageOptions' will be passed on to those calls.\n     * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the texture of the child sprite\n     * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the base texture of the child sprite\n     */\n    destroy(removeView, stageOptions)\n    {\n        // Destroy plugins in the opposite order\n        // which they were constructed\n        const plugins = Application._plugins.slice(0);\n\n        plugins.reverse();\n        plugins.forEach((plugin) =>\n        {\n            plugin.destroy.call(this);\n        });\n\n        this.stage.destroy(stageOptions);\n        this.stage = null;\n\n        this.renderer.destroy(removeView);\n        this.renderer = null;\n\n        this._options = null;\n    }\n}\n\n/**\n * @memberof PIXI.Application\n * @typedef {object} Plugin\n * @property {function} init - Called when Application is constructed, scoped to Application instance.\n *  Passes in `options` as the only argument, which are Application constructor options.\n * @property {function} destroy - Called when destroying Application, scoped to Application instance\n */\n\n/**\n * Collection of installed plugins.\n * @static\n * @private\n * @type {PIXI.Application.Plugin[]}\n */\nApplication._plugins = [];\n","/**\n * Middleware for for Application's resize functionality\n * @private\n * @class\n */\nexport class ResizePlugin\n{\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    static init(options)\n    {\n        /**\n         * The element or window to resize the application to.\n         * @type {Window|HTMLElement}\n         * @name resizeTo\n         * @memberof PIXI.Application#\n         */\n        Object.defineProperty(this, 'resizeTo',\n            {\n                set(dom)\n                {\n                    window.removeEventListener('resize', this.resize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        window.addEventListener('resize', this.resize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * If `resizeTo` is set, calling this function\n         * will resize to the width and height of that element.\n         * @method PIXI.Application#resize\n         */\n        this.resize = () =>\n        {\n            if (this._resizeTo)\n            {\n                // Resize to the window\n                if (this._resizeTo === window)\n                {\n                    this.renderer.resize(\n                        window.innerWidth,\n                        window.innerHeight\n                    );\n                }\n                // Resize to other HTML entities\n                else\n                {\n                    this.renderer.resize(\n                        this._resizeTo.clientWidth,\n                        this._resizeTo.clientHeight\n                    );\n                }\n            }\n        };\n\n        // On resize\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    static destroy()\n    {\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n","import { Application } from './Application';\nimport { ResizePlugin } from './ResizePlugin';\n\nApplication.registerPlugin(ResizePlugin);\n\nexport { Application };\n"]},"metadata":{},"sourceType":"module"}