{"ast":null,"code":"/*!\n * @pixi/filter-blur - v5.2.1\n * Compiled Tue, 28 Jan 2020 23:33:11 UTC\n *\n * @pixi/filter-blur is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nvar vertTemplate = \"\\n    attribute vec2 aVertexPosition;\\n\\n    uniform mat3 projectionMatrix;\\n\\n    uniform float strength;\\n\\n    varying vec2 vBlurTexCoords[%size%];\\n\\n    uniform vec4 inputSize;\\n    uniform vec4 outputFrame;\\n\\n    vec4 filterVertexPosition( void )\\n    {\\n        vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\\n\\n        return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\\n    }\\n\\n    vec2 filterTextureCoord( void )\\n    {\\n        return aVertexPosition * (outputFrame.zw * inputSize.zw);\\n    }\\n\\n    void main(void)\\n    {\\n        gl_Position = filterVertexPosition();\\n\\n        vec2 textureCoord = filterTextureCoord();\\n        %blur%\\n    }\";\n\nfunction generateBlurVertSource(kernelSize, x) {\n  var halfLength = Math.ceil(kernelSize / 2);\n  var vertSource = vertTemplate;\n  var blurLoop = '';\n  var template; // let value;\n\n  if (x) {\n    template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(%sampleIndex% * strength, 0.0);';\n  } else {\n    template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(0.0, %sampleIndex% * strength);';\n  }\n\n  for (var i = 0; i < kernelSize; i++) {\n    var blur = template.replace('%index%', i); // value = i;\n    // if(i >= halfLength)\n    // {\n    //     value = kernelSize - i - 1;\n    // }\n\n    blur = blur.replace('%sampleIndex%', i - (halfLength - 1) + \".0\");\n    blurLoop += blur;\n    blurLoop += '\\n';\n  }\n\n  vertSource = vertSource.replace('%blur%', blurLoop);\n  vertSource = vertSource.replace('%size%', kernelSize);\n  return vertSource;\n}\n\nvar GAUSSIAN_VALUES = {\n  5: [0.153388, 0.221461, 0.250301],\n  7: [0.071303, 0.131514, 0.189879, 0.214607],\n  9: [0.028532, 0.067234, 0.124009, 0.179044, 0.20236],\n  11: [0.0093, 0.028002, 0.065984, 0.121703, 0.175713, 0.198596],\n  13: [0.002406, 0.009255, 0.027867, 0.065666, 0.121117, 0.174868, 0.197641],\n  15: [0.000489, 0.002403, 0.009246, 0.02784, 0.065602, 0.120999, 0.174697, 0.197448]\n};\nvar fragTemplate = ['varying vec2 vBlurTexCoords[%size%];', 'uniform sampler2D uSampler;', 'void main(void)', '{', '    gl_FragColor = vec4(0.0);', '    %blur%', '}'].join('\\n');\n\nfunction generateBlurFragSource(kernelSize) {\n  var kernel = GAUSSIAN_VALUES[kernelSize];\n  var halfLength = kernel.length;\n  var fragSource = fragTemplate;\n  var blurLoop = '';\n  var template = 'gl_FragColor += texture2D(uSampler, vBlurTexCoords[%index%]) * %value%;';\n  var value;\n\n  for (var i = 0; i < kernelSize; i++) {\n    var blur = template.replace('%index%', i);\n    value = i;\n\n    if (i >= halfLength) {\n      value = kernelSize - i - 1;\n    }\n\n    blur = blur.replace('%value%', kernel[value]);\n    blurLoop += blur;\n    blurLoop += '\\n';\n  }\n\n  fragSource = fragSource.replace('%blur%', blurLoop);\n  fragSource = fragSource.replace('%size%', kernelSize);\n  return fragSource;\n}\n/**\n * The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\n\n\nvar BlurFilterPass =\n/*@__PURE__*/\nfunction (Filter) {\n  function BlurFilterPass(horizontal, strength, quality, resolution, kernelSize) {\n    kernelSize = kernelSize || 5;\n    var vertSrc = generateBlurVertSource(kernelSize, horizontal);\n    var fragSrc = generateBlurFragSource(kernelSize);\n    Filter.call( // vertex shader\n    this, vertSrc, // fragment shader\n    fragSrc);\n    this.horizontal = horizontal;\n    this.resolution = resolution || settings.RESOLUTION;\n    this._quality = 0;\n    this.quality = quality || 4;\n    this.blur = strength || 8;\n  }\n\n  if (Filter) BlurFilterPass.__proto__ = Filter;\n  BlurFilterPass.prototype = Object.create(Filter && Filter.prototype);\n  BlurFilterPass.prototype.constructor = BlurFilterPass;\n  var prototypeAccessors = {\n    blur: {\n      configurable: true\n    },\n    quality: {\n      configurable: true\n    }\n  };\n\n  BlurFilterPass.prototype.apply = function apply(filterManager, input, output, clear) {\n    if (output) {\n      if (this.horizontal) {\n        this.uniforms.strength = 1 / output.width * (output.width / input.width);\n      } else {\n        this.uniforms.strength = 1 / output.height * (output.height / input.height);\n      }\n    } else {\n      if (this.horizontal) // eslint-disable-line\n        {\n          this.uniforms.strength = 1 / filterManager.renderer.width * (filterManager.renderer.width / input.width);\n        } else {\n        this.uniforms.strength = 1 / filterManager.renderer.height * (filterManager.renderer.height / input.height); // eslint-disable-line\n      }\n    } // screen space!\n\n\n    this.uniforms.strength *= this.strength;\n    this.uniforms.strength /= this.passes;\n\n    if (this.passes === 1) {\n      filterManager.applyFilter(this, input, output, clear);\n    } else {\n      var renderTarget = filterManager.getFilterTexture();\n      var renderer = filterManager.renderer;\n      var flip = input;\n      var flop = renderTarget;\n      this.state.blend = false;\n      filterManager.applyFilter(this, flip, flop, true);\n\n      for (var i = 1; i < this.passes - 1; i++) {\n        renderer.renderTexture.bind(flip, flip.filterFrame);\n        this.uniforms.uSampler = flop;\n        var temp = flop;\n        flop = flip;\n        flip = temp;\n        renderer.shader.bind(this);\n        renderer.geometry.draw(5);\n      }\n\n      this.state.blend = true;\n      filterManager.applyFilter(this, flop, output, clear);\n      filterManager.returnFilterTexture(renderTarget);\n    }\n  };\n  /**\n   * Sets the strength of both the blur.\n   *\n   * @member {number}\n   * @default 16\n   */\n\n\n  prototypeAccessors.blur.get = function () {\n    return this.strength;\n  };\n\n  prototypeAccessors.blur.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this.padding = 1 + Math.abs(value) * 2;\n    this.strength = value;\n  };\n  /**\n   * Sets the quality of the blur by modifying the number of passes. More passes means higher\n   * quaility bluring but the lower the performance.\n   *\n   * @member {number}\n   * @default 4\n   */\n\n\n  prototypeAccessors.quality.get = function () {\n    return this._quality;\n  };\n\n  prototypeAccessors.quality.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this._quality = value;\n    this.passes = value;\n  };\n\n  Object.defineProperties(BlurFilterPass.prototype, prototypeAccessors);\n  return BlurFilterPass;\n}(Filter);\n/**\n * The BlurFilter applies a Gaussian blur to an object.\n *\n * The strength of the blur can be set for the x-axis and y-axis separately.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\n\n\nvar BlurFilter =\n/*@__PURE__*/\nfunction (Filter) {\n  function BlurFilter(strength, quality, resolution, kernelSize) {\n    Filter.call(this);\n    this.blurXFilter = new BlurFilterPass(true, strength, quality, resolution, kernelSize);\n    this.blurYFilter = new BlurFilterPass(false, strength, quality, resolution, kernelSize);\n    this.resolution = resolution || settings.RESOLUTION;\n    this.quality = quality || 4;\n    this.blur = strength || 8;\n    this.repeatEdgePixels = false;\n  }\n\n  if (Filter) BlurFilter.__proto__ = Filter;\n  BlurFilter.prototype = Object.create(Filter && Filter.prototype);\n  BlurFilter.prototype.constructor = BlurFilter;\n  var prototypeAccessors = {\n    blur: {\n      configurable: true\n    },\n    quality: {\n      configurable: true\n    },\n    blurX: {\n      configurable: true\n    },\n    blurY: {\n      configurable: true\n    },\n    blendMode: {\n      configurable: true\n    },\n    repeatEdgePixels: {\n      configurable: true\n    }\n  };\n  /**\n   * Applies the filter.\n   *\n   * @param {PIXI.systems.FilterSystem} filterManager - The manager.\n   * @param {PIXI.RenderTexture} input - The input target.\n   * @param {PIXI.RenderTexture} output - The output target.\n   */\n\n  BlurFilter.prototype.apply = function apply(filterManager, input, output, clear) {\n    var xStrength = Math.abs(this.blurXFilter.strength);\n    var yStrength = Math.abs(this.blurYFilter.strength);\n\n    if (xStrength && yStrength) {\n      var renderTarget = filterManager.getFilterTexture();\n      this.blurXFilter.apply(filterManager, input, renderTarget, true);\n      this.blurYFilter.apply(filterManager, renderTarget, output, clear);\n      filterManager.returnFilterTexture(renderTarget);\n    } else if (yStrength) {\n      this.blurYFilter.apply(filterManager, input, output, clear);\n    } else {\n      this.blurXFilter.apply(filterManager, input, output, clear);\n    }\n  };\n\n  BlurFilter.prototype.updatePadding = function updatePadding() {\n    if (this._repeatEdgePixels) {\n      this.padding = 0;\n    } else {\n      this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n    }\n  };\n  /**\n   * Sets the strength of both the blurX and blurY properties simultaneously\n   *\n   * @member {number}\n   * @default 2\n   */\n\n\n  prototypeAccessors.blur.get = function () {\n    return this.blurXFilter.blur;\n  };\n\n  prototypeAccessors.blur.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this.blurXFilter.blur = this.blurYFilter.blur = value;\n    this.updatePadding();\n  };\n  /**\n   * Sets the number of passes for blur. More passes means higher quaility bluring.\n   *\n   * @member {number}\n   * @default 1\n   */\n\n\n  prototypeAccessors.quality.get = function () {\n    return this.blurXFilter.quality;\n  };\n\n  prototypeAccessors.quality.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this.blurXFilter.quality = this.blurYFilter.quality = value;\n  };\n  /**\n   * Sets the strength of the blurX property\n   *\n   * @member {number}\n   * @default 2\n   */\n\n\n  prototypeAccessors.blurX.get = function () {\n    return this.blurXFilter.blur;\n  };\n\n  prototypeAccessors.blurX.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this.blurXFilter.blur = value;\n    this.updatePadding();\n  };\n  /**\n   * Sets the strength of the blurY property\n   *\n   * @member {number}\n   * @default 2\n   */\n\n\n  prototypeAccessors.blurY.get = function () {\n    return this.blurYFilter.blur;\n  };\n\n  prototypeAccessors.blurY.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this.blurYFilter.blur = value;\n    this.updatePadding();\n  };\n  /**\n   * Sets the blendmode of the filter\n   *\n   * @member {number}\n   * @default PIXI.BLEND_MODES.NORMAL\n   */\n\n\n  prototypeAccessors.blendMode.get = function () {\n    return this.blurYFilter.blendMode;\n  };\n\n  prototypeAccessors.blendMode.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this.blurYFilter.blendMode = value;\n  };\n  /**\n   * If set to true the edge of the target will be clamped\n   *\n   * @member {bool}\n   * @default false\n   */\n\n\n  prototypeAccessors.repeatEdgePixels.get = function () {\n    return this._repeatEdgePixels;\n  };\n\n  prototypeAccessors.repeatEdgePixels.set = function (value) {\n    this._repeatEdgePixels = value;\n    this.updatePadding();\n  };\n\n  Object.defineProperties(BlurFilter.prototype, prototypeAccessors);\n  return BlurFilter;\n}(Filter);\n\nexport { BlurFilter, BlurFilterPass };","map":{"version":3,"sources":["../src/generateBlurVertSource.js","../src/generateBlurFragSource.js","../src/BlurFilterPass.js","../src/BlurFilter.js"],"names":["const","let","super"],"mappings":"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","sourcesContent":["const vertTemplate = `\n    attribute vec2 aVertexPosition;\n\n    uniform mat3 projectionMatrix;\n\n    uniform float strength;\n\n    varying vec2 vBlurTexCoords[%size%];\n\n    uniform vec4 inputSize;\n    uniform vec4 outputFrame;\n\n    vec4 filterVertexPosition( void )\n    {\n        vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n        return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n    }\n\n    vec2 filterTextureCoord( void )\n    {\n        return aVertexPosition * (outputFrame.zw * inputSize.zw);\n    }\n\n    void main(void)\n    {\n        gl_Position = filterVertexPosition();\n\n        vec2 textureCoord = filterTextureCoord();\n        %blur%\n    }`;\n\nexport function generateBlurVertSource(kernelSize, x)\n{\n    const halfLength = Math.ceil(kernelSize / 2);\n\n    let vertSource = vertTemplate;\n\n    let blurLoop = '';\n    let template;\n    // let value;\n\n    if (x)\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(%sampleIndex% * strength, 0.0);';\n    }\n    else\n    {\n        template = 'vBlurTexCoords[%index%] =  textureCoord + vec2(0.0, %sampleIndex% * strength);';\n    }\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i);\n\n        // value = i;\n\n        // if(i >= halfLength)\n        // {\n        //     value = kernelSize - i - 1;\n        // }\n\n        blur = blur.replace('%sampleIndex%', `${i - (halfLength - 1)}.0`);\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    vertSource = vertSource.replace('%blur%', blurLoop);\n    vertSource = vertSource.replace('%size%', kernelSize);\n\n    return vertSource;\n}\n","const GAUSSIAN_VALUES = {\n    5: [0.153388, 0.221461, 0.250301],\n    7: [0.071303, 0.131514, 0.189879, 0.214607],\n    9: [0.028532, 0.067234, 0.124009, 0.179044, 0.20236],\n    11: [0.0093, 0.028002, 0.065984, 0.121703, 0.175713, 0.198596],\n    13: [0.002406, 0.009255, 0.027867, 0.065666, 0.121117, 0.174868, 0.197641],\n    15: [0.000489, 0.002403, 0.009246, 0.02784, 0.065602, 0.120999, 0.174697, 0.197448],\n};\n\nconst fragTemplate = [\n    'varying vec2 vBlurTexCoords[%size%];',\n    'uniform sampler2D uSampler;',\n\n    'void main(void)',\n    '{',\n    '    gl_FragColor = vec4(0.0);',\n    '    %blur%',\n    '}',\n\n].join('\\n');\n\nexport function generateBlurFragSource(kernelSize)\n{\n    const kernel = GAUSSIAN_VALUES[kernelSize];\n    const halfLength = kernel.length;\n\n    let fragSource = fragTemplate;\n\n    let blurLoop = '';\n    const template = 'gl_FragColor += texture2D(uSampler, vBlurTexCoords[%index%]) * %value%;';\n    let value;\n\n    for (let i = 0; i < kernelSize; i++)\n    {\n        let blur = template.replace('%index%', i);\n\n        value = i;\n\n        if (i >= halfLength)\n        {\n            value = kernelSize - i - 1;\n        }\n\n        blur = blur.replace('%value%', kernel[value]);\n\n        blurLoop += blur;\n        blurLoop += '\\n';\n    }\n\n    fragSource = fragSource.replace('%blur%', blurLoop);\n    fragSource = fragSource.replace('%size%', kernelSize);\n\n    return fragSource;\n}\n","import { Filter } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { generateBlurVertSource } from './generateBlurVertSource';\nimport { generateBlurFragSource } from './generateBlurFragSource';\n\n/**\n * The BlurFilterPass applies a horizontal or vertical Gaussian blur to an object.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport class BlurFilterPass extends Filter\n{\n    /**\n     * @param {boolean} horizontal - Do pass along the x-axis (`true`) or y-axis (`false`).\n     * @param {number} strength - The strength of the blur filter.\n     * @param {number} quality - The quality of the blur filter.\n     * @param {number} resolution - The resolution of the blur filter.\n     * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(horizontal, strength, quality, resolution, kernelSize)\n    {\n        kernelSize = kernelSize || 5;\n        const vertSrc = generateBlurVertSource(kernelSize, horizontal);\n        const fragSrc = generateBlurFragSource(kernelSize);\n\n        super(\n            // vertex shader\n            vertSrc,\n            // fragment shader\n            fragSrc\n        );\n\n        this.horizontal = horizontal;\n\n        this.resolution = resolution || settings.RESOLUTION;\n\n        this._quality = 0;\n\n        this.quality = quality || 4;\n\n        this.blur = strength || 8;\n    }\n\n    apply(filterManager, input, output, clear)\n    {\n        if (output)\n        {\n            if (this.horizontal)\n            {\n                this.uniforms.strength = (1 / output.width) * (output.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / output.height) * (output.height / input.height);\n            }\n        }\n        else\n        {\n            if (this.horizontal) // eslint-disable-line\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.width) * (filterManager.renderer.width / input.width);\n            }\n            else\n            {\n                this.uniforms.strength = (1 / filterManager.renderer.height) * (filterManager.renderer.height / input.height); // eslint-disable-line\n            }\n        }\n\n        // screen space!\n        this.uniforms.strength *= this.strength;\n        this.uniforms.strength /= this.passes;\n\n        if (this.passes === 1)\n        {\n            filterManager.applyFilter(this, input, output, clear);\n        }\n        else\n        {\n            const renderTarget = filterManager.getFilterTexture();\n            const renderer = filterManager.renderer;\n\n            let flip = input;\n            let flop = renderTarget;\n\n            this.state.blend = false;\n            filterManager.applyFilter(this, flip, flop, true);\n\n            for (let i = 1; i < this.passes - 1; i++)\n            {\n                renderer.renderTexture.bind(flip, flip.filterFrame);\n\n                this.uniforms.uSampler = flop;\n\n                const temp = flop;\n\n                flop = flip;\n                flip = temp;\n\n                renderer.shader.bind(this);\n                renderer.geometry.draw(5);\n            }\n\n            this.state.blend = true;\n            filterManager.applyFilter(this, flop, output, clear);\n            filterManager.returnFilterTexture(renderTarget);\n        }\n    }\n    /**\n     * Sets the strength of both the blur.\n     *\n     * @member {number}\n     * @default 16\n     */\n    get blur()\n    {\n        return this.strength;\n    }\n\n    set blur(value) // eslint-disable-line require-jsdoc\n    {\n        this.padding = 1 + (Math.abs(value) * 2);\n        this.strength = value;\n    }\n\n    /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quaility bluring but the lower the performance.\n     *\n     * @member {number}\n     * @default 4\n     */\n    get quality()\n    {\n        return this._quality;\n    }\n\n    set quality(value) // eslint-disable-line require-jsdoc\n    {\n        this._quality = value;\n        this.passes = value;\n    }\n}\n","import { Filter } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { BlurFilterPass } from './BlurFilterPass';\n\n/**\n * The BlurFilter applies a Gaussian blur to an object.\n *\n * The strength of the blur can be set for the x-axis and y-axis separately.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport class BlurFilter extends Filter\n{\n    /**\n     * @param {number} [strength=8] - The strength of the blur filter.\n     * @param {number} [quality=4] - The quality of the blur filter.\n     * @param {number} [resolution] - The resolution of the blur filter.\n     * @param {number} [kernelSize=5] - The kernelSize of the blur filter.Options: 5, 7, 9, 11, 13, 15.\n     */\n    constructor(strength, quality, resolution, kernelSize)\n    {\n        super();\n\n        this.blurXFilter = new BlurFilterPass(true, strength, quality, resolution, kernelSize);\n        this.blurYFilter = new BlurFilterPass(false, strength, quality, resolution, kernelSize);\n\n        this.resolution = resolution || settings.RESOLUTION;\n        this.quality = quality || 4;\n        this.blur = strength || 8;\n\n        this.repeatEdgePixels = false;\n    }\n\n    /**\n     * Applies the filter.\n     *\n     * @param {PIXI.systems.FilterSystem} filterManager - The manager.\n     * @param {PIXI.RenderTexture} input - The input target.\n     * @param {PIXI.RenderTexture} output - The output target.\n     */\n    apply(filterManager, input, output, clear)\n    {\n        const xStrength = Math.abs(this.blurXFilter.strength);\n        const yStrength = Math.abs(this.blurYFilter.strength);\n\n        if (xStrength && yStrength)\n        {\n            const renderTarget = filterManager.getFilterTexture();\n\n            this.blurXFilter.apply(filterManager, input, renderTarget, true);\n            this.blurYFilter.apply(filterManager, renderTarget, output, clear);\n\n            filterManager.returnFilterTexture(renderTarget);\n        }\n        else if (yStrength)\n        {\n            this.blurYFilter.apply(filterManager, input, output, clear);\n        }\n        else\n        {\n            this.blurXFilter.apply(filterManager, input, output, clear);\n        }\n    }\n\n    updatePadding()\n    {\n        if (this._repeatEdgePixels)\n        {\n            this.padding = 0;\n        }\n        else\n        {\n            this.padding = Math.max(Math.abs(this.blurXFilter.strength), Math.abs(this.blurYFilter.strength)) * 2;\n        }\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blur()\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blur(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the number of passes for blur. More passes means higher quaility bluring.\n     *\n     * @member {number}\n     * @default 1\n     */\n    get quality()\n    {\n        return this.blurXFilter.quality;\n    }\n\n    set quality(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurXFilter.quality = this.blurYFilter.quality = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurX()\n    {\n        return this.blurXFilter.blur;\n    }\n\n    set blurX(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurXFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blurY()\n    {\n        return this.blurYFilter.blur;\n    }\n\n    set blurY(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurYFilter.blur = value;\n        this.updatePadding();\n    }\n\n    /**\n     * Sets the blendmode of the filter\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode()\n    {\n        return this.blurYFilter.blendMode;\n    }\n\n    set blendMode(value) // eslint-disable-line require-jsdoc\n    {\n        this.blurYFilter.blendMode = value;\n    }\n\n    /**\n     * If set to true the edge of the target will be clamped\n     *\n     * @member {bool}\n     * @default false\n     */\n    get repeatEdgePixels()\n    {\n        return this._repeatEdgePixels;\n    }\n\n    set repeatEdgePixels(value)\n    {\n        this._repeatEdgePixels = value;\n        this.updatePadding();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}