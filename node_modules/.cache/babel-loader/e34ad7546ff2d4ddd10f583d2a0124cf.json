{"ast":null,"code":"/*!\n * @pixi/filter-alpha - v5.2.1\n * Compiled Tue, 28 Jan 2020 23:33:11 UTC\n *\n * @pixi/filter-alpha is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Filter, defaultVertex } from '@pixi/core';\nvar fragment = \"varying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform float uAlpha;\\n\\nvoid main(void)\\n{\\n   gl_FragColor = texture2D(uSampler, vTextureCoord) * uAlpha;\\n}\\n\";\n/**\n * Simplest filter - applies alpha.\n *\n * Use this instead of Container's alpha property to avoid visual layering of individual elements.\n * AlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.\n * If elements are not opaque, they will blend with each other anyway.\n *\n * Very handy if you want to use common features of all filters:\n *\n * 1. Assign a blendMode to this filter, blend all elements inside display object with background.\n *\n * 2. To use clipping in display coordinates, assign a filterArea to the same container that has this filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\n\nvar AlphaFilter =\n/*@__PURE__*/\nfunction (Filter) {\n  function AlphaFilter(alpha) {\n    if (alpha === void 0) alpha = 1.0;\n    Filter.call(this, defaultVertex, fragment, {\n      uAlpha: 1\n    });\n    this.alpha = alpha;\n  }\n\n  if (Filter) AlphaFilter.__proto__ = Filter;\n  AlphaFilter.prototype = Object.create(Filter && Filter.prototype);\n  AlphaFilter.prototype.constructor = AlphaFilter;\n  var prototypeAccessors = {\n    alpha: {\n      configurable: true\n    }\n  };\n  /**\n   * Coefficient for alpha multiplication\n   *\n   * @member {number}\n   * @default 1\n   */\n\n  prototypeAccessors.alpha.get = function () {\n    return this.uniforms.uAlpha;\n  };\n\n  prototypeAccessors.alpha.set = function (value) // eslint-disable-line require-jsdoc\n  {\n    this.uniforms.uAlpha = value;\n  };\n\n  Object.defineProperties(AlphaFilter.prototype, prototypeAccessors);\n  return AlphaFilter;\n}(Filter);\n\nexport { AlphaFilter };","map":{"version":3,"sources":["../src/AlphaFilter.js"],"names":["super"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAa,WAAW;AAAA;AAAA,UAAA,MAAA,EAAA;AAKpB,WAAA,WAAA,CAAY,KAAZ,EACA;+BADiB,GAAG,G;AAEhBA,IAAAA,MAAAA,CAAAA,IAAAA,CAAK,IAALA,EAAM,aAANA,EAAqB,QAArBA,EAA+B;AAAE,MAAA,MAAM,EAAE;AAAV,KAA/BA;AAEA,SAAK,KAAL,GAAa,KAAb;;;;;;;;oBACH;;;;;;;;;;AAQD,EAAA,kBAAA,CAAI,KAAJ,CAAI,GAAJ,GAAI,YACJ;AACI,WAAO,KAAK,QAAL,CAAc,MAArB;AACH,GAHD;;AAKA,EAAA,kBAAA,CAAI,KAAJ,CAAI,GAAJ,GAAI,UAAM,KAAN,EAAW;AACf;AACI,SAAK,QAAL,CAAc,MAAd,GAAuB,KAAvB;AACH,GAHD;;;;CAvBoB,CAAS,MAAT,CAAxB","sourcesContent":["import { Filter, defaultVertex } from '@pixi/core';\nimport fragment from './alpha.frag';\n\n/**\n * Simplest filter - applies alpha.\n *\n * Use this instead of Container's alpha property to avoid visual layering of individual elements.\n * AlphaFilter applies alpha evenly across the entire display object and any opaque elements it contains.\n * If elements are not opaque, they will blend with each other anyway.\n *\n * Very handy if you want to use common features of all filters:\n *\n * 1. Assign a blendMode to this filter, blend all elements inside display object with background.\n *\n * 2. To use clipping in display coordinates, assign a filterArea to the same container that has this filter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport class AlphaFilter extends Filter\n{\n    /**\n     * @param {number} [alpha=1] Amount of alpha from 0 to 1, where 0 is transparent\n     */\n    constructor(alpha = 1.0)\n    {\n        super(defaultVertex, fragment, { uAlpha: 1 });\n\n        this.alpha = alpha;\n    }\n\n    /**\n     * Coefficient for alpha multiplication\n     *\n     * @member {number}\n     * @default 1\n     */\n    get alpha()\n    {\n        return this.uniforms.uAlpha;\n    }\n\n    set alpha(value) // eslint-disable-line require-jsdoc\n    {\n        this.uniforms.uAlpha = value;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}